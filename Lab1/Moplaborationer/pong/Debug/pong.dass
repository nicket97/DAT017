
./Debug/pong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f950 	bl	200002a8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
void set_object_speed(POBJECT p, int x, int y){
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
    p->dirx = x;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
    p->diry = y;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
    }
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:
void draw_object(POBJECT p){
20000030:	b580      	push	{r7, lr}
20000032:	b086      	sub	sp, #24
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
     POINT *ptr = p->geo->px;
20000038:	687b      	ldr	r3, [r7, #4]
2000003a:	681b      	ldr	r3, [r3, #0]
2000003c:	330c      	adds	r3, #12
2000003e:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < p->geo->numpoints; i++){
20000040:	2300      	movs	r3, #0
20000042:	613b      	str	r3, [r7, #16]
20000044:	e017      	b.n	20000076 <draw_object+0x46>
        unsigned int x = p->posx + ptr->x;
20000046:	687b      	ldr	r3, [r7, #4]
20000048:	68db      	ldr	r3, [r3, #12]
2000004a:	697a      	ldr	r2, [r7, #20]
2000004c:	7812      	ldrb	r2, [r2, #0]
2000004e:	189b      	adds	r3, r3, r2
20000050:	60fb      	str	r3, [r7, #12]
        unsigned int y = p->posy + ptr->y;
20000052:	687b      	ldr	r3, [r7, #4]
20000054:	691b      	ldr	r3, [r3, #16]
20000056:	697a      	ldr	r2, [r7, #20]
20000058:	7852      	ldrb	r2, [r2, #1]
2000005a:	189b      	adds	r3, r3, r2
2000005c:	60bb      	str	r3, [r7, #8]
        pixel(x,y, 1);
2000005e:	68b9      	ldr	r1, [r7, #8]
20000060:	68fb      	ldr	r3, [r7, #12]
20000062:	2201      	movs	r2, #1
20000064:	0018      	movs	r0, r3
20000066:	f000 fbaf 	bl	200007c8 <pixel>
        ptr++;
2000006a:	697b      	ldr	r3, [r7, #20]
2000006c:	3302      	adds	r3, #2
2000006e:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < p->geo->numpoints; i++){
20000070:	693b      	ldr	r3, [r7, #16]
20000072:	3301      	adds	r3, #1
20000074:	613b      	str	r3, [r7, #16]
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	681b      	ldr	r3, [r3, #0]
2000007a:	681a      	ldr	r2, [r3, #0]
2000007c:	693b      	ldr	r3, [r7, #16]
2000007e:	429a      	cmp	r2, r3
20000080:	dce1      	bgt.n	20000046 <draw_object+0x16>
    }
20000082:	46c0      	nop			; (mov r8, r8)
20000084:	46bd      	mov	sp, r7
20000086:	b006      	add	sp, #24
20000088:	bd80      	pop	{r7, pc}

2000008a <clear_object>:
void clear_object(POBJECT p){
2000008a:	b580      	push	{r7, lr}
2000008c:	b086      	sub	sp, #24
2000008e:	af00      	add	r7, sp, #0
20000090:	6078      	str	r0, [r7, #4]
     POINT *ptr = p->geo->px;
20000092:	687b      	ldr	r3, [r7, #4]
20000094:	681b      	ldr	r3, [r3, #0]
20000096:	330c      	adds	r3, #12
20000098:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < p->geo->numpoints; i++){
2000009a:	2300      	movs	r3, #0
2000009c:	613b      	str	r3, [r7, #16]
2000009e:	e017      	b.n	200000d0 <clear_object+0x46>
        unsigned int x = p->posx + ptr->x;
200000a0:	687b      	ldr	r3, [r7, #4]
200000a2:	68db      	ldr	r3, [r3, #12]
200000a4:	697a      	ldr	r2, [r7, #20]
200000a6:	7812      	ldrb	r2, [r2, #0]
200000a8:	189b      	adds	r3, r3, r2
200000aa:	60fb      	str	r3, [r7, #12]
        unsigned int y = p->posy + ptr->y;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	691b      	ldr	r3, [r3, #16]
200000b0:	697a      	ldr	r2, [r7, #20]
200000b2:	7852      	ldrb	r2, [r2, #1]
200000b4:	189b      	adds	r3, r3, r2
200000b6:	60bb      	str	r3, [r7, #8]
        pixel(x,y, 0);
200000b8:	68b9      	ldr	r1, [r7, #8]
200000ba:	68fb      	ldr	r3, [r7, #12]
200000bc:	2200      	movs	r2, #0
200000be:	0018      	movs	r0, r3
200000c0:	f000 fb82 	bl	200007c8 <pixel>
        ptr++;
200000c4:	697b      	ldr	r3, [r7, #20]
200000c6:	3302      	adds	r3, #2
200000c8:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < p->geo->numpoints; i++){
200000ca:	693b      	ldr	r3, [r7, #16]
200000cc:	3301      	adds	r3, #1
200000ce:	613b      	str	r3, [r7, #16]
200000d0:	687b      	ldr	r3, [r7, #4]
200000d2:	681b      	ldr	r3, [r3, #0]
200000d4:	681a      	ldr	r2, [r3, #0]
200000d6:	693b      	ldr	r3, [r7, #16]
200000d8:	429a      	cmp	r2, r3
200000da:	dce1      	bgt.n	200000a0 <clear_object+0x16>
    }
200000dc:	46c0      	nop			; (mov r8, r8)
200000de:	46bd      	mov	sp, r7
200000e0:	b006      	add	sp, #24
200000e2:	bd80      	pop	{r7, pc}

200000e4 <move_object>:
void move_object(POBJECT p){
200000e4:	b580      	push	{r7, lr}
200000e6:	b084      	sub	sp, #16
200000e8:	af00      	add	r7, sp, #0
200000ea:	6078      	str	r0, [r7, #4]
    clear_object(p);
200000ec:	687b      	ldr	r3, [r7, #4]
200000ee:	0018      	movs	r0, r3
200000f0:	f7ff ffcb 	bl	2000008a <clear_object>
    p->posx = p->posx + p->dirx;
200000f4:	687b      	ldr	r3, [r7, #4]
200000f6:	68da      	ldr	r2, [r3, #12]
200000f8:	687b      	ldr	r3, [r7, #4]
200000fa:	685b      	ldr	r3, [r3, #4]
200000fc:	18d2      	adds	r2, r2, r3
200000fe:	687b      	ldr	r3, [r7, #4]
20000100:	60da      	str	r2, [r3, #12]
    p->posy = p->posy + p->diry;
20000102:	687b      	ldr	r3, [r7, #4]
20000104:	691a      	ldr	r2, [r3, #16]
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	689b      	ldr	r3, [r3, #8]
2000010a:	18d2      	adds	r2, r2, r3
2000010c:	687b      	ldr	r3, [r7, #4]
2000010e:	611a      	str	r2, [r3, #16]
    int px = p->posx;
20000110:	687b      	ldr	r3, [r7, #4]
20000112:	68db      	ldr	r3, [r3, #12]
20000114:	60fb      	str	r3, [r7, #12]
    int py = p->posy;
20000116:	687b      	ldr	r3, [r7, #4]
20000118:	691b      	ldr	r3, [r3, #16]
2000011a:	60bb      	str	r3, [r7, #8]
    draw_object(p);
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	0018      	movs	r0, r3
20000120:	f7ff ff86 	bl	20000030 <draw_object>
    }
20000124:	46c0      	nop			; (mov r8, r8)
20000126:	46bd      	mov	sp, r7
20000128:	b004      	add	sp, #16
2000012a:	bd80      	pop	{r7, pc}

2000012c <init_app>:
void init_app(void){
2000012c:	b580      	push	{r7, lr}
2000012e:	af00      	add	r7, sp, #0
    *GPIOE_MODER = 0x55555555;
20000130:	4b0f      	ldr	r3, [pc, #60]	; (20000170 <init_app+0x44>)
20000132:	4a10      	ldr	r2, [pc, #64]	; (20000174 <init_app+0x48>)
20000134:	601a      	str	r2, [r3, #0]
	/*sätter våra in och ut portar*/
	*GPIOE_OTYPER = 0x70;
20000136:	4b10      	ldr	r3, [pc, #64]	; (20000178 <init_app+0x4c>)
20000138:	2270      	movs	r2, #112	; 0x70
2000013a:	801a      	strh	r2, [r3, #0]
	*GPIOE_PUPDR = 0x0AA;
2000013c:	4b0f      	ldr	r3, [pc, #60]	; (2000017c <init_app+0x50>)
2000013e:	22aa      	movs	r2, #170	; 0xaa
20000140:	601a      	str	r2, [r3, #0]
	*GPIOE_ODR_HIGH = *GPIOE_ODR_HIGH & 0x00FF;
20000142:	4b0f      	ldr	r3, [pc, #60]	; (20000180 <init_app+0x54>)
20000144:	4a0e      	ldr	r2, [pc, #56]	; (20000180 <init_app+0x54>)
20000146:	7812      	ldrb	r2, [r2, #0]
20000148:	b2d2      	uxtb	r2, r2
2000014a:	701a      	strb	r2, [r3, #0]
    
    *GPIOD_MODER = 0x55005555;
2000014c:	4b0d      	ldr	r3, [pc, #52]	; (20000184 <init_app+0x58>)
2000014e:	4a0e      	ldr	r2, [pc, #56]	; (20000188 <init_app+0x5c>)
20000150:	601a      	str	r2, [r3, #0]
	/*sätter våra in och ut portar*/
	*GPIOD_OTYPER = 0x70;
20000152:	4b0e      	ldr	r3, [pc, #56]	; (2000018c <init_app+0x60>)
20000154:	2270      	movs	r2, #112	; 0x70
20000156:	801a      	strh	r2, [r3, #0]
	*GPIOD_PUPDR = 0x0AA;
20000158:	4b0d      	ldr	r3, [pc, #52]	; (20000190 <init_app+0x64>)
2000015a:	22aa      	movs	r2, #170	; 0xaa
2000015c:	601a      	str	r2, [r3, #0]
	*GPIOD_ODR_HIGH = *GPIOD_ODR_HIGH & 0x00FF;
2000015e:	4b0d      	ldr	r3, [pc, #52]	; (20000194 <init_app+0x68>)
20000160:	4a0c      	ldr	r2, [pc, #48]	; (20000194 <init_app+0x68>)
20000162:	7812      	ldrb	r2, [r2, #0]
20000164:	b2d2      	uxtb	r2, r2
20000166:	701a      	strb	r2, [r3, #0]
    }
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40021000 	andmi	r1, r2, r0
20000174:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000178:	40021004 	andmi	r1, r2, r4
2000017c:	4002100c 	andmi	r1, r2, ip
20000180:	40021015 	andmi	r1, r2, r5, lsl r0
20000184:	40020c00 	andmi	r0, r2, r0, lsl #24
20000188:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
2000018c:	40020c04 	andmi	r0, r2, r4, lsl #24
20000190:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000194:	40020c15 	andmi	r0, r2, r5, lsl ip

20000198 <getCol>:
    int getCol ( void )
{
20000198:	b580      	push	{r7, lr}
2000019a:	b082      	sub	sp, #8
2000019c:	af00      	add	r7, sp, #0
	/*om nÃ¥gon tangent i aktiverad rad Ã¤r nedtryckt sÃ¥ skall dess kolumn nummer returneras. Annars returneras 0*/
	unsigned char c;
	c = *GPIOD_IDR_HIGH;
2000019e:	4a12      	ldr	r2, [pc, #72]	; (200001e8 <getCol+0x50>)
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	7812      	ldrb	r2, [r2, #0]
200001a4:	701a      	strb	r2, [r3, #0]
	if ( c & 0x8 ) return 4;
200001a6:	1dfb      	adds	r3, r7, #7
200001a8:	781b      	ldrb	r3, [r3, #0]
200001aa:	2208      	movs	r2, #8
200001ac:	4013      	ands	r3, r2
200001ae:	d001      	beq.n	200001b4 <getCol+0x1c>
200001b0:	2304      	movs	r3, #4
200001b2:	e015      	b.n	200001e0 <getCol+0x48>
	if ( c & 0x4 ) return 3;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
200001b8:	2204      	movs	r2, #4
200001ba:	4013      	ands	r3, r2
200001bc:	d001      	beq.n	200001c2 <getCol+0x2a>
200001be:	2303      	movs	r3, #3
200001c0:	e00e      	b.n	200001e0 <getCol+0x48>
	if ( c & 0x2 ) return 2;
200001c2:	1dfb      	adds	r3, r7, #7
200001c4:	781b      	ldrb	r3, [r3, #0]
200001c6:	2202      	movs	r2, #2
200001c8:	4013      	ands	r3, r2
200001ca:	d001      	beq.n	200001d0 <getCol+0x38>
200001cc:	2302      	movs	r3, #2
200001ce:	e007      	b.n	200001e0 <getCol+0x48>
	if ( c & 0x1 ) return 1;
200001d0:	1dfb      	adds	r3, r7, #7
200001d2:	781b      	ldrb	r3, [r3, #0]
200001d4:	2201      	movs	r2, #1
200001d6:	4013      	ands	r3, r2
200001d8:	d001      	beq.n	200001de <getCol+0x46>
200001da:	2301      	movs	r3, #1
200001dc:	e000      	b.n	200001e0 <getCol+0x48>
	return 0;
200001de:	2300      	movs	r3, #0
}
200001e0:	0018      	movs	r0, r3
200001e2:	46bd      	mov	sp, r7
200001e4:	b002      	add	sp, #8
200001e6:	bd80      	pop	{r7, pc}
200001e8:	40020c11 	andmi	r0, r2, r1, lsl ip

200001ec <activateRow>:

void activateRow ( unsigned int row )
{
200001ec:	b580      	push	{r7, lr}
200001ee:	b082      	sub	sp, #8
200001f0:	af00      	add	r7, sp, #0
200001f2:	6078      	str	r0, [r7, #4]
	/*ativerar raden fÃ¶r den nedtryckta tangented och man borde deaktivera de andra*/
	switch ( row )
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	2b04      	cmp	r3, #4
200001f8:	d819      	bhi.n	2000022e <activateRow+0x42>
200001fa:	687b      	ldr	r3, [r7, #4]
200001fc:	009a      	lsls	r2, r3, #2
200001fe:	4b0e      	ldr	r3, [pc, #56]	; (20000238 <activateRow+0x4c>)
20000200:	18d3      	adds	r3, r2, r3
20000202:	681b      	ldr	r3, [r3, #0]
20000204:	469f      	mov	pc, r3
	{
	case 1: *GPIOD_ODR_HIGH = 0x10; break;
20000206:	4b0d      	ldr	r3, [pc, #52]	; (2000023c <activateRow+0x50>)
20000208:	2210      	movs	r2, #16
2000020a:	701a      	strb	r2, [r3, #0]
2000020c:	e00f      	b.n	2000022e <activateRow+0x42>
	case 2: *GPIOD_ODR_HIGH = 0x20; break;
2000020e:	4b0b      	ldr	r3, [pc, #44]	; (2000023c <activateRow+0x50>)
20000210:	2220      	movs	r2, #32
20000212:	701a      	strb	r2, [r3, #0]
20000214:	e00b      	b.n	2000022e <activateRow+0x42>
	case 3: *GPIOD_ODR_HIGH = 0x40; break;
20000216:	4b09      	ldr	r3, [pc, #36]	; (2000023c <activateRow+0x50>)
20000218:	2240      	movs	r2, #64	; 0x40
2000021a:	701a      	strb	r2, [r3, #0]
2000021c:	e007      	b.n	2000022e <activateRow+0x42>
	case 4: *GPIOD_ODR_HIGH = 0x80; break;
2000021e:	4b07      	ldr	r3, [pc, #28]	; (2000023c <activateRow+0x50>)
20000220:	2280      	movs	r2, #128	; 0x80
20000222:	701a      	strb	r2, [r3, #0]
20000224:	e003      	b.n	2000022e <activateRow+0x42>
	case 0: *GPIOD_ODR_HIGH = 0x00; break;
20000226:	4b05      	ldr	r3, [pc, #20]	; (2000023c <activateRow+0x50>)
20000228:	2200      	movs	r2, #0
2000022a:	701a      	strb	r2, [r3, #0]
2000022c:	46c0      	nop			; (mov r8, r8)
	}
}
2000022e:	46c0      	nop			; (mov r8, r8)
20000230:	46bd      	mov	sp, r7
20000232:	b002      	add	sp, #8
20000234:	bd80      	pop	{r7, pc}
20000236:	46c0      	nop			; (mov r8, r8)
20000238:	20000ad8 	ldrdcs	r0, [r0], -r8
2000023c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000240 <keyb>:

    unsigned char keyb ( void ) 
{
20000240:	b590      	push	{r4, r7, lr}
20000242:	b087      	sub	sp, #28
20000244:	af00      	add	r7, sp, #0
	unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000246:	003b      	movs	r3, r7
20000248:	4a16      	ldr	r2, [pc, #88]	; (200002a4 <keyb+0x64>)
2000024a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000024c:	c313      	stmia	r3!, {r0, r1, r4}
2000024e:	6812      	ldr	r2, [r2, #0]
20000250:	601a      	str	r2, [r3, #0]
	int row, col;
	for (row=1; row<=4; row++){
20000252:	2301      	movs	r3, #1
20000254:	617b      	str	r3, [r7, #20]
20000256:	e019      	b.n	2000028c <keyb+0x4c>
		activateRow( row );
20000258:	697b      	ldr	r3, [r7, #20]
2000025a:	0018      	movs	r0, r3
2000025c:	f7ff ffc6 	bl	200001ec <activateRow>
		if( ( col = getCol() ) ) /* om col blir tilldelat nol kommer inte ifsatsen att kÃ¶ras*/
20000260:	f7ff ff9a 	bl	20000198 <getCol>
20000264:	0003      	movs	r3, r0
20000266:	613b      	str	r3, [r7, #16]
20000268:	693b      	ldr	r3, [r7, #16]
2000026a:	2b00      	cmp	r3, #0
2000026c:	d00b      	beq.n	20000286 <keyb+0x46>
		{
			activateRow( 0 ); /*sÃ¤tter raden til 0 sÃ¥ att den lir nolstÃ¤ld och att avlÃ¤sning efter Ã¥t inte blir fel. Row och col har redan fÃ¥tt vÃ¤rden sÂ¨Ã¥ de Ã¶r chill*/
2000026e:	2000      	movs	r0, #0
20000270:	f7ff ffbc 	bl	200001ec <activateRow>
			return key[ 4*(row-1)+(col-1) ];
20000274:	697b      	ldr	r3, [r7, #20]
20000276:	3b01      	subs	r3, #1
20000278:	009a      	lsls	r2, r3, #2
2000027a:	693b      	ldr	r3, [r7, #16]
2000027c:	3b01      	subs	r3, #1
2000027e:	18d3      	adds	r3, r2, r3
20000280:	003a      	movs	r2, r7
20000282:	5cd3      	ldrb	r3, [r2, r3]
20000284:	e009      	b.n	2000029a <keyb+0x5a>
	for (row=1; row<=4; row++){
20000286:	697b      	ldr	r3, [r7, #20]
20000288:	3301      	adds	r3, #1
2000028a:	617b      	str	r3, [r7, #20]
2000028c:	697b      	ldr	r3, [r7, #20]
2000028e:	2b04      	cmp	r3, #4
20000290:	dde2      	ble.n	20000258 <keyb+0x18>
		}
	}
	activateRow ( 0 );
20000292:	2000      	movs	r0, #0
20000294:	f7ff ffaa 	bl	200001ec <activateRow>
	return 0xFF;
20000298:	23ff      	movs	r3, #255	; 0xff
}
2000029a:	0018      	movs	r0, r3
2000029c:	46bd      	mov	sp, r7
2000029e:	b007      	add	sp, #28
200002a0:	bd90      	pop	{r4, r7, pc}
200002a2:	46c0      	nop			; (mov r8, r8)
200002a4:	20000aec 	andcs	r0, r0, ip, ror #21

200002a8 <main>:
void main(void)
{
200002a8:	b590      	push	{r4, r7, lr}
200002aa:	b083      	sub	sp, #12
200002ac:	af00      	add	r7, sp, #0
    init_app();
200002ae:	f7ff ff3d 	bl	2000012c <init_app>
    char c;
    POBJECT p = &ball;
200002b2:	4b1f      	ldr	r3, [pc, #124]	; (20000330 <main+0x88>)
200002b4:	607b      	str	r3, [r7, #4]
    graphic_initialize();
200002b6:	f000 f916 	bl	200004e6 <graphic_initialize>
    graphic_clear_screen();// simulator onely
200002ba:	f000 fa52 	bl	20000762 <graphic_clear_screen>
 while(1){
    p->move(p);
200002be:	687b      	ldr	r3, [r7, #4]
200002c0:	69db      	ldr	r3, [r3, #28]
200002c2:	687a      	ldr	r2, [r7, #4]
200002c4:	0010      	movs	r0, r2
200002c6:	4798      	blx	r3
     delay_milli(40);
200002c8:	2028      	movs	r0, #40	; 0x28
200002ca:	f000 f85e 	bl	2000038a <delay_milli>
     c = keyb();
200002ce:	1cfc      	adds	r4, r7, #3
200002d0:	f7ff ffb6 	bl	20000240 <keyb>
200002d4:	0003      	movs	r3, r0
200002d6:	7023      	strb	r3, [r4, #0]
     switch(c)
200002d8:	1cfb      	adds	r3, r7, #3
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	2b04      	cmp	r3, #4
200002de:	d00f      	beq.n	20000300 <main+0x58>
200002e0:	dc02      	bgt.n	200002e8 <main+0x40>
200002e2:	2b02      	cmp	r3, #2
200002e4:	d014      	beq.n	20000310 <main+0x68>
200002e6:	e022      	b.n	2000032e <main+0x86>
200002e8:	2b06      	cmp	r3, #6
200002ea:	d002      	beq.n	200002f2 <main+0x4a>
200002ec:	2b08      	cmp	r3, #8
200002ee:	d017      	beq.n	20000320 <main+0x78>
200002f0:	e01d      	b.n	2000032e <main+0x86>
     {
         case 6: p->set_speed(p,2,0);
200002f2:	687b      	ldr	r3, [r7, #4]
200002f4:	6a1b      	ldr	r3, [r3, #32]
200002f6:	6878      	ldr	r0, [r7, #4]
200002f8:	2200      	movs	r2, #0
200002fa:	2102      	movs	r1, #2
200002fc:	4798      	blx	r3
         break;
200002fe:	e016      	b.n	2000032e <main+0x86>
         case 4: p->set_speed(p,-2,0);
20000300:	687b      	ldr	r3, [r7, #4]
20000302:	6a1b      	ldr	r3, [r3, #32]
20000304:	2202      	movs	r2, #2
20000306:	4251      	negs	r1, r2
20000308:	6878      	ldr	r0, [r7, #4]
2000030a:	2200      	movs	r2, #0
2000030c:	4798      	blx	r3
         break;
2000030e:	e00e      	b.n	2000032e <main+0x86>
         case 2: p->set_speed(p,0,-2);
20000310:	687b      	ldr	r3, [r7, #4]
20000312:	6a1b      	ldr	r3, [r3, #32]
20000314:	2202      	movs	r2, #2
20000316:	4252      	negs	r2, r2
20000318:	6878      	ldr	r0, [r7, #4]
2000031a:	2100      	movs	r1, #0
2000031c:	4798      	blx	r3
         break;
2000031e:	e006      	b.n	2000032e <main+0x86>
         case 8: p->set_speed(p,0,2);
20000320:	687b      	ldr	r3, [r7, #4]
20000322:	6a1b      	ldr	r3, [r3, #32]
20000324:	6878      	ldr	r0, [r7, #4]
20000326:	2202      	movs	r2, #2
20000328:	2100      	movs	r1, #0
2000032a:	4798      	blx	r3
         break;
2000032c:	46c0      	nop			; (mov r8, r8)
 while(1){
2000032e:	e7c6      	b.n	200002be <main+0x16>
20000330:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4

20000334 <delay_250ns>:
     }
    
}

void delay_250ns(void)
{
20000334:	b580      	push	{r7, lr}
20000336:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000338:	4b0c      	ldr	r3, [pc, #48]	; (2000036c <delay_250ns+0x38>)
2000033a:	2200      	movs	r2, #0
2000033c:	601a      	str	r2, [r3, #0]
    *STK_LOAD = (168/4)-1;   // minst 500 ns
2000033e:	4b0c      	ldr	r3, [pc, #48]	; (20000370 <delay_250ns+0x3c>)
20000340:	2229      	movs	r2, #41	; 0x29
20000342:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
20000344:	4b0b      	ldr	r3, [pc, #44]	; (20000374 <delay_250ns+0x40>)
20000346:	2200      	movs	r2, #0
20000348:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
2000034a:	4b08      	ldr	r3, [pc, #32]	; (2000036c <delay_250ns+0x38>)
2000034c:	2205      	movs	r2, #5
2000034e:	601a      	str	r2, [r3, #0]
    while((* STK_CTRL & 0x10000) == 0) ;
20000350:	46c0      	nop			; (mov r8, r8)
20000352:	4b06      	ldr	r3, [pc, #24]	; (2000036c <delay_250ns+0x38>)
20000354:	681a      	ldr	r2, [r3, #0]
20000356:	2380      	movs	r3, #128	; 0x80
20000358:	025b      	lsls	r3, r3, #9
2000035a:	4013      	ands	r3, r2
2000035c:	d0f9      	beq.n	20000352 <delay_250ns+0x1e>
    *STK_CTRL = 0;
2000035e:	4b03      	ldr	r3, [pc, #12]	; (2000036c <delay_250ns+0x38>)
20000360:	2200      	movs	r2, #0
20000362:	601a      	str	r2, [r3, #0]
}
20000364:	46c0      	nop			; (mov r8, r8)
20000366:	46bd      	mov	sp, r7
20000368:	bd80      	pop	{r7, pc}
2000036a:	46c0      	nop			; (mov r8, r8)
2000036c:	e000e010 	and	lr, r0, r0, lsl r0
20000370:	e000e014 	and	lr, r0, r4, lsl r0
20000374:	e000e018 	and	lr, r0, r8, lsl r0

20000378 <delay_mikro>:


void delay_mikro(unsigned int us)
{
20000378:	b580      	push	{r7, lr}
2000037a:	b082      	sub	sp, #8
2000037c:	af00      	add	r7, sp, #0
2000037e:	6078      	str	r0, [r7, #4]
#ifdef   SIMULATOR
    us = us / 1000;
    us++;
#endif
    while(us < 0){
20000380:	46c0      	nop			; (mov r8, r8)
            delay_250ns();
            delay_250ns();
            us--;
        }
    }
}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	46bd      	mov	sp, r7
20000386:	b002      	add	sp, #8
20000388:	bd80      	pop	{r7, pc}

2000038a <delay_milli>:

void delay_milli(unsigned ms)
{
2000038a:	b580      	push	{r7, lr}
2000038c:	b082      	sub	sp, #8
2000038e:	af00      	add	r7, sp, #0
20000390:	6078      	str	r0, [r7, #4]

    ms = ms/1000;// simulator onely
20000392:	687a      	ldr	r2, [r7, #4]
20000394:	23fa      	movs	r3, #250	; 0xfa
20000396:	0099      	lsls	r1, r3, #2
20000398:	0010      	movs	r0, r2
2000039a:	f000 fae5 	bl	20000968 <__udivsi3>
2000039e:	0003      	movs	r3, r0
200003a0:	607b      	str	r3, [r7, #4]
    ms++;//simulator
200003a2:	687b      	ldr	r3, [r7, #4]
200003a4:	3301      	adds	r3, #1
200003a6:	607b      	str	r3, [r7, #4]

    while(ms > 0){
200003a8:	e007      	b.n	200003ba <delay_milli+0x30>
        {
            delay_mikro(1000);
200003aa:	23fa      	movs	r3, #250	; 0xfa
200003ac:	009b      	lsls	r3, r3, #2
200003ae:	0018      	movs	r0, r3
200003b0:	f7ff ffe2 	bl	20000378 <delay_mikro>
            ms--;
200003b4:	687b      	ldr	r3, [r7, #4]
200003b6:	3b01      	subs	r3, #1
200003b8:	607b      	str	r3, [r7, #4]
    while(ms > 0){
200003ba:	687b      	ldr	r3, [r7, #4]
200003bc:	2b00      	cmp	r3, #0
200003be:	d1f4      	bne.n	200003aa <delay_milli+0x20>
            
        }
    }
}
200003c0:	46c0      	nop			; (mov r8, r8)
200003c2:	46bd      	mov	sp, r7
200003c4:	b002      	add	sp, #8
200003c6:	bd80      	pop	{r7, pc}

200003c8 <delay_500ns>:
void delay_500ns(void){
200003c8:	b580      	push	{r7, lr}
200003ca:	af00      	add	r7, sp, #0
    delay_250ns();
200003cc:	f7ff ffb2 	bl	20000334 <delay_250ns>
    delay_250ns();
200003d0:	f7ff ffb0 	bl	20000334 <delay_250ns>
    }
200003d4:	46c0      	nop			; (mov r8, r8)
200003d6:	46bd      	mov	sp, r7
200003d8:	bd80      	pop	{r7, pc}

200003da <graphic_ctrl_bit_set>:
static void graphic_ctrl_bit_set(uint8_t x) {
200003da:	b580      	push	{r7, lr}
200003dc:	b084      	sub	sp, #16
200003de:	af00      	add	r7, sp, #0
200003e0:	0002      	movs	r2, r0
200003e2:	1dfb      	adds	r3, r7, #7
200003e4:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = *GPIOE_ODR_LOW;
200003e6:	4a12      	ldr	r2, [pc, #72]	; (20000430 <graphic_ctrl_bit_set+0x56>)
200003e8:	230f      	movs	r3, #15
200003ea:	18fb      	adds	r3, r7, r3
200003ec:	7812      	ldrb	r2, [r2, #0]
200003ee:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
200003f0:	230f      	movs	r3, #15
200003f2:	18fb      	adds	r3, r7, r3
200003f4:	220f      	movs	r2, #15
200003f6:	18ba      	adds	r2, r7, r2
200003f8:	7812      	ldrb	r2, [r2, #0]
200003fa:	2104      	movs	r1, #4
200003fc:	438a      	bics	r2, r1
200003fe:	701a      	strb	r2, [r3, #0]
c |= (~B_SELECT & x);
20000400:	1dfb      	adds	r3, r7, #7
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	b25b      	sxtb	r3, r3
20000406:	2204      	movs	r2, #4
20000408:	4393      	bics	r3, r2
2000040a:	b25a      	sxtb	r2, r3
2000040c:	230f      	movs	r3, #15
2000040e:	18fb      	adds	r3, r7, r3
20000410:	781b      	ldrb	r3, [r3, #0]
20000412:	b25b      	sxtb	r3, r3
20000414:	4313      	orrs	r3, r2
20000416:	b25a      	sxtb	r2, r3
20000418:	230f      	movs	r3, #15
2000041a:	18fb      	adds	r3, r7, r3
2000041c:	701a      	strb	r2, [r3, #0]
*GPIOE_ODR_LOW = c;
2000041e:	4a04      	ldr	r2, [pc, #16]	; (20000430 <graphic_ctrl_bit_set+0x56>)
20000420:	230f      	movs	r3, #15
20000422:	18fb      	adds	r3, r7, r3
20000424:	781b      	ldrb	r3, [r3, #0]
20000426:	7013      	strb	r3, [r2, #0]
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b004      	add	sp, #16
2000042e:	bd80      	pop	{r7, pc}
20000430:	40021014 	andmi	r1, r2, r4, lsl r0

20000434 <graphic_ctrl_bit_clear>:
static void graphic_ctrl_bit_clear(uint8_t x) {
20000434:	b580      	push	{r7, lr}
20000436:	b084      	sub	sp, #16
20000438:	af00      	add	r7, sp, #0
2000043a:	0002      	movs	r2, r0
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = *GPIOE_ODR_LOW;
20000440:	4a11      	ldr	r2, [pc, #68]	; (20000488 <graphic_ctrl_bit_clear+0x54>)
20000442:	230f      	movs	r3, #15
20000444:	18fb      	adds	r3, r7, r3
20000446:	7812      	ldrb	r2, [r2, #0]
20000448:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
2000044a:	230f      	movs	r3, #15
2000044c:	18fb      	adds	r3, r7, r3
2000044e:	220f      	movs	r2, #15
20000450:	18ba      	adds	r2, r7, r2
20000452:	7812      	ldrb	r2, [r2, #0]
20000454:	2104      	movs	r1, #4
20000456:	438a      	bics	r2, r1
20000458:	701a      	strb	r2, [r3, #0]
c &= ~x;
2000045a:	1dfb      	adds	r3, r7, #7
2000045c:	781b      	ldrb	r3, [r3, #0]
2000045e:	b25b      	sxtb	r3, r3
20000460:	43db      	mvns	r3, r3
20000462:	b25b      	sxtb	r3, r3
20000464:	220f      	movs	r2, #15
20000466:	18ba      	adds	r2, r7, r2
20000468:	7812      	ldrb	r2, [r2, #0]
2000046a:	b252      	sxtb	r2, r2
2000046c:	4013      	ands	r3, r2
2000046e:	b25a      	sxtb	r2, r3
20000470:	230f      	movs	r3, #15
20000472:	18fb      	adds	r3, r7, r3
20000474:	701a      	strb	r2, [r3, #0]
*GPIOE_ODR_LOW = c;
20000476:	4a04      	ldr	r2, [pc, #16]	; (20000488 <graphic_ctrl_bit_clear+0x54>)
20000478:	230f      	movs	r3, #15
2000047a:	18fb      	adds	r3, r7, r3
2000047c:	781b      	ldrb	r3, [r3, #0]
2000047e:	7013      	strb	r3, [r2, #0]
}
20000480:	46c0      	nop			; (mov r8, r8)
20000482:	46bd      	mov	sp, r7
20000484:	b004      	add	sp, #16
20000486:	bd80      	pop	{r7, pc}
20000488:	40021014 	andmi	r1, r2, r4, lsl r0

2000048c <select_controller>:
static void select_controller(uint8_t controller){
2000048c:	b580      	push	{r7, lr}
2000048e:	b082      	sub	sp, #8
20000490:	af00      	add	r7, sp, #0
20000492:	0002      	movs	r2, r0
20000494:	1dfb      	adds	r3, r7, #7
20000496:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000498:	1dfb      	adds	r3, r7, #7
2000049a:	781b      	ldrb	r3, [r3, #0]
2000049c:	2b08      	cmp	r3, #8
2000049e:	d00c      	beq.n	200004ba <select_controller+0x2e>
200004a0:	dc02      	bgt.n	200004a8 <select_controller+0x1c>
200004a2:	2b00      	cmp	r3, #0
200004a4:	d005      	beq.n	200004b2 <select_controller+0x26>
    break;
    case B_CS1|B_CS2 :
    graphic_ctrl_bit_set(B_CS1|B_CS2);
    break;
}
}
200004a6:	e01a      	b.n	200004de <select_controller+0x52>
    switch(controller){
200004a8:	2b10      	cmp	r3, #16
200004aa:	d00d      	beq.n	200004c8 <select_controller+0x3c>
200004ac:	2b18      	cmp	r3, #24
200004ae:	d012      	beq.n	200004d6 <select_controller+0x4a>
}
200004b0:	e015      	b.n	200004de <select_controller+0x52>
    graphic_ctrl_bit_clear(B_CS1|B_CS2);
200004b2:	2018      	movs	r0, #24
200004b4:	f7ff ffbe 	bl	20000434 <graphic_ctrl_bit_clear>
    break;
200004b8:	e011      	b.n	200004de <select_controller+0x52>
    graphic_ctrl_bit_set(B_CS1);
200004ba:	2008      	movs	r0, #8
200004bc:	f7ff ff8d 	bl	200003da <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_CS2);
200004c0:	2010      	movs	r0, #16
200004c2:	f7ff ffb7 	bl	20000434 <graphic_ctrl_bit_clear>
    break;
200004c6:	e00a      	b.n	200004de <select_controller+0x52>
    graphic_ctrl_bit_set(B_CS2);
200004c8:	2010      	movs	r0, #16
200004ca:	f7ff ff86 	bl	200003da <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_CS1);
200004ce:	2008      	movs	r0, #8
200004d0:	f7ff ffb0 	bl	20000434 <graphic_ctrl_bit_clear>
    break;
200004d4:	e003      	b.n	200004de <select_controller+0x52>
    graphic_ctrl_bit_set(B_CS1|B_CS2);
200004d6:	2018      	movs	r0, #24
200004d8:	f7ff ff7f 	bl	200003da <graphic_ctrl_bit_set>
    break;
200004dc:	46c0      	nop			; (mov r8, r8)
}
200004de:	46c0      	nop			; (mov r8, r8)
200004e0:	46bd      	mov	sp, r7
200004e2:	b002      	add	sp, #8
200004e4:	bd80      	pop	{r7, pc}

200004e6 <graphic_initialize>:
void graphic_initialize(void) {
200004e6:	b580      	push	{r7, lr}
200004e8:	af00      	add	r7, sp, #0
graphic_ctrl_bit_set(B_E);
200004ea:	2040      	movs	r0, #64	; 0x40
200004ec:	f7ff ff75 	bl	200003da <graphic_ctrl_bit_set>
delay_mikro(10);
200004f0:	200a      	movs	r0, #10
200004f2:	f7ff ff41 	bl	20000378 <delay_mikro>
graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200004f6:	2078      	movs	r0, #120	; 0x78
200004f8:	f7ff ff9c 	bl	20000434 <graphic_ctrl_bit_clear>
delay_milli(30);
200004fc:	201e      	movs	r0, #30
200004fe:	f7ff ff44 	bl	2000038a <delay_milli>
graphic_ctrl_bit_set(B_RST);
20000502:	2020      	movs	r0, #32
20000504:	f7ff ff69 	bl	200003da <graphic_ctrl_bit_set>
delay_milli(100);
20000508:	2064      	movs	r0, #100	; 0x64
2000050a:	f7ff ff3e 	bl	2000038a <delay_milli>
graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000050e:	2118      	movs	r1, #24
20000510:	203e      	movs	r0, #62	; 0x3e
20000512:	f000 f8e3 	bl	200006dc <graphic_write_command>
graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000516:	2118      	movs	r1, #24
20000518:	203f      	movs	r0, #63	; 0x3f
2000051a:	f000 f8df 	bl	200006dc <graphic_write_command>
graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000051e:	2118      	movs	r1, #24
20000520:	20c0      	movs	r0, #192	; 0xc0
20000522:	f000 f8db 	bl	200006dc <graphic_write_command>
graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000526:	2118      	movs	r1, #24
20000528:	2040      	movs	r0, #64	; 0x40
2000052a:	f000 f8d7 	bl	200006dc <graphic_write_command>
graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000052e:	2118      	movs	r1, #24
20000530:	20b8      	movs	r0, #184	; 0xb8
20000532:	f000 f8d3 	bl	200006dc <graphic_write_command>
select_controller(0);
20000536:	2000      	movs	r0, #0
20000538:	f7ff ffa8 	bl	2000048c <select_controller>
}
2000053c:	46c0      	nop			; (mov r8, r8)
2000053e:	46bd      	mov	sp, r7
20000540:	bd80      	pop	{r7, pc}

20000542 <graphic_wait_ready>:
static void graphic_wait_ready(void) {
20000542:	b580      	push	{r7, lr}
20000544:	b082      	sub	sp, #8
20000546:	af00      	add	r7, sp, #0
uint8_t c;
graphic_ctrl_bit_clear(B_E);
20000548:	2040      	movs	r0, #64	; 0x40
2000054a:	f7ff ff73 	bl	20000434 <graphic_ctrl_bit_clear>
// 15-8 inputs, 7-0 outputs
*GPIOE_MODER = 0x00005555;
2000054e:	4b14      	ldr	r3, [pc, #80]	; (200005a0 <graphic_wait_ready+0x5e>)
20000550:	4a14      	ldr	r2, [pc, #80]	; (200005a4 <graphic_wait_ready+0x62>)
20000552:	601a      	str	r2, [r3, #0]
graphic_ctrl_bit_clear(B_RS);
20000554:	2001      	movs	r0, #1
20000556:	f7ff ff6d 	bl	20000434 <graphic_ctrl_bit_clear>
graphic_ctrl_bit_set(B_RW);
2000055a:	2002      	movs	r0, #2
2000055c:	f7ff ff3d 	bl	200003da <graphic_ctrl_bit_set>
delay_500ns();
20000560:	f7ff ff32 	bl	200003c8 <delay_500ns>
while(1) {
graphic_ctrl_bit_set(B_E);
20000564:	2040      	movs	r0, #64	; 0x40
20000566:	f7ff ff38 	bl	200003da <graphic_ctrl_bit_set>
delay_500ns();
2000056a:	f7ff ff2d 	bl	200003c8 <delay_500ns>
c = *GPIOE_IDR_HIGH & LCD_BUSY;
2000056e:	4b0e      	ldr	r3, [pc, #56]	; (200005a8 <graphic_wait_ready+0x66>)
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	b2da      	uxtb	r2, r3
20000574:	1dfb      	adds	r3, r7, #7
20000576:	217f      	movs	r1, #127	; 0x7f
20000578:	438a      	bics	r2, r1
2000057a:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
2000057c:	2040      	movs	r0, #64	; 0x40
2000057e:	f7ff ff59 	bl	20000434 <graphic_ctrl_bit_clear>
delay_500ns();
20000582:	f7ff ff21 	bl	200003c8 <delay_500ns>
if( c == 0 ) break;
20000586:	1dfb      	adds	r3, r7, #7
20000588:	781b      	ldrb	r3, [r3, #0]
2000058a:	2b00      	cmp	r3, #0
2000058c:	d000      	beq.n	20000590 <graphic_wait_ready+0x4e>
graphic_ctrl_bit_set(B_E);
2000058e:	e7e9      	b.n	20000564 <graphic_wait_ready+0x22>
if( c == 0 ) break;
20000590:	46c0      	nop			; (mov r8, r8)
}
*GPIOE_MODER = 0x55555555; // 15-0 outputs
20000592:	4b03      	ldr	r3, [pc, #12]	; (200005a0 <graphic_wait_ready+0x5e>)
20000594:	4a05      	ldr	r2, [pc, #20]	; (200005ac <graphic_wait_ready+0x6a>)
20000596:	601a      	str	r2, [r3, #0]
}
20000598:	46c0      	nop			; (mov r8, r8)
2000059a:	46bd      	mov	sp, r7
2000059c:	b002      	add	sp, #8
2000059e:	bd80      	pop	{r7, pc}
200005a0:	40021000 	andmi	r1, r2, r0
200005a4:	00005555 	andeq	r5, r0, r5, asr r5
200005a8:	40021011 	andmi	r1, r2, r1, lsl r0
200005ac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200005b0 <graphic_read>:
static uint8_t graphic_read(uint8_t controller) {
200005b0:	b580      	push	{r7, lr}
200005b2:	b084      	sub	sp, #16
200005b4:	af00      	add	r7, sp, #0
200005b6:	0002      	movs	r2, r0
200005b8:	1dfb      	adds	r3, r7, #7
200005ba:	701a      	strb	r2, [r3, #0]
uint8_t c;
graphic_ctrl_bit_clear(B_E);
200005bc:	2040      	movs	r0, #64	; 0x40
200005be:	f7ff ff39 	bl	20000434 <graphic_ctrl_bit_clear>
*GPIOE_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
200005c2:	4b1c      	ldr	r3, [pc, #112]	; (20000634 <graphic_read+0x84>)
200005c4:	4a1c      	ldr	r2, [pc, #112]	; (20000638 <graphic_read+0x88>)
200005c6:	601a      	str	r2, [r3, #0]
graphic_ctrl_bit_set(B_RS|B_RW);
200005c8:	2003      	movs	r0, #3
200005ca:	f7ff ff06 	bl	200003da <graphic_ctrl_bit_set>
select_controller(controller);
200005ce:	1dfb      	adds	r3, r7, #7
200005d0:	781b      	ldrb	r3, [r3, #0]
200005d2:	0018      	movs	r0, r3
200005d4:	f7ff ff5a 	bl	2000048c <select_controller>
delay_500ns();
200005d8:	f7ff fef6 	bl	200003c8 <delay_500ns>
graphic_ctrl_bit_set(B_E);
200005dc:	2040      	movs	r0, #64	; 0x40
200005de:	f7ff fefc 	bl	200003da <graphic_ctrl_bit_set>
delay_500ns();
200005e2:	f7ff fef1 	bl	200003c8 <delay_500ns>
c = *GPIOE_IDR_HIGH;
200005e6:	4a15      	ldr	r2, [pc, #84]	; (2000063c <graphic_read+0x8c>)
200005e8:	230f      	movs	r3, #15
200005ea:	18fb      	adds	r3, r7, r3
200005ec:	7812      	ldrb	r2, [r2, #0]
200005ee:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
200005f0:	2040      	movs	r0, #64	; 0x40
200005f2:	f7ff ff1f 	bl	20000434 <graphic_ctrl_bit_clear>
*GPIOE_MODER = 0x55555555; // 15-0 outputs
200005f6:	4b0f      	ldr	r3, [pc, #60]	; (20000634 <graphic_read+0x84>)
200005f8:	4a11      	ldr	r2, [pc, #68]	; (20000640 <graphic_read+0x90>)
200005fa:	601a      	str	r2, [r3, #0]
if( controller & B_CS1 ) {
200005fc:	1dfb      	adds	r3, r7, #7
200005fe:	781b      	ldrb	r3, [r3, #0]
20000600:	2208      	movs	r2, #8
20000602:	4013      	ands	r3, r2
20000604:	d004      	beq.n	20000610 <graphic_read+0x60>
select_controller(B_CS1);
20000606:	2008      	movs	r0, #8
20000608:	f7ff ff40 	bl	2000048c <select_controller>
graphic_wait_ready();
2000060c:	f7ff ff99 	bl	20000542 <graphic_wait_ready>
}
if( controller & B_CS2 ) {
20000610:	1dfb      	adds	r3, r7, #7
20000612:	781b      	ldrb	r3, [r3, #0]
20000614:	2210      	movs	r2, #16
20000616:	4013      	ands	r3, r2
20000618:	d004      	beq.n	20000624 <graphic_read+0x74>
select_controller(B_CS2);
2000061a:	2010      	movs	r0, #16
2000061c:	f7ff ff36 	bl	2000048c <select_controller>
graphic_wait_ready();
20000620:	f7ff ff8f 	bl	20000542 <graphic_wait_ready>
}
return c;
20000624:	230f      	movs	r3, #15
20000626:	18fb      	adds	r3, r7, r3
20000628:	781b      	ldrb	r3, [r3, #0]
}
2000062a:	0018      	movs	r0, r3
2000062c:	46bd      	mov	sp, r7
2000062e:	b004      	add	sp, #16
20000630:	bd80      	pop	{r7, pc}
20000632:	46c0      	nop			; (mov r8, r8)
20000634:	40021000 	andmi	r1, r2, r0
20000638:	00005555 	andeq	r5, r0, r5, asr r5
2000063c:	40021011 	andmi	r1, r2, r1, lsl r0
20000640:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000644 <graphic_read_data>:
static uint8_t graphic_read_data(uint8_t controller) {
20000644:	b580      	push	{r7, lr}
20000646:	b082      	sub	sp, #8
20000648:	af00      	add	r7, sp, #0
2000064a:	0002      	movs	r2, r0
2000064c:	1dfb      	adds	r3, r7, #7
2000064e:	701a      	strb	r2, [r3, #0]
graphic_read(controller);
20000650:	1dfb      	adds	r3, r7, #7
20000652:	781b      	ldrb	r3, [r3, #0]
20000654:	0018      	movs	r0, r3
20000656:	f7ff ffab 	bl	200005b0 <graphic_read>
return graphic_read(controller);
2000065a:	1dfb      	adds	r3, r7, #7
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	0018      	movs	r0, r3
20000660:	f7ff ffa6 	bl	200005b0 <graphic_read>
20000664:	0003      	movs	r3, r0
}
20000666:	0018      	movs	r0, r3
20000668:	46bd      	mov	sp, r7
2000066a:	b002      	add	sp, #8
2000066c:	bd80      	pop	{r7, pc}

2000066e <graphic_write>:
static void graphic_write(uint8_t value, uint8_t controller) {
2000066e:	b580      	push	{r7, lr}
20000670:	b082      	sub	sp, #8
20000672:	af00      	add	r7, sp, #0
20000674:	0002      	movs	r2, r0
20000676:	1dfb      	adds	r3, r7, #7
20000678:	701a      	strb	r2, [r3, #0]
2000067a:	1dbb      	adds	r3, r7, #6
2000067c:	1c0a      	adds	r2, r1, #0
2000067e:	701a      	strb	r2, [r3, #0]
*GPIOE_ODR_HIGH = value;
20000680:	4a15      	ldr	r2, [pc, #84]	; (200006d8 <graphic_write+0x6a>)
20000682:	1dfb      	adds	r3, r7, #7
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	7013      	strb	r3, [r2, #0]
select_controller(controller);
20000688:	1dbb      	adds	r3, r7, #6
2000068a:	781b      	ldrb	r3, [r3, #0]
2000068c:	0018      	movs	r0, r3
2000068e:	f7ff fefd 	bl	2000048c <select_controller>
delay_500ns();
20000692:	f7ff fe99 	bl	200003c8 <delay_500ns>
graphic_ctrl_bit_set(B_E);
20000696:	2040      	movs	r0, #64	; 0x40
20000698:	f7ff fe9f 	bl	200003da <graphic_ctrl_bit_set>
delay_500ns();
2000069c:	f7ff fe94 	bl	200003c8 <delay_500ns>
graphic_ctrl_bit_clear( B_E );
200006a0:	2040      	movs	r0, #64	; 0x40
200006a2:	f7ff fec7 	bl	20000434 <graphic_ctrl_bit_clear>
if(controller & B_CS1) {
200006a6:	1dbb      	adds	r3, r7, #6
200006a8:	781b      	ldrb	r3, [r3, #0]
200006aa:	2208      	movs	r2, #8
200006ac:	4013      	ands	r3, r2
200006ae:	d004      	beq.n	200006ba <graphic_write+0x4c>
select_controller( B_CS1);
200006b0:	2008      	movs	r0, #8
200006b2:	f7ff feeb 	bl	2000048c <select_controller>
graphic_wait_ready();
200006b6:	f7ff ff44 	bl	20000542 <graphic_wait_ready>
}
if(controller & B_CS2) {
200006ba:	1dbb      	adds	r3, r7, #6
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	2210      	movs	r2, #16
200006c0:	4013      	ands	r3, r2
200006c2:	d004      	beq.n	200006ce <graphic_write+0x60>
select_controller( B_CS2);
200006c4:	2010      	movs	r0, #16
200006c6:	f7ff fee1 	bl	2000048c <select_controller>
graphic_wait_ready();
200006ca:	f7ff ff3a 	bl	20000542 <graphic_wait_ready>
}
}
200006ce:	46c0      	nop			; (mov r8, r8)
200006d0:	46bd      	mov	sp, r7
200006d2:	b002      	add	sp, #8
200006d4:	bd80      	pop	{r7, pc}
200006d6:	46c0      	nop			; (mov r8, r8)
200006d8:	40021015 	andmi	r1, r2, r5, lsl r0

200006dc <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
200006dc:	b580      	push	{r7, lr}
200006de:	b082      	sub	sp, #8
200006e0:	af00      	add	r7, sp, #0
200006e2:	0002      	movs	r2, r0
200006e4:	1dfb      	adds	r3, r7, #7
200006e6:	701a      	strb	r2, [r3, #0]
200006e8:	1dbb      	adds	r3, r7, #6
200006ea:	1c0a      	adds	r2, r1, #0
200006ec:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
200006ee:	2040      	movs	r0, #64	; 0x40
200006f0:	f7ff fea0 	bl	20000434 <graphic_ctrl_bit_clear>
select_controller(controller);
200006f4:	1dbb      	adds	r3, r7, #6
200006f6:	781b      	ldrb	r3, [r3, #0]
200006f8:	0018      	movs	r0, r3
200006fa:	f7ff fec7 	bl	2000048c <select_controller>
graphic_ctrl_bit_clear(B_RS|B_RW);
200006fe:	2003      	movs	r0, #3
20000700:	f7ff fe98 	bl	20000434 <graphic_ctrl_bit_clear>
graphic_write(command, controller);
20000704:	1dbb      	adds	r3, r7, #6
20000706:	781a      	ldrb	r2, [r3, #0]
20000708:	1dfb      	adds	r3, r7, #7
2000070a:	781b      	ldrb	r3, [r3, #0]
2000070c:	0011      	movs	r1, r2
2000070e:	0018      	movs	r0, r3
20000710:	f7ff ffad 	bl	2000066e <graphic_write>
}
20000714:	46c0      	nop			; (mov r8, r8)
20000716:	46bd      	mov	sp, r7
20000718:	b002      	add	sp, #8
2000071a:	bd80      	pop	{r7, pc}

2000071c <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller) {
2000071c:	b580      	push	{r7, lr}
2000071e:	b082      	sub	sp, #8
20000720:	af00      	add	r7, sp, #0
20000722:	0002      	movs	r2, r0
20000724:	1dfb      	adds	r3, r7, #7
20000726:	701a      	strb	r2, [r3, #0]
20000728:	1dbb      	adds	r3, r7, #6
2000072a:	1c0a      	adds	r2, r1, #0
2000072c:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
2000072e:	2040      	movs	r0, #64	; 0x40
20000730:	f7ff fe80 	bl	20000434 <graphic_ctrl_bit_clear>
select_controller(controller);
20000734:	1dbb      	adds	r3, r7, #6
20000736:	781b      	ldrb	r3, [r3, #0]
20000738:	0018      	movs	r0, r3
2000073a:	f7ff fea7 	bl	2000048c <select_controller>
graphic_ctrl_bit_set(B_RS);
2000073e:	2001      	movs	r0, #1
20000740:	f7ff fe4b 	bl	200003da <graphic_ctrl_bit_set>
graphic_ctrl_bit_clear(B_RW);
20000744:	2002      	movs	r0, #2
20000746:	f7ff fe75 	bl	20000434 <graphic_ctrl_bit_clear>
graphic_write(data, controller);
2000074a:	1dbb      	adds	r3, r7, #6
2000074c:	781a      	ldrb	r2, [r3, #0]
2000074e:	1dfb      	adds	r3, r7, #7
20000750:	781b      	ldrb	r3, [r3, #0]
20000752:	0011      	movs	r1, r2
20000754:	0018      	movs	r0, r3
20000756:	f7ff ff8a 	bl	2000066e <graphic_write>
}
2000075a:	46c0      	nop			; (mov r8, r8)
2000075c:	46bd      	mov	sp, r7
2000075e:	b002      	add	sp, #8
20000760:	bd80      	pop	{r7, pc}

20000762 <graphic_clear_screen>:
void graphic_clear_screen(void) {
20000762:	b580      	push	{r7, lr}
20000764:	b082      	sub	sp, #8
20000766:	af00      	add	r7, sp, #0
uint8_t i, j;
for(j = 0; j < 8; j++) {
20000768:	1dbb      	adds	r3, r7, #6
2000076a:	2200      	movs	r2, #0
2000076c:	701a      	strb	r2, [r3, #0]
2000076e:	e023      	b.n	200007b8 <graphic_clear_screen+0x56>
graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
20000770:	1dbb      	adds	r3, r7, #6
20000772:	781b      	ldrb	r3, [r3, #0]
20000774:	2248      	movs	r2, #72	; 0x48
20000776:	4252      	negs	r2, r2
20000778:	4313      	orrs	r3, r2
2000077a:	b2db      	uxtb	r3, r3
2000077c:	2118      	movs	r1, #24
2000077e:	0018      	movs	r0, r3
20000780:	f7ff ffac 	bl	200006dc <graphic_write_command>
graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000784:	2118      	movs	r1, #24
20000786:	2040      	movs	r0, #64	; 0x40
20000788:	f7ff ffa8 	bl	200006dc <graphic_write_command>
for(i = 0; i <= 63; i++){
2000078c:	1dfb      	adds	r3, r7, #7
2000078e:	2200      	movs	r2, #0
20000790:	701a      	strb	r2, [r3, #0]
20000792:	e008      	b.n	200007a6 <graphic_clear_screen+0x44>
graphic_write_data(0, B_CS1|B_CS2);
20000794:	2118      	movs	r1, #24
20000796:	2000      	movs	r0, #0
20000798:	f7ff ffc0 	bl	2000071c <graphic_write_data>
for(i = 0; i <= 63; i++){
2000079c:	1dfb      	adds	r3, r7, #7
2000079e:	781a      	ldrb	r2, [r3, #0]
200007a0:	1dfb      	adds	r3, r7, #7
200007a2:	3201      	adds	r2, #1
200007a4:	701a      	strb	r2, [r3, #0]
200007a6:	1dfb      	adds	r3, r7, #7
200007a8:	781b      	ldrb	r3, [r3, #0]
200007aa:	2b3f      	cmp	r3, #63	; 0x3f
200007ac:	d9f2      	bls.n	20000794 <graphic_clear_screen+0x32>
for(j = 0; j < 8; j++) {
200007ae:	1dbb      	adds	r3, r7, #6
200007b0:	781a      	ldrb	r2, [r3, #0]
200007b2:	1dbb      	adds	r3, r7, #6
200007b4:	3201      	adds	r2, #1
200007b6:	701a      	strb	r2, [r3, #0]
200007b8:	1dbb      	adds	r3, r7, #6
200007ba:	781b      	ldrb	r3, [r3, #0]
200007bc:	2b07      	cmp	r3, #7
200007be:	d9d7      	bls.n	20000770 <graphic_clear_screen+0xe>
}
}
}
200007c0:	46c0      	nop			; (mov r8, r8)
200007c2:	46bd      	mov	sp, r7
200007c4:	b002      	add	sp, #8
200007c6:	bd80      	pop	{r7, pc}

200007c8 <pixel>:
void pixel(int x, int y, int set) {
200007c8:	b590      	push	{r4, r7, lr}
200007ca:	b089      	sub	sp, #36	; 0x24
200007cc:	af00      	add	r7, sp, #0
200007ce:	60f8      	str	r0, [r7, #12]
200007d0:	60b9      	str	r1, [r7, #8]
200007d2:	607a      	str	r2, [r7, #4]
uint8_t mask, c, controller;
int index;
if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200007d4:	68fb      	ldr	r3, [r7, #12]
200007d6:	2b00      	cmp	r3, #0
200007d8:	dc00      	bgt.n	200007dc <pixel+0x14>
200007da:	e0bc      	b.n	20000956 <pixel+0x18e>
200007dc:	68bb      	ldr	r3, [r7, #8]
200007de:	2b00      	cmp	r3, #0
200007e0:	dc00      	bgt.n	200007e4 <pixel+0x1c>
200007e2:	e0b8      	b.n	20000956 <pixel+0x18e>
200007e4:	68fb      	ldr	r3, [r7, #12]
200007e6:	2b80      	cmp	r3, #128	; 0x80
200007e8:	dd00      	ble.n	200007ec <pixel+0x24>
200007ea:	e0b4      	b.n	20000956 <pixel+0x18e>
200007ec:	68bb      	ldr	r3, [r7, #8]
200007ee:	2b40      	cmp	r3, #64	; 0x40
200007f0:	dd00      	ble.n	200007f4 <pixel+0x2c>
200007f2:	e0b0      	b.n	20000956 <pixel+0x18e>
index = (y-1)/8;
200007f4:	68bb      	ldr	r3, [r7, #8]
200007f6:	3b01      	subs	r3, #1
200007f8:	2b00      	cmp	r3, #0
200007fa:	da00      	bge.n	200007fe <pixel+0x36>
200007fc:	3307      	adds	r3, #7
200007fe:	10db      	asrs	r3, r3, #3
20000800:	61bb      	str	r3, [r7, #24]
switch( (y-1)%8 ) {
20000802:	68bb      	ldr	r3, [r7, #8]
20000804:	3b01      	subs	r3, #1
20000806:	4a56      	ldr	r2, [pc, #344]	; (20000960 <pixel+0x198>)
20000808:	4013      	ands	r3, r2
2000080a:	d504      	bpl.n	20000816 <pixel+0x4e>
2000080c:	3b01      	subs	r3, #1
2000080e:	2208      	movs	r2, #8
20000810:	4252      	negs	r2, r2
20000812:	4313      	orrs	r3, r2
20000814:	3301      	adds	r3, #1
20000816:	2b07      	cmp	r3, #7
20000818:	d82c      	bhi.n	20000874 <pixel+0xac>
2000081a:	009a      	lsls	r2, r3, #2
2000081c:	4b51      	ldr	r3, [pc, #324]	; (20000964 <pixel+0x19c>)
2000081e:	18d3      	adds	r3, r2, r3
20000820:	681b      	ldr	r3, [r3, #0]
20000822:	469f      	mov	pc, r3
case 0: mask = 1; break;
20000824:	231f      	movs	r3, #31
20000826:	18fb      	adds	r3, r7, r3
20000828:	2201      	movs	r2, #1
2000082a:	701a      	strb	r2, [r3, #0]
2000082c:	e022      	b.n	20000874 <pixel+0xac>
case 1: mask = 2; break;
2000082e:	231f      	movs	r3, #31
20000830:	18fb      	adds	r3, r7, r3
20000832:	2202      	movs	r2, #2
20000834:	701a      	strb	r2, [r3, #0]
20000836:	e01d      	b.n	20000874 <pixel+0xac>
case 2: mask = 4; break;
20000838:	231f      	movs	r3, #31
2000083a:	18fb      	adds	r3, r7, r3
2000083c:	2204      	movs	r2, #4
2000083e:	701a      	strb	r2, [r3, #0]
20000840:	e018      	b.n	20000874 <pixel+0xac>
case 3: mask = 8; break;
20000842:	231f      	movs	r3, #31
20000844:	18fb      	adds	r3, r7, r3
20000846:	2208      	movs	r2, #8
20000848:	701a      	strb	r2, [r3, #0]
2000084a:	e013      	b.n	20000874 <pixel+0xac>
case 4: mask = 0x10; break;
2000084c:	231f      	movs	r3, #31
2000084e:	18fb      	adds	r3, r7, r3
20000850:	2210      	movs	r2, #16
20000852:	701a      	strb	r2, [r3, #0]
20000854:	e00e      	b.n	20000874 <pixel+0xac>
case 5: mask = 0x20; break;
20000856:	231f      	movs	r3, #31
20000858:	18fb      	adds	r3, r7, r3
2000085a:	2220      	movs	r2, #32
2000085c:	701a      	strb	r2, [r3, #0]
2000085e:	e009      	b.n	20000874 <pixel+0xac>
case 6: mask = 0x40; break;
20000860:	231f      	movs	r3, #31
20000862:	18fb      	adds	r3, r7, r3
20000864:	2240      	movs	r2, #64	; 0x40
20000866:	701a      	strb	r2, [r3, #0]
20000868:	e004      	b.n	20000874 <pixel+0xac>
case 7: mask = 0x80; break;
2000086a:	231f      	movs	r3, #31
2000086c:	18fb      	adds	r3, r7, r3
2000086e:	2280      	movs	r2, #128	; 0x80
20000870:	701a      	strb	r2, [r3, #0]
20000872:	46c0      	nop			; (mov r8, r8)
}
if(set == 0)
20000874:	687b      	ldr	r3, [r7, #4]
20000876:	2b00      	cmp	r3, #0
20000878:	d106      	bne.n	20000888 <pixel+0xc0>
mask = ~mask;
2000087a:	231f      	movs	r3, #31
2000087c:	18fb      	adds	r3, r7, r3
2000087e:	221f      	movs	r2, #31
20000880:	18ba      	adds	r2, r7, r2
20000882:	7812      	ldrb	r2, [r2, #0]
20000884:	43d2      	mvns	r2, r2
20000886:	701a      	strb	r2, [r3, #0]
if(x > 64){
20000888:	68fb      	ldr	r3, [r7, #12]
2000088a:	2b40      	cmp	r3, #64	; 0x40
2000088c:	dd07      	ble.n	2000089e <pixel+0xd6>
controller = B_CS2;
2000088e:	231e      	movs	r3, #30
20000890:	18fb      	adds	r3, r7, r3
20000892:	2210      	movs	r2, #16
20000894:	701a      	strb	r2, [r3, #0]
x = x - 65;
20000896:	68fb      	ldr	r3, [r7, #12]
20000898:	3b41      	subs	r3, #65	; 0x41
2000089a:	60fb      	str	r3, [r7, #12]
2000089c:	e006      	b.n	200008ac <pixel+0xe4>
} else {
controller = B_CS1;
2000089e:	231e      	movs	r3, #30
200008a0:	18fb      	adds	r3, r7, r3
200008a2:	2208      	movs	r2, #8
200008a4:	701a      	strb	r2, [r3, #0]
x = x-1;
200008a6:	68fb      	ldr	r3, [r7, #12]
200008a8:	3b01      	subs	r3, #1
200008aa:	60fb      	str	r3, [r7, #12]
}
graphic_write_command(LCD_SET_ADD | x, controller );
200008ac:	68fb      	ldr	r3, [r7, #12]
200008ae:	b25b      	sxtb	r3, r3
200008b0:	2240      	movs	r2, #64	; 0x40
200008b2:	4313      	orrs	r3, r2
200008b4:	b25b      	sxtb	r3, r3
200008b6:	b2da      	uxtb	r2, r3
200008b8:	231e      	movs	r3, #30
200008ba:	18fb      	adds	r3, r7, r3
200008bc:	781b      	ldrb	r3, [r3, #0]
200008be:	0019      	movs	r1, r3
200008c0:	0010      	movs	r0, r2
200008c2:	f7ff ff0b 	bl	200006dc <graphic_write_command>
graphic_write_command(LCD_SET_PAGE | index, controller );
200008c6:	69bb      	ldr	r3, [r7, #24]
200008c8:	b25b      	sxtb	r3, r3
200008ca:	2248      	movs	r2, #72	; 0x48
200008cc:	4252      	negs	r2, r2
200008ce:	4313      	orrs	r3, r2
200008d0:	b25b      	sxtb	r3, r3
200008d2:	b2da      	uxtb	r2, r3
200008d4:	231e      	movs	r3, #30
200008d6:	18fb      	adds	r3, r7, r3
200008d8:	781b      	ldrb	r3, [r3, #0]
200008da:	0019      	movs	r1, r3
200008dc:	0010      	movs	r0, r2
200008de:	f7ff fefd 	bl	200006dc <graphic_write_command>
c = graphic_read_data(controller);
200008e2:	2317      	movs	r3, #23
200008e4:	18fc      	adds	r4, r7, r3
200008e6:	231e      	movs	r3, #30
200008e8:	18fb      	adds	r3, r7, r3
200008ea:	781b      	ldrb	r3, [r3, #0]
200008ec:	0018      	movs	r0, r3
200008ee:	f7ff fea9 	bl	20000644 <graphic_read_data>
200008f2:	0003      	movs	r3, r0
200008f4:	7023      	strb	r3, [r4, #0]
graphic_write_command(LCD_SET_ADD | x, controller);
200008f6:	68fb      	ldr	r3, [r7, #12]
200008f8:	b25b      	sxtb	r3, r3
200008fa:	2240      	movs	r2, #64	; 0x40
200008fc:	4313      	orrs	r3, r2
200008fe:	b25b      	sxtb	r3, r3
20000900:	b2da      	uxtb	r2, r3
20000902:	231e      	movs	r3, #30
20000904:	18fb      	adds	r3, r7, r3
20000906:	781b      	ldrb	r3, [r3, #0]
20000908:	0019      	movs	r1, r3
2000090a:	0010      	movs	r0, r2
2000090c:	f7ff fee6 	bl	200006dc <graphic_write_command>
if(set)
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	2b00      	cmp	r3, #0
20000914:	d00a      	beq.n	2000092c <pixel+0x164>
mask = mask | c;
20000916:	231f      	movs	r3, #31
20000918:	18fb      	adds	r3, r7, r3
2000091a:	221f      	movs	r2, #31
2000091c:	18b9      	adds	r1, r7, r2
2000091e:	2217      	movs	r2, #23
20000920:	18ba      	adds	r2, r7, r2
20000922:	7809      	ldrb	r1, [r1, #0]
20000924:	7812      	ldrb	r2, [r2, #0]
20000926:	430a      	orrs	r2, r1
20000928:	701a      	strb	r2, [r3, #0]
2000092a:	e009      	b.n	20000940 <pixel+0x178>
else
mask = mask & c;
2000092c:	231f      	movs	r3, #31
2000092e:	18fb      	adds	r3, r7, r3
20000930:	221f      	movs	r2, #31
20000932:	18ba      	adds	r2, r7, r2
20000934:	2117      	movs	r1, #23
20000936:	1879      	adds	r1, r7, r1
20000938:	7812      	ldrb	r2, [r2, #0]
2000093a:	7809      	ldrb	r1, [r1, #0]
2000093c:	400a      	ands	r2, r1
2000093e:	701a      	strb	r2, [r3, #0]
graphic_write_data(mask, controller);
20000940:	231e      	movs	r3, #30
20000942:	18fb      	adds	r3, r7, r3
20000944:	781a      	ldrb	r2, [r3, #0]
20000946:	231f      	movs	r3, #31
20000948:	18fb      	adds	r3, r7, r3
2000094a:	781b      	ldrb	r3, [r3, #0]
2000094c:	0011      	movs	r1, r2
2000094e:	0018      	movs	r0, r3
20000950:	f7ff fee4 	bl	2000071c <graphic_write_data>
20000954:	e000      	b.n	20000958 <pixel+0x190>
if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000956:	46c0      	nop			; (mov r8, r8)
}
20000958:	46bd      	mov	sp, r7
2000095a:	b009      	add	sp, #36	; 0x24
2000095c:	bd90      	pop	{r4, r7, pc}
2000095e:	46c0      	nop			; (mov r8, r8)
20000960:	80000007 	andhi	r0, r0, r7
20000964:	20000afc 	strdcs	r0, [r0], -ip

20000968 <__udivsi3>:
20000968:	2200      	movs	r2, #0
2000096a:	0843      	lsrs	r3, r0, #1
2000096c:	428b      	cmp	r3, r1
2000096e:	d374      	bcc.n	20000a5a <__udivsi3+0xf2>
20000970:	0903      	lsrs	r3, r0, #4
20000972:	428b      	cmp	r3, r1
20000974:	d35f      	bcc.n	20000a36 <__udivsi3+0xce>
20000976:	0a03      	lsrs	r3, r0, #8
20000978:	428b      	cmp	r3, r1
2000097a:	d344      	bcc.n	20000a06 <__udivsi3+0x9e>
2000097c:	0b03      	lsrs	r3, r0, #12
2000097e:	428b      	cmp	r3, r1
20000980:	d328      	bcc.n	200009d4 <__udivsi3+0x6c>
20000982:	0c03      	lsrs	r3, r0, #16
20000984:	428b      	cmp	r3, r1
20000986:	d30d      	bcc.n	200009a4 <__udivsi3+0x3c>
20000988:	22ff      	movs	r2, #255	; 0xff
2000098a:	0209      	lsls	r1, r1, #8
2000098c:	ba12      	rev	r2, r2
2000098e:	0c03      	lsrs	r3, r0, #16
20000990:	428b      	cmp	r3, r1
20000992:	d302      	bcc.n	2000099a <__udivsi3+0x32>
20000994:	1212      	asrs	r2, r2, #8
20000996:	0209      	lsls	r1, r1, #8
20000998:	d065      	beq.n	20000a66 <__udivsi3+0xfe>
2000099a:	0b03      	lsrs	r3, r0, #12
2000099c:	428b      	cmp	r3, r1
2000099e:	d319      	bcc.n	200009d4 <__udivsi3+0x6c>
200009a0:	e000      	b.n	200009a4 <__udivsi3+0x3c>
200009a2:	0a09      	lsrs	r1, r1, #8
200009a4:	0bc3      	lsrs	r3, r0, #15
200009a6:	428b      	cmp	r3, r1
200009a8:	d301      	bcc.n	200009ae <__udivsi3+0x46>
200009aa:	03cb      	lsls	r3, r1, #15
200009ac:	1ac0      	subs	r0, r0, r3
200009ae:	4152      	adcs	r2, r2
200009b0:	0b83      	lsrs	r3, r0, #14
200009b2:	428b      	cmp	r3, r1
200009b4:	d301      	bcc.n	200009ba <__udivsi3+0x52>
200009b6:	038b      	lsls	r3, r1, #14
200009b8:	1ac0      	subs	r0, r0, r3
200009ba:	4152      	adcs	r2, r2
200009bc:	0b43      	lsrs	r3, r0, #13
200009be:	428b      	cmp	r3, r1
200009c0:	d301      	bcc.n	200009c6 <__udivsi3+0x5e>
200009c2:	034b      	lsls	r3, r1, #13
200009c4:	1ac0      	subs	r0, r0, r3
200009c6:	4152      	adcs	r2, r2
200009c8:	0b03      	lsrs	r3, r0, #12
200009ca:	428b      	cmp	r3, r1
200009cc:	d301      	bcc.n	200009d2 <__udivsi3+0x6a>
200009ce:	030b      	lsls	r3, r1, #12
200009d0:	1ac0      	subs	r0, r0, r3
200009d2:	4152      	adcs	r2, r2
200009d4:	0ac3      	lsrs	r3, r0, #11
200009d6:	428b      	cmp	r3, r1
200009d8:	d301      	bcc.n	200009de <__udivsi3+0x76>
200009da:	02cb      	lsls	r3, r1, #11
200009dc:	1ac0      	subs	r0, r0, r3
200009de:	4152      	adcs	r2, r2
200009e0:	0a83      	lsrs	r3, r0, #10
200009e2:	428b      	cmp	r3, r1
200009e4:	d301      	bcc.n	200009ea <__udivsi3+0x82>
200009e6:	028b      	lsls	r3, r1, #10
200009e8:	1ac0      	subs	r0, r0, r3
200009ea:	4152      	adcs	r2, r2
200009ec:	0a43      	lsrs	r3, r0, #9
200009ee:	428b      	cmp	r3, r1
200009f0:	d301      	bcc.n	200009f6 <__udivsi3+0x8e>
200009f2:	024b      	lsls	r3, r1, #9
200009f4:	1ac0      	subs	r0, r0, r3
200009f6:	4152      	adcs	r2, r2
200009f8:	0a03      	lsrs	r3, r0, #8
200009fa:	428b      	cmp	r3, r1
200009fc:	d301      	bcc.n	20000a02 <__udivsi3+0x9a>
200009fe:	020b      	lsls	r3, r1, #8
20000a00:	1ac0      	subs	r0, r0, r3
20000a02:	4152      	adcs	r2, r2
20000a04:	d2cd      	bcs.n	200009a2 <__udivsi3+0x3a>
20000a06:	09c3      	lsrs	r3, r0, #7
20000a08:	428b      	cmp	r3, r1
20000a0a:	d301      	bcc.n	20000a10 <__udivsi3+0xa8>
20000a0c:	01cb      	lsls	r3, r1, #7
20000a0e:	1ac0      	subs	r0, r0, r3
20000a10:	4152      	adcs	r2, r2
20000a12:	0983      	lsrs	r3, r0, #6
20000a14:	428b      	cmp	r3, r1
20000a16:	d301      	bcc.n	20000a1c <__udivsi3+0xb4>
20000a18:	018b      	lsls	r3, r1, #6
20000a1a:	1ac0      	subs	r0, r0, r3
20000a1c:	4152      	adcs	r2, r2
20000a1e:	0943      	lsrs	r3, r0, #5
20000a20:	428b      	cmp	r3, r1
20000a22:	d301      	bcc.n	20000a28 <__udivsi3+0xc0>
20000a24:	014b      	lsls	r3, r1, #5
20000a26:	1ac0      	subs	r0, r0, r3
20000a28:	4152      	adcs	r2, r2
20000a2a:	0903      	lsrs	r3, r0, #4
20000a2c:	428b      	cmp	r3, r1
20000a2e:	d301      	bcc.n	20000a34 <__udivsi3+0xcc>
20000a30:	010b      	lsls	r3, r1, #4
20000a32:	1ac0      	subs	r0, r0, r3
20000a34:	4152      	adcs	r2, r2
20000a36:	08c3      	lsrs	r3, r0, #3
20000a38:	428b      	cmp	r3, r1
20000a3a:	d301      	bcc.n	20000a40 <__udivsi3+0xd8>
20000a3c:	00cb      	lsls	r3, r1, #3
20000a3e:	1ac0      	subs	r0, r0, r3
20000a40:	4152      	adcs	r2, r2
20000a42:	0883      	lsrs	r3, r0, #2
20000a44:	428b      	cmp	r3, r1
20000a46:	d301      	bcc.n	20000a4c <__udivsi3+0xe4>
20000a48:	008b      	lsls	r3, r1, #2
20000a4a:	1ac0      	subs	r0, r0, r3
20000a4c:	4152      	adcs	r2, r2
20000a4e:	0843      	lsrs	r3, r0, #1
20000a50:	428b      	cmp	r3, r1
20000a52:	d301      	bcc.n	20000a58 <__udivsi3+0xf0>
20000a54:	004b      	lsls	r3, r1, #1
20000a56:	1ac0      	subs	r0, r0, r3
20000a58:	4152      	adcs	r2, r2
20000a5a:	1a41      	subs	r1, r0, r1
20000a5c:	d200      	bcs.n	20000a60 <__udivsi3+0xf8>
20000a5e:	4601      	mov	r1, r0
20000a60:	4152      	adcs	r2, r2
20000a62:	4610      	mov	r0, r2
20000a64:	4770      	bx	lr
20000a66:	e7ff      	b.n	20000a68 <__udivsi3+0x100>
20000a68:	b501      	push	{r0, lr}
20000a6a:	2000      	movs	r0, #0
20000a6c:	f000 f806 	bl	20000a7c <__aeabi_idiv0>
20000a70:	bd02      	pop	{r1, pc}
20000a72:	46c0      	nop			; (mov r8, r8)

20000a74 <__aeabi_uidivmod>:
20000a74:	2900      	cmp	r1, #0
20000a76:	d0f7      	beq.n	20000a68 <__udivsi3+0x100>
20000a78:	e776      	b.n	20000968 <__udivsi3>
20000a7a:	4770      	bx	lr

20000a7c <__aeabi_idiv0>:
20000a7c:	4770      	bx	lr
20000a7e:	46c0      	nop			; (mov r8, r8)

20000a80 <ball_geometry>:
20000a80:	0000000c 	andeq	r0, r0, ip
20000a84:	00000004 	andeq	r0, r0, r4
20000a88:	00000004 	andeq	r0, r0, r4
20000a8c:	02000100 	andeq	r0, r0, #0, 2
20000a90:	01010001 	tsteq	r1, r1
20000a94:	03010201 	movweq	r0, #4609	; 0x1201
20000a98:	01020002 	tsteq	r2, r2
20000a9c:	03020202 	movweq	r0, #8706	; 0x2202
20000aa0:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000ab4 <ball>:
20000ab4:	20000a80 	andcs	r0, r0, r0, lsl #21
	...
20000ac0:	00000001 	andeq	r0, r0, r1
20000ac4:	00000001 	andeq	r0, r0, r1
20000ac8:	20000031 	andcs	r0, r0, r1, lsr r0
20000acc:	2000008b 	andcs	r0, r0, fp, lsl #1
20000ad0:	200000e5 	andcs	r0, r0, r5, ror #1
20000ad4:	20000011 	andcs	r0, r0, r1, lsl r0
20000ad8:	20000226 	andcs	r0, r0, r6, lsr #4
20000adc:	20000206 	andcs	r0, r0, r6, lsl #4
20000ae0:	2000020e 	andcs	r0, r0, lr, lsl #4
20000ae4:	20000216 	andcs	r0, r0, r6, lsl r2
20000ae8:	2000021e 	andcs	r0, r0, lr, lsl r2
20000aec:	0a030201 	beq	200c12f8 <ball+0xc0844>
20000af0:	0b060504 	bleq	20181f08 <ball+0x181454>
20000af4:	0c090807 	stceq	8, cr0, [r9], {7}
20000af8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000ac8 <ball+0x14>
20000afc:	20000824 	andcs	r0, r0, r4, lsr #16
20000b00:	2000082e 	andcs	r0, r0, lr, lsr #16
20000b04:	20000838 	andcs	r0, r0, r8, lsr r8
20000b08:	20000842 	andcs	r0, r0, r2, asr #16
20000b0c:	2000084c 	andcs	r0, r0, ip, asr #16
20000b10:	20000856 	andcs	r0, r0, r6, asr r8
20000b14:	20000860 	andcs	r0, r0, r0, ror #16
20000b18:	2000086a 	andcs	r0, r0, sl, ror #16

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000731 	andeq	r0, r0, r1, lsr r7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000005b 	andeq	r0, r0, fp, asr r0
  10:	0002700c 	andeq	r7, r2, ip
	...
  20:	01a70200 			; <UNDEFINED> instruction: 0x01a70200
  24:	05010000 	streq	r0, [r1, #-0]
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	f9080103 			; <UNDEFINED> instruction: 0xf9080103
  30:	04000000 	streq	r0, [r0], #-0
  34:	00000054 	andeq	r0, r0, r4, asr r0
  38:	542e0102 	strtpl	r0, [lr], #-258	; 0xfffffefe
  3c:	05000000 	streq	r0, [r0, #-0]
  40:	2f010078 	svccs	0x00010078
  44:	0000002c 	andeq	r0, r0, ip, lsr #32
  48:	00790500 	rsbseq	r0, r9, r0, lsl #10
  4c:	002c3001 	eoreq	r3, ip, r1
  50:	00010000 	andeq	r0, r1, r0
  54:	0000f302 	andeq	pc, r0, r2, lsl #6
  58:	33310100 	teqcc	r1, #0, 2
  5c:	04000000 	streq	r0, [r0], #-0
  60:	0000019d 	muleq	r0, sp, r1
  64:	9b320134 	blls	c8053c <startup-0x1f37fac4>
  68:	06000000 	streq	r0, [r0], -r0
  6c:	000002c3 	andeq	r0, r0, r3, asr #5
  70:	009b3301 	addseq	r3, fp, r1, lsl #6
  74:	06000000 	streq	r0, [r0], -r0
  78:	000001af 	andeq	r0, r0, pc, lsr #3
  7c:	009b3401 	addseq	r3, fp, r1, lsl #8
  80:	06040000 	streq	r0, [r4], -r0
  84:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
  88:	009b3501 	addseq	r3, fp, r1, lsl #10
  8c:	05080000 	streq	r0, [r8, #-0]
  90:	01007870 	tsteq	r0, r0, ror r8
  94:	0000a236 	andeq	sl, r0, r6, lsr r2
  98:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a0:	54080074 	strpl	r0, [r8], #-116	; 0xffffff8c
  a4:	b2000000 	andlt	r0, r0, #0
  a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  ac:	000000b2 	strheq	r0, [r0], -r2
  b0:	04030013 	streq	r0, [r3], #-19	; 0xffffffed
  b4:	0001cc07 	andeq	ip, r1, r7, lsl #24
  b8:	00010200 	andeq	r0, r1, r0, lsl #4
  bc:	37010000 	strcc	r0, [r1, -r0]
  c0:	0000005f 	andeq	r0, r0, pc, asr r0
  c4:	00000002 	andeq	r0, r0, r2
  c8:	cf370100 	svcgt	0x00370100
  cc:	0a000000 	beq	d4 <startup-0x1fffff2c>
  d0:	00005f04 	andeq	r5, r0, r4, lsl #30
  d4:	000a0400 	andeq	r0, sl, r0, lsl #8
  d8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  dc:	00014e38 	andeq	r4, r1, r8, lsr lr
  e0:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
  e4:	3901006f 	stmdbcc	r1, {r0, r1, r2, r3, r5, r6}
  e8:	000000c4 	andeq	r0, r0, r4, asr #1
  ec:	00260600 	eoreq	r0, r6, r0, lsl #12
  f0:	3a010000 	bcc	400f8 <startup-0x1ffbff08>
  f4:	0000009b 	muleq	r0, fp, r0
  f8:	002b0604 	eoreq	r0, fp, r4, lsl #12
  fc:	3a010000 	bcc	40104 <startup-0x1ffbfefc>
 100:	0000009b 	muleq	r0, fp, r0
 104:	01110608 	tsteq	r1, r8, lsl #12
 108:	3b010000 	blcc	40110 <startup-0x1ffbfef0>
 10c:	0000009b 	muleq	r0, fp, r0
 110:	0116060c 	tsteq	r6, ip, lsl #12
 114:	3b010000 	blcc	4011c <startup-0x1ffbfee4>
 118:	0000009b 	muleq	r0, fp, r0
 11c:	01e20610 	mvneq	r0, r0, lsl r6
 120:	3c010000 	stccc	0, cr0, [r1], {-0}
 124:	0000015f 	andeq	r0, r0, pc, asr r1
 128:	016c0614 	cmneq	ip, r4, lsl r6
 12c:	3d010000 	stccc	0, cr0, [r1, #-0]
 130:	0000015f 	andeq	r0, r0, pc, asr r1
 134:	000f0618 	andeq	r0, pc, r8, lsl r6	; <UNPREDICTABLE>
 138:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
 13c:	0000015f 	andeq	r0, r0, pc, asr r1
 140:	0107061c 	tsteq	r7, ip, lsl r6
 144:	3f010000 	svccc	0x00010000
 148:	0000017a 	andeq	r0, r0, sl, ror r1
 14c:	590b0020 	stmdbpl	fp, {r5}
 150:	0c000001 	stceq	0, cr0, [r0], {1}
 154:	00000159 	andeq	r0, r0, r9, asr r1
 158:	d5040a00 	strle	r0, [r4, #-2560]	; 0xfffff600
 15c:	0a000000 	beq	164 <startup-0x1ffffe9c>
 160:	00014e04 	andeq	r4, r1, r4, lsl #28
 164:	017a0b00 	cmneq	sl, r0, lsl #22
 168:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
 16c:	0c000001 	stceq	0, cr0, [r0], {1}
 170:	0000009b 	muleq	r0, fp, r0
 174:	00009b0c 	andeq	r9, r0, ip, lsl #22
 178:	040a0000 	streq	r0, [sl], #-0
 17c:	00000165 	andeq	r0, r0, r5, ror #2
 180:	0002f002 	andeq	pc, r2, r2
 184:	d5400100 	strble	r0, [r0, #-256]	; 0xffffff00
 188:	02000000 	andeq	r0, r0, #0
 18c:	000002ef 	andeq	r0, r0, pc, ror #5
 190:	01594001 	cmpeq	r9, r1
 194:	1b0d0000 	blne	34019c <startup-0x1fcbfe64>
 198:	01000001 	tsteq	r0, r1
 19c:	0000b941 	andeq	fp, r0, r1, asr #18
 1a0:	80030500 	andhi	r0, r3, r0, lsl #10
 1a4:	0e20000a 	cdpeq	0, 2, cr0, cr0, cr10, {0}
 1a8:	000001dd 	ldrdeq	r0, [r0], -sp
 1ac:	01807301 	orreq	r7, r0, r1, lsl #6
 1b0:	03050000 	movweq	r0, #20480	; 0x5000
 1b4:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4
 1b8:	0000420f 	andeq	r4, r0, pc, lsl #4
 1bc:	01860100 	orreq	r0, r6, r0, lsl #2
 1c0:	200007c8 	andcs	r0, r0, r8, asr #15
 1c4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1c8:	02329c01 	eorseq	r9, r2, #256	; 0x100
 1cc:	78100000 	ldmdavc	r0, {}	; <UNPREDICTABLE>
 1d0:	01860100 	orreq	r0, r6, r0, lsl #2
 1d4:	0000009b 	muleq	r0, fp, r0
 1d8:	105c9102 	subsne	r9, ip, r2, lsl #2
 1dc:	86010079 			; <UNDEFINED> instruction: 0x86010079
 1e0:	00009b01 	andeq	r9, r0, r1, lsl #22
 1e4:	58910200 	ldmpl	r1, {r9}
 1e8:	74657310 	strbtvc	r7, [r5], #-784	; 0xfffffcf0
 1ec:	01860100 	orreq	r0, r6, r0, lsl #2
 1f0:	0000009b 	muleq	r0, fp, r0
 1f4:	11549102 	cmpne	r4, r2, lsl #2
 1f8:	000001ee 	andeq	r0, r0, lr, ror #3
 1fc:	21018701 	tstcs	r1, r1, lsl #14
 200:	02000000 	andeq	r0, r0, #0
 204:	63126f91 	tstvs	r2, #580	; 0x244
 208:	01870100 	orreq	r0, r7, r0, lsl #2
 20c:	00000021 	andeq	r0, r0, r1, lsr #32
 210:	11679102 	cmnne	r7, r2, lsl #2
 214:	0000001b 	andeq	r0, r0, fp, lsl r0
 218:	21018701 	tstcs	r1, r1, lsl #14
 21c:	02000000 	andeq	r0, r0, #0
 220:	f3116e91 	vacge.f16	d6, d17, d1
 224:	01000001 	tsteq	r0, r1
 228:	009b0188 	addseq	r0, fp, r8, lsl #3
 22c:	91020000 	mrsls	r0, (UNDEF: 2)
 230:	420f0068 	andmi	r0, pc, #104	; 0x68
 234:	01000002 	tsteq	r0, r2
 238:	0762017c 			; <UNDEFINED> instruction: 0x0762017c
 23c:	00662000 	rsbeq	r2, r6, r0
 240:	9c010000 	stcls	0, cr0, [r1], {-0}
 244:	00000263 	andeq	r0, r0, r3, ror #4
 248:	01006912 	tsteq	r0, r2, lsl r9
 24c:	0021017d 	eoreq	r0, r1, sp, ror r1
 250:	91020000 	mrsls	r0, (UNDEF: 2)
 254:	006a1277 	rsbeq	r1, sl, r7, ror r2
 258:	21017d01 	tstcs	r1, r1, lsl #26
 25c:	02000000 	andeq	r0, r0, #0
 260:	0f007691 	svceq	0x00007691
 264:	0000020b 	andeq	r0, r0, fp, lsl #4
 268:	1c017501 	cfstr32ne	mvfx7, [r1], {1}
 26c:	46200007 	strtmi	r0, [r0], -r7
 270:	01000000 	mrseq	r0, (UNDEF: 0)
 274:	0002989c 	muleq	r2, ip, r8
 278:	003d1300 	eorseq	r1, sp, r0, lsl #6
 27c:	75010000 	strvc	r0, [r1, #-0]
 280:	00002101 	andeq	r2, r0, r1, lsl #2
 284:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 288:	00001b13 	andeq	r1, r0, r3, lsl fp
 28c:	01750100 	cmneq	r5, r0, lsl #2
 290:	00000021 	andeq	r0, r0, r1, lsr #32
 294:	00769102 	rsbseq	r9, r6, r2, lsl #2
 298:	0002d90f 	andeq	sp, r2, pc, lsl #18
 29c:	016f0100 	cmneq	pc, r0, lsl #2
 2a0:	200006dc 	ldrdcs	r0, [r0], -ip
 2a4:	00000040 	andeq	r0, r0, r0, asr #32
 2a8:	02cd9c01 	sbceq	r9, sp, #256	; 0x100
 2ac:	e7130000 	ldr	r0, [r3, -r0]
 2b0:	01000002 	tsteq	r0, r2
 2b4:	0021016f 	eoreq	r0, r1, pc, ror #2
 2b8:	91020000 	mrsls	r0, (UNDEF: 2)
 2bc:	001b1377 	andseq	r1, fp, r7, ror r3
 2c0:	6f010000 	svcvs	0x00010000
 2c4:	00002101 	andeq	r2, r0, r1, lsl #2
 2c8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 2cc:	01291400 			; <UNDEFINED> instruction: 0x01291400
 2d0:	5f010000 	svcpl	0x00010000
 2d4:	00066e01 	andeq	r6, r6, r1, lsl #28
 2d8:	00006e20 	andeq	r6, r0, r0, lsr #28
 2dc:	029c0100 	addseq	r0, ip, #0, 2
 2e0:	13000003 	movwne	r0, #3
 2e4:	000001f9 	strdeq	r0, [r0], -r9
 2e8:	21015f01 	tstcs	r1, r1, lsl #30
 2ec:	02000000 	andeq	r0, r0, #0
 2f0:	1b137791 	blne	4de13c <startup-0x1fb21ec4>
 2f4:	01000000 	mrseq	r0, (UNDEF: 0)
 2f8:	0021015f 	eoreq	r0, r1, pc, asr r1
 2fc:	91020000 	mrsls	r0, (UNDEF: 2)
 300:	30150076 	andscc	r0, r5, r6, ror r0
 304:	01000000 	mrseq	r0, (UNDEF: 0)
 308:	0021015b 	eoreq	r0, r1, fp, asr r1
 30c:	06440000 	strbeq	r0, [r4], -r0
 310:	002a2000 	eoreq	r2, sl, r0
 314:	9c010000 	stcls	0, cr0, [r1], {-0}
 318:	0000032c 	andeq	r0, r0, ip, lsr #6
 31c:	00001b13 	andeq	r1, r0, r3, lsl fp
 320:	015b0100 	cmpeq	fp, r0, lsl #2
 324:	00000021 	andeq	r0, r0, r1, lsr #32
 328:	00779102 	rsbseq	r9, r7, r2, lsl #2
 32c:	0002b615 	andeq	fp, r2, r5, lsl r6
 330:	01450100 	mrseq	r0, (UNDEF: 85)
 334:	00000021 	andeq	r0, r0, r1, lsr #32
 338:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
 33c:	00000094 	muleq	r0, r4, r0
 340:	03639c01 	cmneq	r3, #256	; 0x100
 344:	1b130000 	blne	4c034c <startup-0x1fb3fcb4>
 348:	01000000 	mrseq	r0, (UNDEF: 0)
 34c:	00210145 	eoreq	r0, r1, r5, asr #2
 350:	91020000 	mrsls	r0, (UNDEF: 2)
 354:	0063126f 	rsbeq	r1, r3, pc, ror #4
 358:	21014601 	tstcs	r1, r1, lsl #12
 35c:	02000000 	andeq	r0, r0, #0
 360:	14007791 	strne	r7, [r0], #-1937	; 0xfffff86f
 364:	0000022f 	andeq	r0, r0, pc, lsr #4
 368:	42013301 	andmi	r3, r1, #67108864	; 0x4000000
 36c:	6e200005 	cdpvs	0, 2, cr0, cr0, cr5, {0}
 370:	01000000 	mrseq	r0, (UNDEF: 0)
 374:	0003879c 	muleq	r3, ip, r7
 378:	00631200 	rsbeq	r1, r3, r0, lsl #4
 37c:	21013401 	tstcs	r1, r1, lsl #8
 380:	02000000 	andeq	r0, r0, #0
 384:	0f007791 	svceq	0x00007791
 388:	00000148 	andeq	r0, r0, r8, asr #2
 38c:	e6012501 	str	r2, [r1], -r1, lsl #10
 390:	5c200004 	stcpl	0, cr0, [r0], #-16
 394:	01000000 	mrseq	r0, (UNDEF: 0)
 398:	0003ac9c 	muleq	r3, ip, ip
 39c:	02d91600 	sbcseq	r1, r9, #0, 12
 3a0:	2c010000 	stccs	0, cr0, [r1], {-0}
 3a4:	00009b01 	andeq	r9, r0, r1, lsl #22
 3a8:	00001700 	andeq	r1, r0, r0, lsl #14
 3ac:	00001414 	andeq	r1, r0, r4, lsl r4
 3b0:	01130100 	tsteq	r3, r0, lsl #2
 3b4:	2000048c 	andcs	r0, r0, ip, lsl #9
 3b8:	0000005a 	andeq	r0, r0, sl, asr r0
 3bc:	03d29c01 	bicseq	r9, r2, #256	; 0x100
 3c0:	1b130000 	blne	4c03c8 <startup-0x1fb3fc38>
 3c4:	01000000 	mrseq	r0, (UNDEF: 0)
 3c8:	00210113 	eoreq	r0, r1, r3, lsl r1
 3cc:	91020000 	mrsls	r0, (UNDEF: 2)
 3d0:	5b180077 	blpl	6005b4 <startup-0x1f9ffa4c>
 3d4:	01000001 	tsteq	r0, r1
 3d8:	0434010c 	ldrteq	r0, [r4], #-268	; 0xfffffef4
 3dc:	00582000 	subseq	r2, r8, r0
 3e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3e4:	00000403 	andeq	r0, r0, r3, lsl #8
 3e8:	01007810 	tsteq	r0, r0, lsl r8
 3ec:	0021010c 	eoreq	r0, r1, ip, lsl #2
 3f0:	91020000 	mrsls	r0, (UNDEF: 2)
 3f4:	0063126f 	rsbeq	r1, r3, pc, ror #4
 3f8:	21010d01 	tstcs	r1, r1, lsl #26
 3fc:	02000000 	andeq	r0, r0, #0
 400:	18007791 	stmdane	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 404:	00000172 	andeq	r0, r0, r2, ror r1
 408:	da010501 	ble	41814 <startup-0x1ffbe7ec>
 40c:	5a200003 	bpl	800420 <startup-0x1f7ffbe0>
 410:	01000000 	mrseq	r0, (UNDEF: 0)
 414:	0004349c 	muleq	r4, ip, r4
 418:	00781000 	rsbseq	r1, r8, r0
 41c:	21010501 	tstcs	r1, r1, lsl #10
 420:	02000000 	andeq	r0, r0, #0
 424:	63126f91 	tstvs	r2, #580	; 0x244
 428:	01060100 	mrseq	r0, (UNDEF: 22)
 42c:	00000021 	andeq	r0, r0, r1, lsr #32
 430:	00779102 	rsbseq	r9, r7, r2, lsl #2
 434:	00026419 	andeq	r6, r2, r9, lsl r4
 438:	01010100 	mrseq	r0, (UNDEF: 17)
 43c:	200003c8 	andcs	r0, r0, r8, asr #7
 440:	00000012 	andeq	r0, r0, r2, lsl r0
 444:	ff1a9c01 			; <UNDEFINED> instruction: 0xff1a9c01
 448:	01000001 	tsteq	r0, r1
 44c:	00038af3 	strdeq	r8, [r3], -r3
 450:	00003e20 	andeq	r3, r0, r0, lsr #28
 454:	699c0100 	ldmibvs	ip, {r8}
 458:	1b000004 	blne	470 <startup-0x1ffffb90>
 45c:	0100736d 	tsteq	r0, sp, ror #6
 460:	000469f3 	strdeq	r6, [r4], -r3
 464:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 468:	07040300 	streq	r0, [r4, -r0, lsl #6]
 46c:	00000190 	muleq	r0, r0, r1
 470:	0000481c 	andeq	r4, r0, ip, lsl r8
 474:	78e20100 	stmiavc	r2!, {r8}^
 478:	12200003 	eorne	r0, r0, #3
 47c:	01000000 	mrseq	r0, (UNDEF: 0)
 480:	0004939c 	muleq	r4, ip, r3
 484:	73751b00 	cmnvc	r5, #0, 22
 488:	69e20100 	stmibvs	r2!, {r8}^
 48c:	02000004 	andeq	r0, r0, #4
 490:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
 494:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
 498:	0334d701 	teqeq	r4, #262144	; 0x40000
 49c:	00442000 	subeq	r2, r4, r0
 4a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 4a4:	0001431a 	andeq	r4, r1, sl, lsl r3
 4a8:	a8bd0100 	ldmfdge	sp!, {r8}
 4ac:	8c200002 	stchi	0, cr0, [r0], #-8
 4b0:	01000000 	mrseq	r0, (UNDEF: 0)
 4b4:	00050b9c 	muleq	r5, ip, fp
 4b8:	00631e00 	rsbeq	r1, r3, r0, lsl #28
 4bc:	050bc001 	streq	ip, [fp, #-1]
 4c0:	91020000 	mrsls	r0, (UNDEF: 2)
 4c4:	00701e6b 	rsbseq	r1, r0, fp, ror #28
 4c8:	018bc101 	orreq	ip, fp, r1, lsl #2
 4cc:	91020000 	mrsls	r0, (UNDEF: 2)
 4d0:	01481f6c 	cmpeq	r8, ip, ror #30
 4d4:	c2010000 	andgt	r0, r1, #0
 4d8:	0000009b 	muleq	r0, fp, r0
 4dc:	000004e2 	andeq	r0, r0, r2, ror #9
 4e0:	421f0017 	andsmi	r0, pc, #23
 4e4:	01000002 	tsteq	r0, r2
 4e8:	00009bc3 	andeq	r9, r0, r3, asr #23
 4ec:	0004f300 	andeq	pc, r4, r0, lsl #6
 4f0:	20001700 	andcs	r1, r0, r0, lsl #14
 4f4:	200002be 			; <UNDEFINED> instruction: 0x200002be
 4f8:	00000070 	andeq	r0, r0, r0, ror r0
 4fc:	0001ff21 	andeq	pc, r1, r1, lsr #30
 500:	9bc60100 	blls	ff180908 <ball+0xdf17fe54>
 504:	17000000 	strne	r0, [r0, -r0]
 508:	03000000 	movweq	r0, #0
 50c:	01020801 	tsteq	r2, r1, lsl #16
 510:	c7220000 	strgt	r0, [r2, -r0]!
 514:	01000001 	tsteq	r0, r1
 518:	00002cae 	andeq	r2, r0, lr, lsr #25
 51c:	00024000 	andeq	r4, r2, r0
 520:	00006820 	andeq	r6, r0, r0, lsr #16
 524:	569c0100 	ldrpl	r0, [ip], r0, lsl #2
 528:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
 52c:	0079656b 	rsbseq	r6, r9, fp, ror #10
 530:	0556b001 	ldrbeq	fp, [r6, #-1]
 534:	91020000 	mrsls	r0, (UNDEF: 2)
 538:	6f721e58 	svcvs	0x00721e58
 53c:	b1010077 	tstlt	r1, r7, ror r0
 540:	0000009b 	muleq	r0, fp, r0
 544:	1e6c9102 	lgnnee	f1, f2
 548:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 54c:	009bb101 	addseq	fp, fp, r1, lsl #2
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	2c080068 	stccs	0, cr0, [r8], {104}	; 0x68
 558:	66000000 	strvs	r0, [r0], -r0
 55c:	09000005 	stmdbeq	r0, {r0, r2}
 560:	000000b2 	strheq	r0, [r0], -r2
 564:	371c000f 	ldrcc	r0, [ip, -pc]
 568:	01000001 	tsteq	r0, r1
 56c:	0001eca1 	andeq	lr, r1, r1, lsr #25
 570:	00005420 	andeq	r5, r0, r0, lsr #8
 574:	8a9c0100 	bhi	fe70097c <ball+0xde6ffec8>
 578:	1b000005 	blne	594 <startup-0x1ffffa6c>
 57c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 580:	0469a101 	strbteq	sl, [r9], #-257	; 0xfffffeff
 584:	91020000 	mrsls	r0, (UNDEF: 2)
 588:	e7230074 			; <UNDEFINED> instruction: 0xe7230074
 58c:	01000001 	tsteq	r0, r1
 590:	00009b95 	muleq	r0, r5, fp
 594:	00019800 	andeq	r9, r1, r0, lsl #16
 598:	00005420 	andeq	r5, r0, r0, lsr #8
 59c:	b09c0100 	addslt	r0, ip, r0, lsl #2
 5a0:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
 5a4:	98010063 	stmdals	r1, {r0, r1, r5, r6}
 5a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 5ac:	00779102 	rsbseq	r9, r7, r2, lsl #2
 5b0:	0001871d 	andeq	r8, r1, sp, lsl r7
 5b4:	2c880100 	stfcss	f0, [r8], {0}
 5b8:	6c200001 	stcvs	0, cr0, [r0], #-4
 5bc:	01000000 	mrseq	r0, (UNDEF: 0)
 5c0:	01d51d9c 			; <UNDEFINED> instruction: 0x01d51d9c
 5c4:	7f010000 	svcvc	0x00010000
 5c8:	20000000 	andcs	r0, r0, r0
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	cd1a9c01 	ldcgt	12, cr9, [sl, #-4]
 5d4:	01000002 	tsteq	r0, r2
 5d8:	0000e469 	andeq	lr, r0, r9, ror #8
 5dc:	00004820 	andeq	r4, r0, r0, lsr #16
 5e0:	0e9c0100 	fmleqe	f0, f4, f0
 5e4:	1b000006 	blne	604 <startup-0x1ffff9fc>
 5e8:	69010070 	stmdbvs	r1, {r4, r5, r6}
 5ec:	0000018b 	andeq	r0, r0, fp, lsl #3
 5f0:	1e6c9102 	lgnnee	f1, f2
 5f4:	01007870 	tsteq	r0, r0, ror r8
 5f8:	00009b6e 	andeq	r9, r0, lr, ror #22
 5fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 600:	0079701e 	rsbseq	r7, r9, lr, lsl r0
 604:	009b6f01 	addseq	r6, fp, r1, lsl #30
 608:	91020000 	mrsls	r0, (UNDEF: 2)
 60c:	571a0070 			; <UNDEFINED> instruction: 0x571a0070
 610:	01000002 	tsteq	r0, r2
 614:	00008a5d 	andeq	r8, r0, sp, asr sl
 618:	00005a20 	andeq	r5, r0, r0, lsr #20
 61c:	839c0100 	orrshi	r0, ip, #0, 2
 620:	1b000006 	blne	640 <startup-0x1ffff9c0>
 624:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
 628:	0000018b 	andeq	r0, r0, fp, lsl #3
 62c:	1e649102 	lgnnes	f1, f2
 630:	00727470 	rsbseq	r7, r2, r0, ror r4
 634:	06835e01 	streq	r5, [r3], r1, lsl #28
 638:	91020000 	mrsls	r0, (UNDEF: 2)
 63c:	009a2074 	addseq	r2, sl, r4, ror r0
 640:	00422000 	subeq	r2, r2, r0
 644:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
 648:	9b5f0100 	blls	17c0a50 <startup-0x1e83f5b0>
 64c:	02000000 	andeq	r0, r0, #0
 650:	a0207091 	mlage	r0, r1, r0, r7
 654:	2a200000 	bcs	80065c <startup-0x1f7ff9a4>
 658:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 65c:	60010078 	andvs	r0, r1, r8, ror r0
 660:	00000469 	andeq	r0, r0, r9, ror #8
 664:	1e6c9102 	lgnnee	f1, f2
 668:	61010079 	tstvs	r1, r9, ror r0
 66c:	00000469 	andeq	r0, r0, r9, ror #8
 670:	21689102 	cmncs	r8, r2, lsl #2
 674:	00000042 	andeq	r0, r0, r2, asr #32
 678:	009b5901 	addseq	r5, fp, r1, lsl #18
 67c:	00170000 	andseq	r0, r7, r0
 680:	0a000000 	beq	688 <startup-0x1ffff978>
 684:	00005404 	andeq	r5, r0, r4, lsl #8
 688:	02aa1a00 	adceq	r1, sl, #0, 20
 68c:	4f010000 	svcmi	0x00010000
 690:	20000030 	andcs	r0, r0, r0, lsr r0
 694:	0000005a 	andeq	r0, r0, sl, asr r0
 698:	06fe9c01 	ldrbteq	r9, [lr], r1, lsl #24
 69c:	701b0000 	andsvc	r0, fp, r0
 6a0:	8b4f0100 	blhi	13c0aa8 <startup-0x1ec3f558>
 6a4:	02000001 	andeq	r0, r0, #1
 6a8:	701e6491 	mulsvc	lr, r1, r4
 6ac:	01007274 	tsteq	r0, r4, ror r2
 6b0:	00068350 	andeq	r8, r6, r0, asr r3
 6b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6b8:	00004020 	andeq	r4, r0, r0, lsr #32
 6bc:	00004220 	andeq	r4, r0, r0, lsr #4
 6c0:	00691e00 	rsbeq	r1, r9, r0, lsl #28
 6c4:	009b5101 	addseq	r5, fp, r1, lsl #2
 6c8:	91020000 	mrsls	r0, (UNDEF: 2)
 6cc:	00462070 	subeq	r2, r6, r0, ror r0
 6d0:	002a2000 	eoreq	r2, sl, r0
 6d4:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
 6d8:	69560100 	ldmdbvs	r6, {r8}^
 6dc:	02000004 	andeq	r0, r0, #4
 6e0:	791e6c91 	ldmdbvc	lr, {r0, r4, r7, sl, fp, sp, lr}
 6e4:	69570100 	ldmdbvs	r7, {r8}^
 6e8:	02000004 	andeq	r0, r0, #4
 6ec:	42216891 	eormi	r6, r1, #9502720	; 0x910000
 6f0:	01000000 	mrseq	r0, (UNDEF: 0)
 6f4:	00009b59 	andeq	r9, r0, r9, asr fp
 6f8:	00001700 	andeq	r1, r0, r0, lsl #14
 6fc:	1e240000 	cdpne	0, 2, cr0, cr4, cr0, {0}
 700:	01000002 	tsteq	r0, r2
 704:	0000104b 	andeq	r1, r0, fp, asr #32
 708:	00002020 	andeq	r2, r0, r0, lsr #32
 70c:	1b9c0100 	blne	fe700b14 <ball+0xde700060>
 710:	4b010070 	blmi	408d8 <startup-0x1ffbf728>
 714:	0000018b 	andeq	r0, r0, fp, lsl #3
 718:	1b749102 	blne	1d24b28 <startup-0x1e2db4d8>
 71c:	4b010078 	blmi	40904 <startup-0x1ffbf6fc>
 720:	0000009b 	muleq	r0, fp, r0
 724:	1b709102 	blne	1c24b34 <startup-0x1e3db4cc>
 728:	4b010079 	blmi	40914 <startup-0x1ffbf6ec>
 72c:	0000009b 	muleq	r0, fp, r0
 730:	006c9102 	rsbeq	r9, ip, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	01130400 	tsteq	r3, r0, lsl #8
  2c:	0b0b0e03 	bleq	2c3840 <startup-0x1fd3c7c0>
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	00001301 	andeq	r1, r0, r1, lsl #6
  38:	03000d05 	movweq	r0, #3333	; 0xd05
  3c:	3b0b3a08 	blcc	2ce864 <startup-0x1fd3179c>
  40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  44:	0600000b 	streq	r0, [r0], -fp
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00180219 	andseq	r0, r8, r9, lsl r2
  9c:	00340e00 	eorseq	r0, r4, r0, lsl #28
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	3f012e0f 	svccc	0x00012e0f
  b0:	3a0e0319 	bcc	380d1c <startup-0x1fc7f2e4>
  b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  bc:	96184006 	ldrls	r4, [r8], -r6
  c0:	13011942 	movwne	r1, #6466	; 0x1942
  c4:	05100000 	ldreq	r0, [r0, #-0]
  c8:	3a080300 	bcc	200cd0 <startup-0x1fdff330>
  cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  d0:	00180213 	andseq	r0, r8, r3, lsl r2
  d4:	00341100 	eorseq	r1, r4, r0, lsl #2
  d8:	0b3a0e03 	bleq	e838ec <startup-0x1f17c714>
  dc:	1349053b 	movtne	r0, #38203	; 0x953b
  e0:	00001802 	andeq	r1, r0, r2, lsl #16
  e4:	03003412 	movweq	r3, #1042	; 0x412
  e8:	3b0b3a08 	blcc	2ce910 <startup-0x1fd316f0>
  ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
  f0:	13000018 	movwne	r0, #24
  f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
  f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 100:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 104:	3a0e0301 	bcc	380d10 <startup-0x1fc7f2f0>
 108:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 10c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 110:	96184006 	ldrls	r4, [r8], -r6
 114:	13011942 	movwne	r1, #6466	; 0x1942
 118:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 11c:	3a0e0301 	bcc	380d28 <startup-0x1fc7f2d8>
 120:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 124:	11134919 	tstne	r3, r9, lsl r9
 128:	40061201 	andmi	r1, r6, r1, lsl #4
 12c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 130:	00001301 	andeq	r1, r0, r1, lsl #6
 134:	3f012e16 	svccc	0x00012e16
 138:	3a0e0319 	bcc	380da4 <startup-0x1fc7f25c>
 13c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 140:	00193c13 	andseq	r3, r9, r3, lsl ip
 144:	00181700 	andseq	r1, r8, r0, lsl #14
 148:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 14c:	3a0e0301 	bcc	380d58 <startup-0x1fc7f2a8>
 150:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 154:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 158:	97184006 	ldrls	r4, [r8, -r6]
 15c:	13011942 	movwne	r1, #6466	; 0x1942
 160:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 164:	03193f00 	tsteq	r9, #0, 30
 168:	3b0b3a0e 	blcc	2ce9a8 <startup-0x1fd31658>
 16c:	11192705 	tstne	r9, r5, lsl #14
 170:	40061201 	andmi	r1, r6, r1, lsl #4
 174:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 178:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 17c:	03193f01 	tsteq	r9, #1, 30
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	1119270b 	tstne	r9, fp, lsl #14
 188:	40061201 	andmi	r1, r6, r1, lsl #4
 18c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 190:	00001301 	andeq	r1, r0, r1, lsl #6
 194:	0300051b 	movweq	r0, #1307	; 0x51b
 198:	3b0b3a08 	blcc	2ce9c0 <startup-0x1fd31640>
 19c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1a0:	1c000018 	stcne	0, cr0, [r0], {24}
 1a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1a8:	0b3a0e03 	bleq	e839bc <startup-0x1f17c644>
 1ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1b8:	00130119 	andseq	r0, r3, r9, lsl r1
 1bc:	002e1d00 	eoreq	r1, lr, r0, lsl #26
 1c0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1c4:	0b3b0b3a 	bleq	ec2eb4 <startup-0x1f13d14c>
 1c8:	01111927 	tsteq	r1, r7, lsr #18
 1cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d0:	00194297 	mulseq	r9, r7, r2
 1d4:	00341e00 	eorseq	r1, r4, r0, lsl #28
 1d8:	0b3a0803 	bleq	e821ec <startup-0x1f17de14>
 1dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1e0:	00001802 	andeq	r1, r0, r2, lsl #16
 1e4:	3f012e1f 	svccc	0x00012e1f
 1e8:	3a0e0319 	bcc	380e54 <startup-0x1fc7f1ac>
 1ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f0:	01193c13 	tsteq	r9, r3, lsl ip
 1f4:	20000013 	andcs	r0, r0, r3, lsl r0
 1f8:	0111010b 	tsteq	r1, fp, lsl #2
 1fc:	00000612 	andeq	r0, r0, r2, lsl r6
 200:	3f012e21 	svccc	0x00012e21
 204:	3a0e0319 	bcc	380e70 <startup-0x1fc7f190>
 208:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 20c:	00193c13 	andseq	r3, r9, r3, lsl ip
 210:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 214:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 218:	0b3b0b3a 	bleq	ec2f08 <startup-0x1f13d0f8>
 21c:	13491927 	movtne	r1, #39207	; 0x9927
 220:	06120111 			; <UNDEFINED> instruction: 0x06120111
 224:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 228:	00130119 	andseq	r0, r3, r9, lsl r1
 22c:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 230:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 234:	0b3b0b3a 	bleq	ec2f24 <startup-0x1f13d0dc>
 238:	13491927 	movtne	r1, #39207	; 0x9927
 23c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 240:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 244:	00130119 	andseq	r0, r3, r9, lsl r1
 248:	012e2400 			; <UNDEFINED> instruction: 0x012e2400
 24c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 250:	0b3b0b3a 	bleq	ec2f40 <startup-0x1f13d0c0>
 254:	01111927 	tsteq	r1, r7, lsr #18
 258:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 25c:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000958 	andeq	r0, r0, r8, asr r9
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000968 	andcs	r0, r0, r8, ror #18
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000224 	andeq	r0, r0, r4, lsr #4
   4:	00500002 	subseq	r0, r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c63696e 			; <UNDEFINED> instruction: 0x6c63696e
  28:	41442f61 	cmpmi	r4, r1, ror #30
  2c:	37313054 			; <UNDEFINED> instruction: 0x37313054
  30:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  34:	6f4d2f31 	svcvs	0x004d2f31
  38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  44:	6f702f72 	svcvs	0x00702f72
  48:	0000676e 	andeq	r6, r0, lr, ror #14
  4c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  50:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  54:	00010063 	andeq	r0, r1, r3, rrx
  58:	05000000 	streq	r0, [r0, #-0]
  5c:	00001002 	andeq	r1, r0, r2
  60:	00ca0320 	sbceq	r0, sl, r0, lsr #6
  64:	3d3d6701 	ldccc	7, cr6, [sp, #-4]!
  68:	004b4b4b 	subeq	r4, fp, fp, asr #22
  6c:	41030402 	tstmi	r3, r2, lsl #8
  70:	03040200 	movweq	r0, #16896	; 0x4200
  74:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
  78:	02006803 	andeq	r6, r0, #196608	; 0x30000
  7c:	00670304 	rsbeq	r0, r7, r4, lsl #6
  80:	03030402 	movweq	r0, #13314	; 0x3402
  84:	02003c77 	andeq	r3, r0, #30464	; 0x7700
  88:	3c060104 	stfccs	f0, [r6], {4}
  8c:	660b0306 	strvs	r0, [fp], -r6, lsl #6
  90:	004b4b4b 	subeq	r4, fp, fp, asr #22
  94:	3d030402 	cfstrscc	mvf0, [r3, #-8]
  98:	03040200 	movweq	r0, #16896	; 0x4200
  9c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
  a0:	02006803 	andeq	r6, r0, #196608	; 0x30000
  a4:	00670304 	rsbeq	r0, r7, r4, lsl #6
  a8:	37030402 	strcc	r0, [r3, -r2, lsl #8]
  ac:	01040200 	mrseq	r0, R12_usr
  b0:	03063c06 	movweq	r3, #27654	; 0x6c06
  b4:	4b4b6609 	blmi	12d98e0 <startup-0x1ed26720>
  b8:	3d75754c 	cfldr64cc	mvdx7, [r5, #-304]!	; 0xfffffed0
  bc:	16034b3e 			; <UNDEFINED> instruction: 0x16034b3e
  c0:	3d3e2f4a 	ldccc	15, cr2, [lr, #-296]!	; 0xfffffed8
  c4:	3d3e5a3d 	vldmdbcc	lr!, {s10-s70}
  c8:	7608593d 			; <UNDEFINED> instruction: 0x7608593d
  cc:	02004b3f 	andeq	r4, r0, #64512	; 0xfc00
  d0:	58060104 	stmdapl	r6, {r2, r8}
  d4:	02002f06 	andeq	r2, r0, #6, 30
  d8:	58060104 	stmdapl	r6, {r2, r8}
  dc:	02002f06 	andeq	r2, r0, #6, 30
  e0:	58060104 	stmdapl	r6, {r2, r8}
  e4:	02002f06 	andeq	r2, r0, #6, 30
  e8:	58060104 	stmdapl	r6, {r2, r8}
  ec:	69212f06 	stmdbvs	r1!, {r1, r2, r8, r9, sl, fp, sp}
  f0:	4b4b924c 	blmi	12e4a28 <startup-0x1ed1b5d8>
  f4:	934c4b4b 	movtls	r4, #52043	; 0xcb4b
  f8:	4b3d683d 	blmi	f5a1f4 <startup-0x1f0a5e0c>
  fc:	02003d76 	andeq	r3, r0, #7552	; 0x1d80
 100:	008b0204 	addeq	r0, fp, r4, lsl #4
 104:	06010402 	streq	r0, [r1], -r2, lsl #8
 108:	3d44063c 	stclcc	6, cr0, [r4, #-240]	; 0xffffff10
 10c:	01040200 	mrseq	r0, R12_usr
 110:	303d7621 	eorscc	r7, sp, r1, lsr #12
 114:	59302f2f 	ldmdbpl	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
 118:	67ca593d 			; <UNDEFINED> instruction: 0x67ca593d
 11c:	75217521 	strvc	r7, [r1, #-1313]!	; 0xfffffadf
 120:	73036721 	movwvc	r6, #14113	; 0x3721
 124:	3c140320 	ldccc	3, cr0, [r4], {32}
 128:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 12c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 130:	06200601 	strteq	r0, [r0], -r1, lsl #12
 134:	4fa23d67 	svcmi	0x00a23d67
 138:	4d200903 			; <UNDEFINED> instruction: 0x4d200903
 13c:	223e834c 	eorscs	r8, lr, #76, 6	; 0x30000001
 140:	4b433959 	blmi	10ce6ac <startup-0x1ef31954>
 144:	3d2f2f2f 	stccc	15, cr2, [pc, #-188]!	; 90 <startup-0x1fffff70>
 148:	e5835968 	str	r5, [r3, #2408]	; 0x968
 14c:	59686759 	stmdbpl	r8!, {r0, r3, r4, r6, r8, r9, sl, sp, lr}^
 150:	6759d783 	ldrbvs	sp, [r9, -r3, lsl #15]
 154:	74100367 	ldrvc	r0, [r0], #-871	; 0xfffffc99
 158:	03207003 			; <UNDEFINED> instruction: 0x03207003
 15c:	72034a10 	andvc	r4, r3, #16, 20	; 0x10000
 160:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 164:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 168:	4b223d22 	blmi	88f5f8 <startup-0x1f770a08>
 16c:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 170:	4b3d3d3d 	blmi	f4f66c <startup-0x1f0b0994>
 174:	4b4b4b4b 	blmi	12d2ea8 <startup-0x1ed2d158>
 178:	3e3e3d3d 	mrccc	13, 1, r3, cr14, cr13, {1}
 17c:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
 180:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 184:	2225452f 	eorcs	r4, r5, #197132288	; 0xbc00000
 188:	3d68bb3d 	fstmdbxcc	r8!, {d27-d56}	;@ Deprecated
 18c:	2f593d3d 	svccs	0x00593d3d
 190:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 194:	303d593d 	eorscc	r5, sp, sp, lsr r9
 198:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 19c:	675967c9 	ldrbvs	r6, [r9, -r9, asr #15]
 1a0:	594b914b 	stmdbpl	fp, {r0, r1, r3, r6, r8, ip, pc}^
 1a4:	3d2f3d2f 	stccc	13, cr3, [pc, #-188]!	; f0 <startup-0x1fffff10>
 1a8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 1ac:	9175303d 	cmnls	r5, sp, lsr r0
 1b0:	833d593d 	teqhi	sp, #999424	; 0xf4000
 1b4:	593d914b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, ip, pc}
 1b8:	4b833d3d 	blmi	fe0cf6b4 <ball+0xde0cec00>
 1bc:	4b9f4b3e 	blmi	fe7d2ebc <ball+0xde7d2408>
 1c0:	03040200 	movweq	r0, #16896	; 0x4200
 1c4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1c8:	02004903 	andeq	r4, r0, #49152	; 0xc000
 1cc:	58060104 	stmdapl	r6, {r2, r8}
 1d0:	02040200 	andeq	r0, r4, #0, 4
 1d4:	02004706 	andeq	r4, r0, #1572864	; 0x180000
 1d8:	58060104 	stmdapl	r6, {r2, r8}
 1dc:	694b5106 	stmdbvs	fp, {r1, r2, r8, ip, lr}^
 1e0:	01040200 	mrseq	r0, R12_usr
 1e4:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 1e8:	004a0204 	subeq	r0, sl, r4, lsl #4
 1ec:	4a030402 	bmi	c11fc <startup-0x1ff3ee04>
 1f0:	08754b06 	ldmdaeq	r5!, {r1, r2, r8, r9, fp, lr}^
 1f4:	59595913 	ldmdbpl	r9, {r0, r1, r4, r8, fp, ip, lr}^
 1f8:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 1fc:	3d753d5a 	ldclcc	13, cr3, [r5, #-360]!	; 0xfffffe98
 200:	3e4b4c4b 	cdpcc	12, 4, cr4, cr11, cr11, {2}
 204:	c99fd7c9 	ldmibgt	pc, {r0, r3, r6, r7, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
 208:	039fae3d 	orrseq	sl, pc, #976	; 0x3d0
 20c:	1e03ac63 	cdpne	12, 0, cr10, cr3, cr3, {3}
 210:	00080220 	andeq	r0, r8, r0, lsr #4
 214:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
 218:	00000002 	andeq	r0, r0, r2
 21c:	00ff0320 	rscseq	r0, pc, r0, lsr #6
 220:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 224:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	4f740059 	svcmi	0x00740059
   c:	6d006a62 	vstrvs	s12, [r0, #-392]	; 0xfffffe78
  10:	0065766f 	rsbeq	r7, r5, pc, ror #12
  14:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
  18:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
  1c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  20:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  24:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
  28:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
  2c:	00797269 	rsbseq	r7, r9, r9, ror #4
  30:	70617267 	rsbvc	r7, r1, r7, ror #4
  34:	5f636968 	svcpl	0x00636968
  38:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  3c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  40:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  44:	006c6578 	rsbeq	r6, ip, r8, ror r5
  48:	616c6564 	cmnvs	ip, r4, ror #10
  4c:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  50:	006f726b 	rsbeq	r7, pc, fp, ror #4
  54:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  58:	4700746e 	strmi	r7, [r0, -lr, ror #8]
  5c:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  60:	36203939 			; <UNDEFINED> instruction: 0x36203939
  64:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  68:	31303220 	teqcc	r0, r0, lsr #4
  6c:	31323037 	teqcc	r2, r7, lsr r0
  70:	72282035 	eorvc	r2, r8, #53	; 0x35
  74:	61656c65 	cmnvs	r5, r5, ror #24
  78:	20296573 	eorcs	r6, r9, r3, ror r5
  7c:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  80:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  84:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  88:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  8c:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  90:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  94:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  98:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  9c:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  a0:	205d3231 	subscs	r3, sp, r1, lsr r2
  a4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  a8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  ac:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  b0:	613d6863 	teqvs	sp, r3, ror #16
  b4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  b8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  bc:	6f6c666d 	svcvs	0x006c666d
  c0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  c4:	733d6962 	teqvc	sp, #1605632	; 0x188000
  c8:	2074666f 	rsbscs	r6, r4, pc, ror #12
  cc:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  d0:	20626d75 	rsbcs	r6, r2, r5, ror sp
  d4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  d8:	613d6863 	teqvs	sp, r3, ror #16
  dc:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  e0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  e4:	4f2d2067 	svcmi	0x002d2067
  e8:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  ec:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  f0:	50003939 	andpl	r3, r0, r9, lsr r9
  f4:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
  f8:	736e7500 	cmnvc	lr, #0, 10
  fc:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 100:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 104:	73007261 	movwvc	r7, #609	; 0x261
 108:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 10c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 110:	736f7000 	cmnvc	pc, #0
 114:	6f700078 	svcvs	0x00700078
 118:	62007973 	andvs	r7, r0, #1884160	; 0x1cc000
 11c:	5f6c6c61 	svcpl	0x006c6c61
 120:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff8c <ball+0xdffff4d8>
 124:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 128:	61726700 	cmnvs	r2, r0, lsl #14
 12c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 130:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 134:	61006574 	tstvs	r0, r4, ror r5
 138:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 13c:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 140:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
 144:	006e6961 	rsbeq	r6, lr, r1, ror #18
 148:	70617267 	rsbvc	r7, r1, r7, ror #4
 14c:	5f636968 	svcpl	0x00636968
 150:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 154:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 158:	6700657a 	smlsdxvs	r0, sl, r5, r6
 15c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 160:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 164:	5f6c7274 	svcpl	0x006c7274
 168:	5f746962 	svcpl	0x00746962
 16c:	61656c63 	cmnvs	r5, r3, ror #24
 170:	72670072 	rsbvc	r0, r7, #114	; 0x72
 174:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 178:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 17c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 180:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 184:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 188:	5f74696e 	svcpl	0x0074696e
 18c:	00707061 	rsbseq	r7, r0, r1, rrx
 190:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 194:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 198:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 19c:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 1a0:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 1a4:	75007972 	strvc	r7, [r0, #-2418]	; 0xfffff68e
 1a8:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 1ac:	7300745f 	movwvc	r7, #1119	; 0x45f
 1b0:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 1b4:	7a697300 	bvc	1a5cdbc <startup-0x1e5a3244>
 1b8:	64007965 	strvs	r7, [r0], #-2405	; 0xfffff69b
 1bc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1c0:	3035325f 	eorscc	r3, r5, pc, asr r2
 1c4:	6b00736e 	blvs	1cf84 <startup-0x1ffe307c>
 1c8:	00627965 	rsbeq	r7, r2, r5, ror #18
 1cc:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1d0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 1d4:	61747300 	cmnvs	r4, r0, lsl #6
 1d8:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1dc:	6c616200 	sfmvs	f6, 2, [r1], #-0
 1e0:	7264006c 	rsbvc	r0, r4, #108	; 0x6c
 1e4:	67007761 	strvs	r7, [r0, -r1, ror #14]
 1e8:	6f437465 	svcvs	0x00437465
 1ec:	616d006c 	cmnvs	sp, ip, rrx
 1f0:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
 1f4:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 1f8:	6c617600 	stclvs	6, cr7, [r1], #-0
 1fc:	64006575 	strvs	r6, [r0], #-1397	; 0xfffffa8b
 200:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 204:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 208:	6700696c 	strvs	r6, [r0, -ip, ror #18]
 20c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 210:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 214:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 218:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 21c:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
 220:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 224:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 228:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 22c:	67006465 	strvs	r6, [r0, -r5, ror #8]
 230:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 234:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 238:	5f746961 	svcpl	0x00746961
 23c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 240:	72670079 	rsbvc	r0, r7, #121	; 0x79
 244:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 248:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 24c:	5f726165 	svcpl	0x00726165
 250:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 254:	63006e65 	movwvs	r6, #3685	; 0xe65
 258:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 25c:	6a626f5f 	bvs	189bfe0 <startup-0x1e764020>
 260:	00746365 	rsbseq	r6, r4, r5, ror #6
 264:	616c6564 	cmnvs	ip, r4, ror #10
 268:	30355f79 	eorscc	r5, r5, r9, ror pc
 26c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 270:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff835 <ball+0xdfffed81>
 274:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 278:	63696e2f 	cmnvs	r9, #752	; 0x2f0
 27c:	442f616c 	strtmi	r6, [pc], #-364	; 284 <startup-0x1ffffd7c>
 280:	31305441 	teqcc	r0, r1, asr #8
 284:	614c2f37 	cmpvs	ip, r7, lsr pc
 288:	4d2f3162 	stfmis	f3, [pc, #-392]!	; 108 <startup-0x1ffffef8>
 28c:	616c706f 	cmnvs	ip, pc, rrx
 290:	61726f62 	cmnvs	r2, r2, ror #30
 294:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 298:	702f7265 	eorvc	r7, pc, r5, ror #4
 29c:	2f676e6f 	svccs	0x00676e6f
 2a0:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 2a4:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 2a8:	72640063 	rsbvc	r0, r4, #99	; 0x63
 2ac:	6f5f7761 	svcvs	0x005f7761
 2b0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2b4:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2b8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2bc:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2c0:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
 2c4:	6f706d75 	svcvs	0x00706d75
 2c8:	73746e69 	cmnvc	r4, #1680	; 0x690
 2cc:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 2d0:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 2d4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2d8:	61726700 	cmnvs	r2, r0, lsl #14
 2dc:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2e4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 2e8:	616d6d6f 	cmnvs	sp, pc, ror #26
 2ec:	5000646e 	andpl	r6, r0, lr, ror #8
 2f0:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 2f4:	Address 0x000002f4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000020 	andeq	r0, r0, r0, lsr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000030 	andcs	r0, r0, r0, lsr r0
  3c:	0000005a 	andeq	r0, r0, sl, asr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	200e4101 	andcs	r4, lr, r1, lsl #2
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000008a 	andcs	r0, r0, sl, lsl #1
  5c:	0000005a 	andeq	r0, r0, sl, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	200e4101 	andcs	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000e4 	andcs	r0, r0, r4, ror #1
  7c:	00000048 	andeq	r0, r0, r8, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	20000000 	andcs	r0, r0, r0
  9c:	0000000c 	andeq	r0, r0, ip
  a0:	00000018 	andeq	r0, r0, r8, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	2000012c 	andcs	r0, r0, ip, lsr #2
  ac:	0000006c 	andeq	r0, r0, ip, rrx
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000198 	mulcs	r0, r8, r1
  c8:	00000054 	andeq	r0, r0, r4, asr r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	100e4101 	andne	r4, lr, r1, lsl #2
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	200001ec 	andcs	r0, r0, ip, ror #3
  e8:	00000054 	andeq	r0, r0, r4, asr r0
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	00000020 	andeq	r0, r0, r0, lsr #32
 100:	00000000 	andeq	r0, r0, r0
 104:	20000240 	andcs	r0, r0, r0, asr #4
 108:	00000068 	andeq	r0, r0, r8, rrx
 10c:	400c0e41 	andmi	r0, ip, r1, asr #28
 110:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 114:	018e4002 	orreq	r4, lr, r2
 118:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 11c:	0000070d 	andeq	r0, r0, sp, lsl #14
 120:	00000020 	andeq	r0, r0, r0, lsr #32
 124:	00000000 	andeq	r0, r0, r0
 128:	200002a8 	andcs	r0, r0, r8, lsr #5
 12c:	0000008c 	andeq	r0, r0, ip, lsl #1
 130:	400c0e41 	andmi	r0, ip, r1, asr #28
 134:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 138:	018e4002 	orreq	r4, lr, r2
 13c:	41180e41 	tstmi	r8, r1, asr #28
 140:	0000070d 	andeq	r0, r0, sp, lsl #14
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	20000334 	andcs	r0, r0, r4, lsr r3
 150:	00000044 	andeq	r0, r0, r4, asr #32
 154:	40080e41 	andmi	r0, r8, r1, asr #28
 158:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 15c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000000 	andeq	r0, r0, r0
 168:	20000378 	andcs	r0, r0, r8, ror r3
 16c:	00000012 	andeq	r0, r0, r2, lsl r0
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	100e4101 	andne	r4, lr, r1, lsl #2
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	2000038a 	andcs	r0, r0, sl, lsl #7
 18c:	0000003e 	andeq	r0, r0, lr, lsr r0
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	100e4101 	andne	r4, lr, r1, lsl #2
 19c:	00070d41 	andeq	r0, r7, r1, asr #26
 1a0:	00000018 	andeq	r0, r0, r8, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	200003c8 	andcs	r0, r0, r8, asr #7
 1ac:	00000012 	andeq	r0, r0, r2, lsl r0
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200003da 	ldrdcs	r0, [r0], -sl
 1c8:	0000005a 	andeq	r0, r0, sl, asr r0
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	20000434 	andcs	r0, r0, r4, lsr r4
 1e8:	00000058 	andeq	r0, r0, r8, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	2000048c 	andcs	r0, r0, ip, lsl #9
 208:	0000005a 	andeq	r0, r0, sl, asr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	100e4101 	andne	r4, lr, r1, lsl #2
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	00000018 	andeq	r0, r0, r8, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	200004e6 	andcs	r0, r0, r6, ror #9
 228:	0000005c 	andeq	r0, r0, ip, asr r0
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000542 	andcs	r0, r0, r2, asr #10
 244:	0000006e 	andeq	r0, r0, lr, rrx
 248:	40080e41 	andmi	r0, r8, r1, asr #28
 24c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 250:	100e4101 	andne	r4, lr, r1, lsl #2
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	200005b0 			; <UNDEFINED> instruction: 0x200005b0
 264:	00000094 	muleq	r0, r4, r0
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	180e4101 	stmdane	lr, {r0, r8, lr}
 274:	00070d41 	andeq	r0, r7, r1, asr #26
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	20000644 	andcs	r0, r0, r4, asr #12
 284:	0000002a 	andeq	r0, r0, sl, lsr #32
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	100e4101 	andne	r4, lr, r1, lsl #2
 294:	00070d41 	andeq	r0, r7, r1, asr #26
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	00000000 	andeq	r0, r0, r0
 2a0:	2000066e 	andcs	r0, r0, lr, ror #12
 2a4:	0000006e 	andeq	r0, r0, lr, rrx
 2a8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b0:	100e4101 	andne	r4, lr, r1, lsl #2
 2b4:	00070d41 	andeq	r0, r7, r1, asr #26
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	200006dc 	ldrdcs	r0, [r0], -ip
 2c4:	00000040 	andeq	r0, r0, r0, asr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	2000071c 	andcs	r0, r0, ip, lsl r7
 2e4:	00000046 	andeq	r0, r0, r6, asr #32
 2e8:	40080e41 	andmi	r0, r8, r1, asr #28
 2ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f0:	100e4101 	andne	r4, lr, r1, lsl #2
 2f4:	00070d41 	andeq	r0, r7, r1, asr #26
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000000 	andeq	r0, r0, r0
 300:	20000762 	andcs	r0, r0, r2, ror #14
 304:	00000066 	andeq	r0, r0, r6, rrx
 308:	40080e41 	andmi	r0, r8, r1, asr #28
 30c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 310:	100e4101 	andne	r4, lr, r1, lsl #2
 314:	00070d41 	andeq	r0, r7, r1, asr #26
 318:	00000020 	andeq	r0, r0, r0, lsr #32
 31c:	00000000 	andeq	r0, r0, r0
 320:	200007c8 	andcs	r0, r0, r8, asr #15
 324:	000001a0 	andeq	r0, r0, r0, lsr #3
 328:	400c0e41 	andmi	r0, ip, r1, asr #28
 32c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 330:	018e4002 	orreq	r4, lr, r2
 334:	41300e41 	teqmi	r0, r1, asr #28
 338:	0000070d 	andeq	r0, r0, sp, lsl #14
 33c:	0000000c 	andeq	r0, r0, ip
 340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 344:	7c010001 	stcvc	0, cr0, [r1], {1}
 348:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 34c:	0000000c 	andeq	r0, r0, ip
 350:	0000033c 	andeq	r0, r0, ip, lsr r3
 354:	20000969 	andcs	r0, r0, r9, ror #18
 358:	0000010a 	andeq	r0, r0, sl, lsl #2
