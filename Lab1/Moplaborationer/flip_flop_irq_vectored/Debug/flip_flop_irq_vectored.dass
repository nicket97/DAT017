
./Debug/flip_flop_irq_vectored.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 char isOn = 0;
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f95e 	bl	200002c4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <irq_handler>:
void irq_handler ( void )
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIOD_ODR_LOW  = 0xFF;
20000014:	4b12      	ldr	r3, [pc, #72]	; (20000060 <irq_handler+0x50>)
20000016:	22ff      	movs	r2, #255	; 0xff
20000018:	701a      	strb	r2, [r3, #0]
	if(   *((unsigned int *) EXTI_PR) & EXTI3_IRQ_BPOS )
2000001a:	4b12      	ldr	r3, [pc, #72]	; (20000064 <irq_handler+0x54>)
2000001c:	681b      	ldr	r3, [r3, #0]
2000001e:	2208      	movs	r2, #8
20000020:	4013      	ands	r3, r2
20000022:	d00a      	beq.n	2000003a <irq_handler+0x2a>
	{
        c++;
20000024:	4b10      	ldr	r3, [pc, #64]	; (20000068 <irq_handler+0x58>)
20000026:	681b      	ldr	r3, [r3, #0]
20000028:	1c5a      	adds	r2, r3, #1
2000002a:	4b0f      	ldr	r3, [pc, #60]	; (20000068 <irq_handler+0x58>)
2000002c:	601a      	str	r2, [r3, #0]
       *((unsigned int *) EXTI_PR) |= EXTI3_IRQ_BPOS;
2000002e:	4b0d      	ldr	r3, [pc, #52]	; (20000064 <irq_handler+0x54>)
20000030:	4a0c      	ldr	r2, [pc, #48]	; (20000064 <irq_handler+0x54>)
20000032:	6812      	ldr	r2, [r2, #0]
20000034:	2108      	movs	r1, #8
20000036:	430a      	orrs	r2, r1
20000038:	601a      	str	r2, [r3, #0]
 	}
    *((unsigned int *) EXTI_PR) |= EXTI3_IRQ_BPOS;
2000003a:	4b0a      	ldr	r3, [pc, #40]	; (20000064 <irq_handler+0x54>)
2000003c:	4a09      	ldr	r2, [pc, #36]	; (20000064 <irq_handler+0x54>)
2000003e:	6812      	ldr	r2, [r2, #0]
20000040:	2108      	movs	r1, #8
20000042:	430a      	orrs	r2, r1
20000044:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT )= 0x70;
20000046:	4b09      	ldr	r3, [pc, #36]	; (2000006c <irq_handler+0x5c>)
20000048:	2270      	movs	r2, #112	; 0x70
2000004a:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT) &= ~0x70; 
2000004c:	4b07      	ldr	r3, [pc, #28]	; (2000006c <irq_handler+0x5c>)
2000004e:	4a07      	ldr	r2, [pc, #28]	; (2000006c <irq_handler+0x5c>)
20000050:	6812      	ldr	r2, [r2, #0]
20000052:	2170      	movs	r1, #112	; 0x70
20000054:	438a      	bics	r2, r1
20000056:	601a      	str	r2, [r3, #0]
}
20000058:	46c0      	nop			; (mov r8, r8)
2000005a:	46bd      	mov	sp, r7
2000005c:	bd80      	pop	{r7, pc}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	40020c14 	andmi	r0, r2, r4, lsl ip
20000064:	40013c14 	andmi	r3, r1, r4, lsl ip
20000068:	20000314 	andcs	r0, r0, r4, lsl r3
2000006c:	40021014 	andmi	r1, r2, r4, lsl r0

20000070 <irq_handler2>:
void irq_handler2 ( void )
{
20000070:	b580      	push	{r7, lr}
20000072:	af00      	add	r7, sp, #0
	*GPIOD_ODR_LOW  = 0xFF;
20000074:	4b10      	ldr	r3, [pc, #64]	; (200000b8 <irq_handler2+0x48>)
20000076:	22ff      	movs	r2, #255	; 0xff
20000078:	701a      	strb	r2, [r3, #0]
	if(   *((unsigned int *) EXTI_PR) & EXTI2_IRQ_BPOS )
2000007a:	4b10      	ldr	r3, [pc, #64]	; (200000bc <irq_handler2+0x4c>)
2000007c:	681b      	ldr	r3, [r3, #0]
2000007e:	2204      	movs	r2, #4
20000080:	4013      	ands	r3, r2
20000082:	d007      	beq.n	20000094 <irq_handler2+0x24>
	{
        lightUp();
20000084:	f000 f92c 	bl	200002e0 <lightUp>
       *((unsigned int *) EXTI_PR) |= EXTI2_IRQ_BPOS;
20000088:	4b0c      	ldr	r3, [pc, #48]	; (200000bc <irq_handler2+0x4c>)
2000008a:	4a0c      	ldr	r2, [pc, #48]	; (200000bc <irq_handler2+0x4c>)
2000008c:	6812      	ldr	r2, [r2, #0]
2000008e:	2104      	movs	r1, #4
20000090:	430a      	orrs	r2, r1
20000092:	601a      	str	r2, [r3, #0]
 	}
    *((unsigned int *) EXTI_PR) |= EXTI2_IRQ_BPOS;
20000094:	4b09      	ldr	r3, [pc, #36]	; (200000bc <irq_handler2+0x4c>)
20000096:	4a09      	ldr	r2, [pc, #36]	; (200000bc <irq_handler2+0x4c>)
20000098:	6812      	ldr	r2, [r2, #0]
2000009a:	2104      	movs	r1, #4
2000009c:	430a      	orrs	r2, r1
2000009e:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT )= 0x70;
200000a0:	4b07      	ldr	r3, [pc, #28]	; (200000c0 <irq_handler2+0x50>)
200000a2:	2270      	movs	r2, #112	; 0x70
200000a4:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT) &= ~0x70; 
200000a6:	4b06      	ldr	r3, [pc, #24]	; (200000c0 <irq_handler2+0x50>)
200000a8:	4a05      	ldr	r2, [pc, #20]	; (200000c0 <irq_handler2+0x50>)
200000aa:	6812      	ldr	r2, [r2, #0]
200000ac:	2170      	movs	r1, #112	; 0x70
200000ae:	438a      	bics	r2, r1
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	46c0      	nop			; (mov r8, r8)
200000b4:	46bd      	mov	sp, r7
200000b6:	bd80      	pop	{r7, pc}
200000b8:	40020c14 	andmi	r0, r2, r4, lsl ip
200000bc:	40013c14 	andmi	r3, r1, r4, lsl ip
200000c0:	40021014 	andmi	r1, r2, r4, lsl r0

200000c4 <irq_handler1>:
void irq_handler1 ( void )
{
200000c4:	b580      	push	{r7, lr}
200000c6:	af00      	add	r7, sp, #0
	*GPIOD_ODR_LOW  = 0xFF;
200000c8:	4b11      	ldr	r3, [pc, #68]	; (20000110 <irq_handler1+0x4c>)
200000ca:	22ff      	movs	r2, #255	; 0xff
200000cc:	701a      	strb	r2, [r3, #0]
	if(   *((unsigned int *) EXTI_PR) & EXTI1_IRQ_BPOS )
200000ce:	4b11      	ldr	r3, [pc, #68]	; (20000114 <irq_handler1+0x50>)
200000d0:	681b      	ldr	r3, [r3, #0]
200000d2:	2202      	movs	r2, #2
200000d4:	4013      	ands	r3, r2
200000d6:	d008      	beq.n	200000ea <irq_handler1+0x26>
	{
        c = 0;
200000d8:	4b0f      	ldr	r3, [pc, #60]	; (20000118 <irq_handler1+0x54>)
200000da:	2200      	movs	r2, #0
200000dc:	601a      	str	r2, [r3, #0]
       *((unsigned int *) EXTI_PR) |= EXTI1_IRQ_BPOS;
200000de:	4b0d      	ldr	r3, [pc, #52]	; (20000114 <irq_handler1+0x50>)
200000e0:	4a0c      	ldr	r2, [pc, #48]	; (20000114 <irq_handler1+0x50>)
200000e2:	6812      	ldr	r2, [r2, #0]
200000e4:	2102      	movs	r1, #2
200000e6:	430a      	orrs	r2, r1
200000e8:	601a      	str	r2, [r3, #0]
 	}
    *((unsigned int *) EXTI_PR)|= EXTI1_IRQ_BPOS;
200000ea:	4b0a      	ldr	r3, [pc, #40]	; (20000114 <irq_handler1+0x50>)
200000ec:	4a09      	ldr	r2, [pc, #36]	; (20000114 <irq_handler1+0x50>)
200000ee:	6812      	ldr	r2, [r2, #0]
200000f0:	2102      	movs	r1, #2
200000f2:	430a      	orrs	r2, r1
200000f4:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT )= 0x70;
200000f6:	4b09      	ldr	r3, [pc, #36]	; (2000011c <irq_handler1+0x58>)
200000f8:	2270      	movs	r2, #112	; 0x70
200000fa:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT) &= ~0x70; 
200000fc:	4b07      	ldr	r3, [pc, #28]	; (2000011c <irq_handler1+0x58>)
200000fe:	4a07      	ldr	r2, [pc, #28]	; (2000011c <irq_handler1+0x58>)
20000100:	6812      	ldr	r2, [r2, #0]
20000102:	2170      	movs	r1, #112	; 0x70
20000104:	438a      	bics	r2, r1
20000106:	601a      	str	r2, [r3, #0]
}
20000108:	46c0      	nop			; (mov r8, r8)
2000010a:	46bd      	mov	sp, r7
2000010c:	bd80      	pop	{r7, pc}
2000010e:	46c0      	nop			; (mov r8, r8)
20000110:	40020c14 	andmi	r0, r2, r4, lsl ip
20000114:	40013c14 	andmi	r3, r1, r4, lsl ip
20000118:	20000314 	andcs	r0, r0, r4, lsl r3
2000011c:	40021014 	andmi	r1, r2, r4, lsl r0

20000120 <irq_handler0>:
void irq_handler0 ( void )
{
20000120:	b580      	push	{r7, lr}
20000122:	af00      	add	r7, sp, #0
	*GPIOD_ODR_LOW  = 0xFF;
20000124:	4b12      	ldr	r3, [pc, #72]	; (20000170 <irq_handler0+0x50>)
20000126:	22ff      	movs	r2, #255	; 0xff
20000128:	701a      	strb	r2, [r3, #0]
	if(   *((unsigned int *) EXTI_PR) & EXTI0_IRQ_BPOS )
2000012a:	4b12      	ldr	r3, [pc, #72]	; (20000174 <irq_handler0+0x54>)
2000012c:	681b      	ldr	r3, [r3, #0]
2000012e:	2201      	movs	r2, #1
20000130:	4013      	ands	r3, r2
20000132:	d00a      	beq.n	2000014a <irq_handler0+0x2a>
	{
        c++;
20000134:	4b10      	ldr	r3, [pc, #64]	; (20000178 <irq_handler0+0x58>)
20000136:	681b      	ldr	r3, [r3, #0]
20000138:	1c5a      	adds	r2, r3, #1
2000013a:	4b0f      	ldr	r3, [pc, #60]	; (20000178 <irq_handler0+0x58>)
2000013c:	601a      	str	r2, [r3, #0]
       *((unsigned int *) EXTI_PR) |= EXTI0_IRQ_BPOS;
2000013e:	4b0d      	ldr	r3, [pc, #52]	; (20000174 <irq_handler0+0x54>)
20000140:	4a0c      	ldr	r2, [pc, #48]	; (20000174 <irq_handler0+0x54>)
20000142:	6812      	ldr	r2, [r2, #0]
20000144:	2101      	movs	r1, #1
20000146:	430a      	orrs	r2, r1
20000148:	601a      	str	r2, [r3, #0]
 	}
    *((unsigned int *) EXTI_PR) |= EXTI0_IRQ_BPOS;
2000014a:	4b0a      	ldr	r3, [pc, #40]	; (20000174 <irq_handler0+0x54>)
2000014c:	4a09      	ldr	r2, [pc, #36]	; (20000174 <irq_handler0+0x54>)
2000014e:	6812      	ldr	r2, [r2, #0]
20000150:	2101      	movs	r1, #1
20000152:	430a      	orrs	r2, r1
20000154:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT )= 0x70;
20000156:	4b09      	ldr	r3, [pc, #36]	; (2000017c <irq_handler0+0x5c>)
20000158:	2270      	movs	r2, #112	; 0x70
2000015a:	601a      	str	r2, [r3, #0]
		*((volatile unsigned int*) GPIO_E_OUTPUT) &= ~0x70; 
2000015c:	4b07      	ldr	r3, [pc, #28]	; (2000017c <irq_handler0+0x5c>)
2000015e:	4a07      	ldr	r2, [pc, #28]	; (2000017c <irq_handler0+0x5c>)
20000160:	6812      	ldr	r2, [r2, #0]
20000162:	2170      	movs	r1, #112	; 0x70
20000164:	438a      	bics	r2, r1
20000166:	601a      	str	r2, [r3, #0]
}
20000168:	46c0      	nop			; (mov r8, r8)
2000016a:	46bd      	mov	sp, r7
2000016c:	bd80      	pop	{r7, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40020c14 	andmi	r0, r2, r4, lsl ip
20000174:	40013c14 	andmi	r3, r1, r4, lsl ip
20000178:	20000314 	andcs	r0, r0, r4, lsl r3
2000017c:	40021014 	andmi	r1, r2, r4, lsl r0

20000180 <init_app>:

void init_app( void )
{   
20000180:	b580      	push	{r7, lr}
20000182:	af00      	add	r7, sp, #0
  
  *GPIOD_MODER = 0x55555555;
20000184:	4b3b      	ldr	r3, [pc, #236]	; (20000274 <init_app+0xf4>)
20000186:	4a3c      	ldr	r2, [pc, #240]	; (20000278 <init_app+0xf8>)
20000188:	601a      	str	r2, [r3, #0]
	/*sätter våra in och ut portar*/
	*GPIOD_OTYPER = 0x70;
2000018a:	4b3c      	ldr	r3, [pc, #240]	; (2000027c <init_app+0xfc>)
2000018c:	2270      	movs	r2, #112	; 0x70
2000018e:	801a      	strh	r2, [r3, #0]
	*GPIOD_PUPDR = 0x0AA;
20000190:	4b3b      	ldr	r3, [pc, #236]	; (20000280 <init_app+0x100>)
20000192:	22aa      	movs	r2, #170	; 0xaa
20000194:	601a      	str	r2, [r3, #0]
	*GPIOD_ODR_HIGH = *GPIOD_ODR_HIGH & 0x00FF;
20000196:	4b3b      	ldr	r3, [pc, #236]	; (20000284 <init_app+0x104>)
20000198:	4a3a      	ldr	r2, [pc, #232]	; (20000284 <init_app+0x104>)
2000019a:	7812      	ldrb	r2, [r2, #0]
2000019c:	b2d2      	uxtb	r2, r2
2000019e:	701a      	strb	r2, [r3, #0]
    
    
  // port 0-7 -> Keypad
    *GPIOE_MODER = 0x00005500;
200001a0:	4b39      	ldr	r3, [pc, #228]	; (20000288 <init_app+0x108>)
200001a2:	22aa      	movs	r2, #170	; 0xaa
200001a4:	01d2      	lsls	r2, r2, #7
200001a6:	601a      	str	r2, [r3, #0]
	
    //OTYPER bits 15-8 to push-pull
    *GPIOE_OTYPER = 0x0000; //00000000
200001a8:	4b38      	ldr	r3, [pc, #224]	; (2000028c <init_app+0x10c>)
200001aa:	2200      	movs	r2, #0
200001ac:	801a      	strh	r2, [r3, #0]
	
	//OSPEEDR high
    *GPIOE_OSPEDER = 0x55555555; //00000000
200001ae:	4b38      	ldr	r3, [pc, #224]	; (20000290 <init_app+0x110>)
200001b0:	4a31      	ldr	r2, [pc, #196]	; (20000278 <init_app+0xf8>)
200001b2:	601a      	str	r2, [r3, #0]
	
    //PUPDR bits 23-16 to pull-down, rest to zero
    *GPIOE_PUPDR = 0x00000000; //10101010 000000000 000000000
200001b4:	4b37      	ldr	r3, [pc, #220]	; (20000294 <init_app+0x114>)
200001b6:	2200      	movs	r2, #0
200001b8:	601a      	str	r2, [r3, #0]
	
	//Activate clock for SYSCFG
	*RCC |= 0x4000;
200001ba:	4b37      	ldr	r3, [pc, #220]	; (20000298 <init_app+0x118>)
200001bc:	4a36      	ldr	r2, [pc, #216]	; (20000298 <init_app+0x118>)
200001be:	6812      	ldr	r2, [r2, #0]
200001c0:	2180      	movs	r1, #128	; 0x80
200001c2:	01c9      	lsls	r1, r1, #7
200001c4:	430a      	orrs	r2, r1
200001c6:	601a      	str	r2, [r3, #0]

	/* Koppla PE0 till avbrottslina EXTI0 */
  	 *((unsigned int *) SYSCFG_EXTICR1) |= 0x0004;
200001c8:	4b34      	ldr	r3, [pc, #208]	; (2000029c <init_app+0x11c>)
200001ca:	4a34      	ldr	r2, [pc, #208]	; (2000029c <init_app+0x11c>)
200001cc:	6812      	ldr	r2, [r2, #0]
200001ce:	2104      	movs	r1, #4
200001d0:	430a      	orrs	r2, r1
200001d2:	601a      	str	r2, [r3, #0]
	/* Konfigurera EXTI3 för att generera avbrott */
  	 *((unsigned int *) EXTI_IMR) |= EXTI0_IRQ_BPOS;
200001d4:	4b32      	ldr	r3, [pc, #200]	; (200002a0 <init_app+0x120>)
200001d6:	4a32      	ldr	r2, [pc, #200]	; (200002a0 <init_app+0x120>)
200001d8:	6812      	ldr	r2, [r2, #0]
200001da:	2101      	movs	r1, #1
200001dc:	430a      	orrs	r2, r1
200001de:	601a      	str	r2, [r3, #0]
	/* Konfigurera för avbrott på negativ flank */
 	 *((unsigned int *) EXTI_FTSR) |= EXTI0_IRQ_BPOS;		
200001e0:	4b30      	ldr	r3, [pc, #192]	; (200002a4 <init_app+0x124>)
200001e2:	4a30      	ldr	r2, [pc, #192]	; (200002a4 <init_app+0x124>)
200001e4:	6812      	ldr	r2, [r2, #0]
200001e6:	2101      	movs	r1, #1
200001e8:	430a      	orrs	r2, r1
200001ea:	601a      	str	r2, [r3, #0]
	/* Sätt upp avbrottsvektor */
  	 *((void (**)(void) ) EXTI0_IRQVEC ) = irq_handler0;     
200001ec:	4b2e      	ldr	r3, [pc, #184]	; (200002a8 <init_app+0x128>)
200001ee:	4a2f      	ldr	r2, [pc, #188]	; (200002ac <init_app+0x12c>)
200001f0:	601a      	str	r2, [r3, #0]
   	/* Konfigurera den bit i NVIC som kontrollerar den avbrottslina som EXTI3 kopplats till */
     *((unsigned int *) NVIC_ISER0) |= NVIC_EXTI0_IRQ_BPOS; 
200001f2:	4b2f      	ldr	r3, [pc, #188]	; (200002b0 <init_app+0x130>)
200001f4:	4a2e      	ldr	r2, [pc, #184]	; (200002b0 <init_app+0x130>)
200001f6:	6812      	ldr	r2, [r2, #0]
200001f8:	2140      	movs	r1, #64	; 0x40
200001fa:	430a      	orrs	r2, r1
200001fc:	601a      	str	r2, [r3, #0]
     
     
     /* Koppla PE1 till avbrottslina EXTI1 */
  	 *((unsigned int *) SYSCFG_EXTICR1) |= 0x0040;
200001fe:	4b27      	ldr	r3, [pc, #156]	; (2000029c <init_app+0x11c>)
20000200:	4a26      	ldr	r2, [pc, #152]	; (2000029c <init_app+0x11c>)
20000202:	6812      	ldr	r2, [r2, #0]
20000204:	2140      	movs	r1, #64	; 0x40
20000206:	430a      	orrs	r2, r1
20000208:	601a      	str	r2, [r3, #0]
	/* Konfigurera EXTI3 för att generera avbrott */
  	 *((unsigned int *) EXTI_IMR) |= EXTI1_IRQ_BPOS;
2000020a:	4b25      	ldr	r3, [pc, #148]	; (200002a0 <init_app+0x120>)
2000020c:	4a24      	ldr	r2, [pc, #144]	; (200002a0 <init_app+0x120>)
2000020e:	6812      	ldr	r2, [r2, #0]
20000210:	2102      	movs	r1, #2
20000212:	430a      	orrs	r2, r1
20000214:	601a      	str	r2, [r3, #0]
	/* Konfigurera för avbrott på negativ flank */
 	 *((unsigned int *) EXTI_FTSR) |= EXTI1_IRQ_BPOS;		
20000216:	4b23      	ldr	r3, [pc, #140]	; (200002a4 <init_app+0x124>)
20000218:	4a22      	ldr	r2, [pc, #136]	; (200002a4 <init_app+0x124>)
2000021a:	6812      	ldr	r2, [r2, #0]
2000021c:	2102      	movs	r1, #2
2000021e:	430a      	orrs	r2, r1
20000220:	601a      	str	r2, [r3, #0]
	/* Sätt upp avbrottsvektor */
  	 *((void (**)(void) ) EXTI1_IRQVEC ) = irq_handler1;     
20000222:	4b24      	ldr	r3, [pc, #144]	; (200002b4 <init_app+0x134>)
20000224:	4a24      	ldr	r2, [pc, #144]	; (200002b8 <init_app+0x138>)
20000226:	601a      	str	r2, [r3, #0]
   	/* Konfigurera den bit i NVIC som kontrollerar den avbrottslina som EXTI3 kopplats till */
     *((unsigned int *) NVIC_ISER0) |= NVIC_EXTI1_IRQ_BPOS; 
20000228:	4b21      	ldr	r3, [pc, #132]	; (200002b0 <init_app+0x130>)
2000022a:	4a21      	ldr	r2, [pc, #132]	; (200002b0 <init_app+0x130>)
2000022c:	6812      	ldr	r2, [r2, #0]
2000022e:	2180      	movs	r1, #128	; 0x80
20000230:	430a      	orrs	r2, r1
20000232:	601a      	str	r2, [r3, #0]
     
     
     /* Koppla PE2 till avbrottslina EXTI2 */
  	 *((unsigned int *) SYSCFG_EXTICR1) |= 0x0400;
20000234:	4b19      	ldr	r3, [pc, #100]	; (2000029c <init_app+0x11c>)
20000236:	4a19      	ldr	r2, [pc, #100]	; (2000029c <init_app+0x11c>)
20000238:	6812      	ldr	r2, [r2, #0]
2000023a:	2180      	movs	r1, #128	; 0x80
2000023c:	00c9      	lsls	r1, r1, #3
2000023e:	430a      	orrs	r2, r1
20000240:	601a      	str	r2, [r3, #0]
	/* Konfigurera EXTI3 för att generera avbrott */
  	 *((unsigned int *) EXTI_IMR) |= EXTI2_IRQ_BPOS;
20000242:	4b17      	ldr	r3, [pc, #92]	; (200002a0 <init_app+0x120>)
20000244:	4a16      	ldr	r2, [pc, #88]	; (200002a0 <init_app+0x120>)
20000246:	6812      	ldr	r2, [r2, #0]
20000248:	2104      	movs	r1, #4
2000024a:	430a      	orrs	r2, r1
2000024c:	601a      	str	r2, [r3, #0]
	/* Konfigurera för avbrott på negativ flank */
 	 *((unsigned int *) EXTI_FTSR) |= EXTI2_IRQ_BPOS;		
2000024e:	4b15      	ldr	r3, [pc, #84]	; (200002a4 <init_app+0x124>)
20000250:	4a14      	ldr	r2, [pc, #80]	; (200002a4 <init_app+0x124>)
20000252:	6812      	ldr	r2, [r2, #0]
20000254:	2104      	movs	r1, #4
20000256:	430a      	orrs	r2, r1
20000258:	601a      	str	r2, [r3, #0]
	/* Sätt upp avbrottsvektor */
  	 *((void (**)(void) ) EXTI2_IRQVEC ) = irq_handler2;     
2000025a:	4b18      	ldr	r3, [pc, #96]	; (200002bc <init_app+0x13c>)
2000025c:	4a18      	ldr	r2, [pc, #96]	; (200002c0 <init_app+0x140>)
2000025e:	601a      	str	r2, [r3, #0]
   	/* Konfigurera den bit i NVIC som kontrollerar den avbrottslina som EXTI3 kopplats till */
     *((unsigned int *) NVIC_ISER0) |= NVIC_EXTI2_IRQ_BPOS; 
20000260:	4b13      	ldr	r3, [pc, #76]	; (200002b0 <init_app+0x130>)
20000262:	4a13      	ldr	r2, [pc, #76]	; (200002b0 <init_app+0x130>)
20000264:	6812      	ldr	r2, [r2, #0]
20000266:	2180      	movs	r1, #128	; 0x80
20000268:	0049      	lsls	r1, r1, #1
2000026a:	430a      	orrs	r2, r1
2000026c:	601a      	str	r2, [r3, #0]
}
2000026e:	46c0      	nop			; (mov r8, r8)
20000270:	46bd      	mov	sp, r7
20000272:	bd80      	pop	{r7, pc}
20000274:	40020c00 	andmi	r0, r2, r0, lsl #24
20000278:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000027c:	40020c04 	andmi	r0, r2, r4, lsl #24
20000280:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000284:	40020c15 	andmi	r0, r2, r5, lsl ip
20000288:	40021000 	andmi	r1, r2, r0
2000028c:	40021004 	andmi	r1, r2, r4
20000290:	40021008 	andmi	r1, r2, r8
20000294:	4002100c 	andmi	r1, r2, ip
20000298:	40023844 	andmi	r3, r2, r4, asr #16
2000029c:	40013808 	andmi	r3, r1, r8, lsl #16
200002a0:	40013c00 	andmi	r3, r1, r0, lsl #24
200002a4:	40013c0c 	andmi	r3, r1, ip, lsl #24
200002a8:	2001c058 	andcs	ip, r1, r8, asr r0
200002ac:	20000121 	andcs	r0, r0, r1, lsr #2
200002b0:	e000e100 	and	lr, r0, r0, lsl #2
200002b4:	2001c05c 	andcs	ip, r1, ip, asr r0
200002b8:	200000c5 	andcs	r0, r0, r5, asr #1
200002bc:	2001c060 	andcs	ip, r1, r0, rrx
200002c0:	20000071 	andcs	r0, r0, r1, ror r0

200002c4 <main>:
void main(void)
{
200002c4:	b580      	push	{r7, lr}
200002c6:	af00      	add	r7, sp, #0
    init_app();
200002c8:	f7ff ff5a 	bl	20000180 <init_app>
    while(1){
        *GPIOD_ODR_LOW = c;
200002cc:	4a02      	ldr	r2, [pc, #8]	; (200002d8 <main+0x14>)
200002ce:	4b03      	ldr	r3, [pc, #12]	; (200002dc <main+0x18>)
200002d0:	681b      	ldr	r3, [r3, #0]
200002d2:	b2db      	uxtb	r3, r3
200002d4:	7013      	strb	r3, [r2, #0]
200002d6:	e7f9      	b.n	200002cc <main+0x8>
200002d8:	40020c14 	andmi	r0, r2, r4, lsl ip
200002dc:	20000314 	andcs	r0, r0, r4, lsl r3

200002e0 <lightUp>:
        //c++;
        }
}
void lightUp(void){
200002e0:	b580      	push	{r7, lr}
200002e2:	af00      	add	r7, sp, #0
	if (isOn == 0){
200002e4:	4b09      	ldr	r3, [pc, #36]	; (2000030c <lightUp+0x2c>)
200002e6:	781b      	ldrb	r3, [r3, #0]
200002e8:	2b00      	cmp	r3, #0
200002ea:	d106      	bne.n	200002fa <lightUp+0x1a>
		count = 0xFF;
200002ec:	4b08      	ldr	r3, [pc, #32]	; (20000310 <lightUp+0x30>)
200002ee:	22ff      	movs	r2, #255	; 0xff
200002f0:	701a      	strb	r2, [r3, #0]
		isOn = 1;
200002f2:	4b06      	ldr	r3, [pc, #24]	; (2000030c <lightUp+0x2c>)
200002f4:	2201      	movs	r2, #1
200002f6:	701a      	strb	r2, [r3, #0]
	} else{
		count = 0;
		isOn = 0;
	}
}
200002f8:	e005      	b.n	20000306 <lightUp+0x26>
		count = 0;
200002fa:	4b05      	ldr	r3, [pc, #20]	; (20000310 <lightUp+0x30>)
200002fc:	2200      	movs	r2, #0
200002fe:	701a      	strb	r2, [r3, #0]
		isOn = 0;
20000300:	4b02      	ldr	r3, [pc, #8]	; (2000030c <lightUp+0x2c>)
20000302:	2200      	movs	r2, #0
20000304:	701a      	strb	r2, [r3, #0]
}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	46bd      	mov	sp, r7
2000030a:	bd80      	pop	{r7, pc}
2000030c:	20000318 	andcs	r0, r0, r8, lsl r3
20000310:	2000031a 	andcs	r0, r0, sl, lsl r3

20000314 <c>:
20000314:	00000000 	andeq	r0, r0, r0

20000318 <isOn>:
	...

20000319 <systick_flag>:
	...

2000031a <count>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000011e 	andeq	r0, r0, lr, lsl r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000044 	andeq	r0, r0, r4, asr #32
  10:	0000fd0c 	andeq	pc, r0, ip, lsl #26
	...
  20:	00630200 	rsbeq	r0, r3, r0, lsl #4
  24:	00374801 	eorseq	r4, r7, r1, lsl #16
  28:	03050000 	movweq	r0, #20480	; 0x5000
  2c:	20000314 	andcs	r0, r0, r4, lsl r3
  30:	69050403 	stmdbvs	r5, {r0, r1, sl}
  34:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
  38:	00000030 	andeq	r0, r0, r0, lsr r0
  3c:	0000ea05 	andeq	lr, r0, r5, lsl #20
  40:	4d490100 	stfmie	f0, [r9, #-0]
  44:	05000000 	streq	r0, [r0, #-0]
  48:	00031a03 	andeq	r1, r3, r3, lsl #20
  4c:	08010620 	stmdaeq	r1, {r5, r9, sl}
  50:	000000dc 	ldrdeq	r0, [r0], -ip
  54:	00003705 	andeq	r3, r0, r5, lsl #14
  58:	654a0100 	strbvs	r0, [sl, #-256]	; 0xffffff00
  5c:	05000000 	streq	r0, [r0, #-0]
  60:	00031903 	andeq	r1, r3, r3, lsl #18
  64:	08010620 	stmdaeq	r1, {r5, r9, sl}
  68:	000000e5 	andeq	r0, r0, r5, ror #1
  6c:	00014905 	andeq	r4, r1, r5, lsl #18
  70:	654b0100 	strbvs	r0, [fp, #-256]	; 0xffffff00
  74:	05000000 	streq	r0, [r0, #-0]
  78:	00031803 	andeq	r1, r3, r3, lsl #16
  7c:	00f50720 	rscseq	r0, r5, r0, lsr #14
  80:	cc010000 	stcgt	0, cr0, [r1], {-0}
  84:	200002e0 	andcs	r0, r0, r0, ror #5
  88:	00000034 	andeq	r0, r0, r4, lsr r0
  8c:	f0089c01 			; <UNDEFINED> instruction: 0xf0089c01
  90:	01000000 	mrseq	r0, (UNDEF: 0)
  94:	0002c4c4 	andeq	ip, r2, r4, asr #9
  98:	00001c20 	andeq	r1, r0, r0, lsr #24
  9c:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
  a0:	0000001a 	andeq	r0, r0, sl, lsl r0
  a4:	01808801 	orreq	r8, r0, r1, lsl #16
  a8:	01442000 	mrseq	r2, (UNDEF: 68)
  ac:	9c010000 	stcls	0, cr0, [r1], {-0}
  b0:	00014e07 	andeq	r4, r1, r7, lsl #28
  b4:	207b0100 	rsbscs	r0, fp, r0, lsl #2
  b8:	60200001 	eorvs	r0, r0, r1
  bc:	01000000 	mrseq	r0, (UNDEF: 0)
  c0:	0000079c 	muleq	r0, ip, r7
  c4:	6f010000 	svcvs	0x00010000
  c8:	200000c4 	andcs	r0, r0, r4, asr #1
  cc:	0000005c 	andeq	r0, r0, ip, asr r0
  d0:	0d099c01 	stceq	12, cr9, [r9, #-4]
  d4:	01000000 	mrseq	r0, (UNDEF: 0)
  d8:	00007063 	andeq	r7, r0, r3, rrx
  dc:	00005420 	andeq	r5, r0, r0, lsr #8
  e0:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
  e4:	0a000000 	beq	ec <startup-0x1fffff14>
  e8:	20000084 	andcs	r0, r0, r4, lsl #1
  ec:	00000010 	andeq	r0, r0, r0, lsl r0
  f0:	0000f50b 	andeq	pc, r0, fp, lsl #10
  f4:	30680100 	rsbcc	r0, r8, r0, lsl #2
  f8:	0c000000 	stceq	0, cr0, [r0], {-0}
  fc:	07000000 	streq	r0, [r0, -r0]
 100:	0000002b 	andeq	r0, r0, fp, lsr #32
 104:	00105701 	andseq	r5, r0, r1, lsl #14
 108:	00602000 	rsbeq	r2, r0, r0
 10c:	9c010000 	stcls	0, cr0, [r1], {-0}
 110:	00002307 	andeq	r2, r0, r7, lsl #6
 114:	004e0100 	subeq	r0, lr, r0, lsl #2
 118:	0c200000 	stceq	0, cr0, [r0], #-0
 11c:	01000000 	mrseq	r0, (UNDEF: 0)
 120:	Address 0x00000120 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00340200 	eorseq	r0, r4, r0, lsl #4
  14:	0b3a0803 	bleq	e82028 <startup-0x1f17dfd8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	00001802 	andeq	r1, r0, r2, lsl #16
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	04000008 	streq	r0, [r0], #-8
  2c:	13490035 	movtne	r0, #36917	; 0x9035
  30:	34050000 	strcc	r0, [r5], #-0
  34:	3a0e0300 	bcc	380c3c <startup-0x1fc7f3c4>
  38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  3c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  40:	06000018 			; <UNDEFINED> instruction: 0x06000018
  44:	0b0b0024 	bleq	2c00dc <startup-0x1fd3ff24>
  48:	0e030b3e 	vmoveq.16	d3[0], r0
  4c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  50:	03193f00 	tsteq	r9, #0, 30
  54:	3b0b3a0e 	blcc	2ce894 <startup-0x1fd3176c>
  58:	1119270b 	tstne	r9, fp, lsl #14
  5c:	40061201 	andmi	r1, r6, r1, lsl #4
  60:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  64:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
  68:	03193f00 	tsteq	r9, #0, 30
  6c:	3b0b3a0e 	blcc	2ce8ac <startup-0x1fd31754>
  70:	1119270b 	tstne	r9, fp, lsl #14
  74:	40061201 	andmi	r1, r6, r1, lsl #4
  78:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  7c:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
  80:	03193f01 	tsteq	r9, #1, 30
  84:	3b0b3a0e 	blcc	2ce8c4 <startup-0x1fd3173c>
  88:	1119270b 	tstne	r9, fp, lsl #14
  8c:	40061201 	andmi	r1, r6, r1, lsl #4
  90:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	11010b0a 	tstne	r1, sl, lsl #22
  9c:	00061201 	andeq	r1, r6, r1, lsl #4
  a0:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  a4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a8:	0b3b0b3a 	bleq	ec2d98 <startup-0x1f13d268>
  ac:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  b0:	180c0000 	stmdane	ip, {}	; <UNPREDICTABLE>
  b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000304 	andeq	r0, r0, r4, lsl #6
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000314 	andcs	r0, r0, r4, lsl r3
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d8 	ldrdeq	r0, [r0], -r8
   4:	00620002 	rsbeq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c63696e 			; <UNDEFINED> instruction: 0x6c63696e
  28:	41442f61 	cmpmi	r4, r1, ror #30
  2c:	37313054 			; <UNDEFINED> instruction: 0x37313054
  30:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  34:	6f4d2f31 	svcvs	0x004d2f31
  38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  44:	6c662f72 	stclvs	15, cr2, [r6], #-456	; 0xfffffe38
  48:	665f7069 	ldrbvs	r7, [pc], -r9, rrx
  4c:	5f706f6c 	svcpl	0x00706f6c
  50:	5f717269 	svcpl	0x00717269
  54:	74636576 	strbtvc	r6, [r3], #-1398	; 0xfffffa8a
  58:	6465726f 	strbtvs	r7, [r5], #-623	; 0xfffffd91
  5c:	74730000 	ldrbtvc	r0, [r3], #-0
  60:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  64:	00632e70 	rsbeq	r2, r3, r0, ror lr
  68:	00000001 	andeq	r0, r0, r1
  6c:	00020500 	andeq	r0, r2, r0, lsl #10
  70:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  74:	130100ce 	movwne	r0, #4302	; 0x10ce
  78:	0003025e 	andeq	r0, r3, lr, asr r2
  7c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  80:	00001002 	andeq	r1, r0, r2
  84:	00d70320 	sbcseq	r0, r7, r0, lsr #6
  88:	5a3d2f01 	bpl	f4bc94 <startup-0x1f0b436c>
  8c:	3d676859 	stclcc	8, cr6, [r7, #-356]!	; 0xfffffe9c
  90:	3d2fbc67 	stccc	12, cr11, [pc, #-412]!	; fffffefc <count+0xdffffbe2>
  94:	67682f5a 			; <UNDEFINED> instruction: 0x67682f5a
  98:	2f92673d 	svccs	0x0092673d
  9c:	683d5a3d 	ldmdavs	sp!, {r0, r2, r3, r4, r5, r9, fp, ip, lr}
  a0:	bc673d67 	stcllt	13, cr3, [r7], #-412	; 0xfffffe64
  a4:	595a3d2f 	ldmdbpl	sl, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}^
  a8:	673d6768 	ldrvs	r6, [sp, -r8, ror #14]!
  ac:	3d3e30bd 	ldccc	0, cr3, [lr, #-756]!	; 0xfffffd0c
  b0:	3f4d5c3d 	svccc	0x004d5c3d
  b4:	68773f3f 	ldmdavs	r7!, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp}^
  b8:	6a3e6868 	bvs	f9a260 <startup-0x1f065da0>
  bc:	3e686868 	cdpcc	8, 6, cr6, cr8, cr8, {3}
  c0:	6868766a 	stmdavs	r8!, {r1, r3, r5, r6, r9, sl, ip, sp, lr}^
  c4:	2b02753e 	blcs	9d5c4 <startup-0x1ff62a3c>
  c8:	02002f14 	andeq	r2, r0, #20, 30	; 0x50
  cc:	a2300104 	eorsge	r0, r0, #4, 2
  d0:	413d4b2f 	teqmi	sp, pc, lsr #22
  d4:	023e3d1d 	eorseq	r3, lr, #1856	; 0x740
  d8:	01010007 	tsteq	r1, r7

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	5f717269 	svcpl	0x00717269
   4:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
   8:	3172656c 	cmncc	r2, ip, ror #10
   c:	71726900 	cmnvc	r2, r0, lsl #18
  10:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
  14:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
  18:	6e690032 	mcrvs	0, 3, r0, cr9, cr2, {1}
  1c:	615f7469 	cmpvs	pc, r9, ror #8
  20:	73007070 	movwvc	r7, #112	; 0x70
  24:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  28:	69007075 	stmdbvs	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
  2c:	685f7172 	ldmdavs	pc, {r1, r4, r5, r6, r8, ip, sp, lr}^	; <UNPREDICTABLE>
  30:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
  34:	73007265 	movwvc	r7, #613	; 0x265
  38:	69747379 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}^
  3c:	665f6b63 	ldrbvs	r6, [pc], -r3, ror #22
  40:	0067616c 	rsbeq	r6, r7, ip, ror #2
  44:	20554e47 	subscs	r4, r5, r7, asr #28
  48:	20393943 	eorscs	r3, r9, r3, asr #18
  4c:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  50:	30322031 	eorscc	r2, r2, r1, lsr r0
  54:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  58:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  5c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  60:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  64:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  68:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  6c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  70:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  74:	6172622d 	cmnvs	r2, sp, lsr #4
  78:	2068636e 	rsbcs	r6, r8, lr, ror #6
  7c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  80:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  84:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  88:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  8c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  90:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  94:	616d2d20 	cmnvs	sp, r0, lsr #26
  98:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  9c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  a0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  a4:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  a8:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  ac:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  b0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  b4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  b8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  bc:	616d2d20 	cmnvs	sp, r0, lsr #26
  c0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  c4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  c8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  cc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  d0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  d4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  d8:	00393963 	eorseq	r3, r9, r3, ror #18
  dc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  e4:	61686320 	cmnvs	r8, r0, lsr #6
  e8:	6f630072 	svcvs	0x00630072
  ec:	00746e75 	rsbseq	r6, r4, r5, ror lr
  f0:	6e69616d 	powvsez	f6, f1, #5.0
  f4:	67696c00 	strbvs	r6, [r9, -r0, lsl #24]!
  f8:	70557468 	subsvc	r7, r5, r8, ror #8
  fc:	2f3a4300 	svccs	0x003a4300
 100:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 104:	696e2f73 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 108:	2f616c63 	svccs	0x00616c63
 10c:	30544144 	subscc	r4, r4, r4, asr #2
 110:	4c2f3731 	stcmi	7, cr3, [pc], #-196	; 54 <startup-0x1fffffac>
 114:	2f316261 	svccs	0x00316261
 118:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
 11c:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
 120:	6f697461 	svcvs	0x00697461
 124:	2f72656e 	svccs	0x0072656e
 128:	70696c66 	rsbvc	r6, r9, r6, ror #24
 12c:	6f6c665f 	svcvs	0x006c665f
 130:	72695f70 	rsbvc	r5, r9, #112, 30	; 0x1c0
 134:	65765f71 	ldrbvs	r5, [r6, #-3953]!	; 0xfffff08f
 138:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 13c:	732f6465 			; <UNDEFINED> instruction: 0x732f6465
 140:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 144:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 148:	4f736900 	svcmi	0x00736900
 14c:	7269006e 	rsbvc	r0, r9, #110	; 0x6e
 150:	61685f71 	smcvs	34289	; 0x85f1
 154:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 158:	Address 0x00000158 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000060 	andeq	r0, r0, r0, rrx
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000070 	andcs	r0, r0, r0, ror r0
  48:	00000054 	andeq	r0, r0, r4, asr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	200000c4 	andcs	r0, r0, r4, asr #1
  64:	0000005c 	andeq	r0, r0, ip, asr r0
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  74:	00000018 	andeq	r0, r0, r8, lsl r0
  78:	00000000 	andeq	r0, r0, r0
  7c:	20000120 	andcs	r0, r0, r0, lsr #2
  80:	00000060 	andeq	r0, r0, r0, rrx
  84:	40080e41 	andmi	r0, r8, r1, asr #28
  88:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  8c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  90:	00000018 	andeq	r0, r0, r8, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000180 	andcs	r0, r0, r0, lsl #3
  9c:	00000144 	andeq	r0, r0, r4, asr #2
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  ac:	00000018 	andeq	r0, r0, r8, lsl r0
  b0:	00000000 	andeq	r0, r0, r0
  b4:	200002c4 	andcs	r0, r0, r4, asr #5
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	40080e41 	andmi	r0, r8, r1, asr #28
  c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c8:	00000018 	andeq	r0, r0, r8, lsl r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	200002e0 	andcs	r0, r0, r0, ror #5
  d4:	00000034 	andeq	r0, r0, r4, lsr r0
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
