
./Debug/pong_working.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ffae 	bl	20000f64 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	".L1: B .L1\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_racket_speed>:
	int (* pos_y_inbounds) (struct tRacket *, int);
} RACKET, *PRACKET;

void pixel( int x, int y, int set );

void set_racket_speed(PRACKET o, int speedy) {
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
    o->diry = speedy;
2000001a:	687b      	ldr	r3, [r7, #4]
2000001c:	683a      	ldr	r2, [r7, #0]
2000001e:	609a      	str	r2, [r3, #8]
}
20000020:	46c0      	nop			; (mov r8, r8)
20000022:	46bd      	mov	sp, r7
20000024:	b002      	add	sp, #8
20000026:	bd80      	pop	{r7, pc}

20000028 <draw_racket>:

void draw_racket(PRACKET o) {
20000028:	b580      	push	{r7, lr}
2000002a:	b084      	sub	sp, #16
2000002c:	af00      	add	r7, sp, #0
2000002e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++) {
20000030:	2300      	movs	r3, #0
20000032:	60fb      	str	r3, [r7, #12]
20000034:	e01e      	b.n	20000074 <draw_racket+0x4c>
        pixel((o->geo->px[i].x) + o->posx, (o->geo->px[i].y) + o->posy, 1);
20000036:	687b      	ldr	r3, [r7, #4]
20000038:	681a      	ldr	r2, [r3, #0]
2000003a:	68fb      	ldr	r3, [r7, #12]
2000003c:	3304      	adds	r3, #4
2000003e:	005b      	lsls	r3, r3, #1
20000040:	18d3      	adds	r3, r2, r3
20000042:	3304      	adds	r3, #4
20000044:	781b      	ldrb	r3, [r3, #0]
20000046:	001a      	movs	r2, r3
20000048:	687b      	ldr	r3, [r7, #4]
2000004a:	68db      	ldr	r3, [r3, #12]
2000004c:	18d0      	adds	r0, r2, r3
2000004e:	687b      	ldr	r3, [r7, #4]
20000050:	681a      	ldr	r2, [r3, #0]
20000052:	68fb      	ldr	r3, [r7, #12]
20000054:	3304      	adds	r3, #4
20000056:	005b      	lsls	r3, r3, #1
20000058:	18d3      	adds	r3, r2, r3
2000005a:	3305      	adds	r3, #5
2000005c:	781b      	ldrb	r3, [r3, #0]
2000005e:	001a      	movs	r2, r3
20000060:	687b      	ldr	r3, [r7, #4]
20000062:	691b      	ldr	r3, [r3, #16]
20000064:	18d3      	adds	r3, r2, r3
20000066:	2201      	movs	r2, #1
20000068:	0019      	movs	r1, r3
2000006a:	f000 fc85 	bl	20000978 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++) {
2000006e:	68fb      	ldr	r3, [r7, #12]
20000070:	3301      	adds	r3, #1
20000072:	60fb      	str	r3, [r7, #12]
20000074:	687b      	ldr	r3, [r7, #4]
20000076:	681b      	ldr	r3, [r3, #0]
20000078:	681a      	ldr	r2, [r3, #0]
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	429a      	cmp	r2, r3
2000007e:	dcda      	bgt.n	20000036 <draw_racket+0xe>
    }
}
20000080:	46c0      	nop			; (mov r8, r8)
20000082:	46bd      	mov	sp, r7
20000084:	b004      	add	sp, #16
20000086:	bd80      	pop	{r7, pc}

20000088 <clear_racket>:

void clear_racket(PRACKET o) {
20000088:	b580      	push	{r7, lr}
2000008a:	b084      	sub	sp, #16
2000008c:	af00      	add	r7, sp, #0
2000008e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++) {
20000090:	2300      	movs	r3, #0
20000092:	60fb      	str	r3, [r7, #12]
20000094:	e01e      	b.n	200000d4 <clear_racket+0x4c>
        pixel((o->geo->px[i].x) + o->posx, (o->geo->px[i].y) + o->posy, 0);
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	681a      	ldr	r2, [r3, #0]
2000009a:	68fb      	ldr	r3, [r7, #12]
2000009c:	3304      	adds	r3, #4
2000009e:	005b      	lsls	r3, r3, #1
200000a0:	18d3      	adds	r3, r2, r3
200000a2:	3304      	adds	r3, #4
200000a4:	781b      	ldrb	r3, [r3, #0]
200000a6:	001a      	movs	r2, r3
200000a8:	687b      	ldr	r3, [r7, #4]
200000aa:	68db      	ldr	r3, [r3, #12]
200000ac:	18d0      	adds	r0, r2, r3
200000ae:	687b      	ldr	r3, [r7, #4]
200000b0:	681a      	ldr	r2, [r3, #0]
200000b2:	68fb      	ldr	r3, [r7, #12]
200000b4:	3304      	adds	r3, #4
200000b6:	005b      	lsls	r3, r3, #1
200000b8:	18d3      	adds	r3, r2, r3
200000ba:	3305      	adds	r3, #5
200000bc:	781b      	ldrb	r3, [r3, #0]
200000be:	001a      	movs	r2, r3
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	691b      	ldr	r3, [r3, #16]
200000c4:	18d3      	adds	r3, r2, r3
200000c6:	2200      	movs	r2, #0
200000c8:	0019      	movs	r1, r3
200000ca:	f000 fc55 	bl	20000978 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++) {
200000ce:	68fb      	ldr	r3, [r7, #12]
200000d0:	3301      	adds	r3, #1
200000d2:	60fb      	str	r3, [r7, #12]
200000d4:	687b      	ldr	r3, [r7, #4]
200000d6:	681b      	ldr	r3, [r3, #0]
200000d8:	681a      	ldr	r2, [r3, #0]
200000da:	68fb      	ldr	r3, [r7, #12]
200000dc:	429a      	cmp	r2, r3
200000de:	dcda      	bgt.n	20000096 <clear_racket+0xe>
    }
}
200000e0:	46c0      	nop			; (mov r8, r8)
200000e2:	46bd      	mov	sp, r7
200000e4:	b004      	add	sp, #16
200000e6:	bd80      	pop	{r7, pc}

200000e8 <move_racket>:

void move_racket(PRACKET o) 
{
200000e8:	b580      	push	{r7, lr}
200000ea:	b082      	sub	sp, #8
200000ec:	af00      	add	r7, sp, #0
200000ee:	6078      	str	r0, [r7, #4]
    clear_racket(o);
200000f0:	687b      	ldr	r3, [r7, #4]
200000f2:	0018      	movs	r0, r3
200000f4:	f7ff ffc8 	bl	20000088 <clear_racket>
    o->posx += o->dirx;
200000f8:	687b      	ldr	r3, [r7, #4]
200000fa:	68da      	ldr	r2, [r3, #12]
200000fc:	687b      	ldr	r3, [r7, #4]
200000fe:	685b      	ldr	r3, [r3, #4]
20000100:	18d2      	adds	r2, r2, r3
20000102:	687b      	ldr	r3, [r7, #4]
20000104:	60da      	str	r2, [r3, #12]
    o->posy += o->diry;
20000106:	687b      	ldr	r3, [r7, #4]
20000108:	691a      	ldr	r2, [r3, #16]
2000010a:	687b      	ldr	r3, [r7, #4]
2000010c:	689b      	ldr	r3, [r3, #8]
2000010e:	18d2      	adds	r2, r2, r3
20000110:	687b      	ldr	r3, [r7, #4]
20000112:	611a      	str	r2, [r3, #16]
    
    if (o->posx < 1) {
20000114:	687b      	ldr	r3, [r7, #4]
20000116:	68db      	ldr	r3, [r3, #12]
20000118:	2b00      	cmp	r3, #0
2000011a:	dc0c      	bgt.n	20000136 <move_racket+0x4e>
        o->dirx = o->dirx * -1;
2000011c:	687b      	ldr	r3, [r7, #4]
2000011e:	685b      	ldr	r3, [r3, #4]
20000120:	425a      	negs	r2, r3
20000122:	687b      	ldr	r3, [r7, #4]
20000124:	605a      	str	r2, [r3, #4]
        o->posx += o->dirx;
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	68da      	ldr	r2, [r3, #12]
2000012a:	687b      	ldr	r3, [r7, #4]
2000012c:	685b      	ldr	r3, [r3, #4]
2000012e:	18d2      	adds	r2, r2, r3
20000130:	687b      	ldr	r3, [r7, #4]
20000132:	60da      	str	r2, [r3, #12]
20000134:	e013      	b.n	2000015e <move_racket+0x76>
    }
    
    else if (o->posx + o->geo->sizex > 128) {
20000136:	687b      	ldr	r3, [r7, #4]
20000138:	68da      	ldr	r2, [r3, #12]
2000013a:	687b      	ldr	r3, [r7, #4]
2000013c:	681b      	ldr	r3, [r3, #0]
2000013e:	685b      	ldr	r3, [r3, #4]
20000140:	18d3      	adds	r3, r2, r3
20000142:	2b80      	cmp	r3, #128	; 0x80
20000144:	dd0b      	ble.n	2000015e <move_racket+0x76>
        o->dirx = o->dirx * -1;
20000146:	687b      	ldr	r3, [r7, #4]
20000148:	685b      	ldr	r3, [r3, #4]
2000014a:	425a      	negs	r2, r3
2000014c:	687b      	ldr	r3, [r7, #4]
2000014e:	605a      	str	r2, [r3, #4]
        o->posx += o->dirx;
20000150:	687b      	ldr	r3, [r7, #4]
20000152:	68da      	ldr	r2, [r3, #12]
20000154:	687b      	ldr	r3, [r7, #4]
20000156:	685b      	ldr	r3, [r3, #4]
20000158:	18d2      	adds	r2, r2, r3
2000015a:	687b      	ldr	r3, [r7, #4]
2000015c:	60da      	str	r2, [r3, #12]
    }
    
    if (o->posy < 1) {
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	691b      	ldr	r3, [r3, #16]
20000162:	2b00      	cmp	r3, #0
20000164:	dc0c      	bgt.n	20000180 <move_racket+0x98>
        o->diry = o->diry * -1;
20000166:	687b      	ldr	r3, [r7, #4]
20000168:	689b      	ldr	r3, [r3, #8]
2000016a:	425a      	negs	r2, r3
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	609a      	str	r2, [r3, #8]
        o->posy += o->diry;
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	691a      	ldr	r2, [r3, #16]
20000174:	687b      	ldr	r3, [r7, #4]
20000176:	689b      	ldr	r3, [r3, #8]
20000178:	18d2      	adds	r2, r2, r3
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	611a      	str	r2, [r3, #16]
2000017e:	e013      	b.n	200001a8 <move_racket+0xc0>
    }
    
    else if (o->posy + o->geo->sizey > 64) {
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	691a      	ldr	r2, [r3, #16]
20000184:	687b      	ldr	r3, [r7, #4]
20000186:	681b      	ldr	r3, [r3, #0]
20000188:	689b      	ldr	r3, [r3, #8]
2000018a:	18d3      	adds	r3, r2, r3
2000018c:	2b40      	cmp	r3, #64	; 0x40
2000018e:	dd0b      	ble.n	200001a8 <move_racket+0xc0>
        o->diry = o->diry * -1;
20000190:	687b      	ldr	r3, [r7, #4]
20000192:	689b      	ldr	r3, [r3, #8]
20000194:	425a      	negs	r2, r3
20000196:	687b      	ldr	r3, [r7, #4]
20000198:	609a      	str	r2, [r3, #8]
        o->posy += o->diry;
2000019a:	687b      	ldr	r3, [r7, #4]
2000019c:	691a      	ldr	r2, [r3, #16]
2000019e:	687b      	ldr	r3, [r7, #4]
200001a0:	689b      	ldr	r3, [r3, #8]
200001a2:	18d2      	adds	r2, r2, r3
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	611a      	str	r2, [r3, #16]
    }
    draw_racket(o);
200001a8:	687b      	ldr	r3, [r7, #4]
200001aa:	0018      	movs	r0, r3
200001ac:	f7ff ff3c 	bl	20000028 <draw_racket>
}
200001b0:	46c0      	nop			; (mov r8, r8)
200001b2:	46bd      	mov	sp, r7
200001b4:	b002      	add	sp, #8
200001b6:	bd80      	pop	{r7, pc}

200001b8 <pos_x_racket_inbounds>:

int pos_x_racket_inbounds(PRACKET o, int positionx){
200001b8:	b580      	push	{r7, lr}
200001ba:	b084      	sub	sp, #16
200001bc:	af00      	add	r7, sp, #0
200001be:	6078      	str	r0, [r7, #4]
200001c0:	6039      	str	r1, [r7, #0]
	int tmp = o->posx - positionx;
200001c2:	687b      	ldr	r3, [r7, #4]
200001c4:	68da      	ldr	r2, [r3, #12]
200001c6:	683b      	ldr	r3, [r7, #0]
200001c8:	1ad3      	subs	r3, r2, r3
200001ca:	60fb      	str	r3, [r7, #12]
	if ((tmp > o->geo->sizex) || (tmp < 0)) return 0;
200001cc:	687b      	ldr	r3, [r7, #4]
200001ce:	681b      	ldr	r3, [r3, #0]
200001d0:	685a      	ldr	r2, [r3, #4]
200001d2:	68fb      	ldr	r3, [r7, #12]
200001d4:	429a      	cmp	r2, r3
200001d6:	db02      	blt.n	200001de <pos_x_racket_inbounds+0x26>
200001d8:	68fb      	ldr	r3, [r7, #12]
200001da:	2b00      	cmp	r3, #0
200001dc:	da01      	bge.n	200001e2 <pos_x_racket_inbounds+0x2a>
200001de:	2300      	movs	r3, #0
200001e0:	e000      	b.n	200001e4 <pos_x_racket_inbounds+0x2c>
	else return 1;
200001e2:	2301      	movs	r3, #1
}
200001e4:	0018      	movs	r0, r3
200001e6:	46bd      	mov	sp, r7
200001e8:	b004      	add	sp, #16
200001ea:	bd80      	pop	{r7, pc}

200001ec <pos_y_racket_inbounds>:

int pos_y_racket_inbounds(PRACKET o, int positiony){
200001ec:	b580      	push	{r7, lr}
200001ee:	b084      	sub	sp, #16
200001f0:	af00      	add	r7, sp, #0
200001f2:	6078      	str	r0, [r7, #4]
200001f4:	6039      	str	r1, [r7, #0]
	int tmp = o->posy - positiony;
200001f6:	687b      	ldr	r3, [r7, #4]
200001f8:	691a      	ldr	r2, [r3, #16]
200001fa:	683b      	ldr	r3, [r7, #0]
200001fc:	1ad3      	subs	r3, r2, r3
200001fe:	60fb      	str	r3, [r7, #12]
	if ((tmp > o->geo->sizey) || (tmp < 0)) return 0;
20000200:	687b      	ldr	r3, [r7, #4]
20000202:	681b      	ldr	r3, [r3, #0]
20000204:	689a      	ldr	r2, [r3, #8]
20000206:	68fb      	ldr	r3, [r7, #12]
20000208:	429a      	cmp	r2, r3
2000020a:	db02      	blt.n	20000212 <pos_y_racket_inbounds+0x26>
2000020c:	68fb      	ldr	r3, [r7, #12]
2000020e:	2b00      	cmp	r3, #0
20000210:	da01      	bge.n	20000216 <pos_y_racket_inbounds+0x2a>
20000212:	2300      	movs	r3, #0
20000214:	e000      	b.n	20000218 <pos_y_racket_inbounds+0x2c>
	else return 1;
20000216:	2301      	movs	r3, #1
20000218:	0018      	movs	r0, r3
2000021a:	46bd      	mov	sp, r7
2000021c:	b004      	add	sp, #16
2000021e:	bd80      	pop	{r7, pc}

20000220 <set_object_speed_x>:
	int (* pos_y_inbounds) (struct tPongBall *, int);
} PONGBALL, *PPONGBALL;

void pixel( int x, int y, int set );

void set_object_speed_x(PPONGBALL o, int speedx){
20000220:	b580      	push	{r7, lr}
20000222:	b082      	sub	sp, #8
20000224:	af00      	add	r7, sp, #0
20000226:	6078      	str	r0, [r7, #4]
20000228:	6039      	str	r1, [r7, #0]
	o->dirx = speedx;
2000022a:	687b      	ldr	r3, [r7, #4]
2000022c:	683a      	ldr	r2, [r7, #0]
2000022e:	605a      	str	r2, [r3, #4]
}
20000230:	46c0      	nop			; (mov r8, r8)
20000232:	46bd      	mov	sp, r7
20000234:	b002      	add	sp, #8
20000236:	bd80      	pop	{r7, pc}

20000238 <set_object_speed_y>:

void set_object_speed_y(PPONGBALL o, int speedy){
20000238:	b580      	push	{r7, lr}
2000023a:	b082      	sub	sp, #8
2000023c:	af00      	add	r7, sp, #0
2000023e:	6078      	str	r0, [r7, #4]
20000240:	6039      	str	r1, [r7, #0]
	o->diry = speedy;
20000242:	687b      	ldr	r3, [r7, #4]
20000244:	683a      	ldr	r2, [r7, #0]
20000246:	609a      	str	r2, [r3, #8]
}
20000248:	46c0      	nop			; (mov r8, r8)
2000024a:	46bd      	mov	sp, r7
2000024c:	b002      	add	sp, #8
2000024e:	bd80      	pop	{r7, pc}

20000250 <draw_object>:

void draw_object(PPONGBALL o) {
20000250:	b580      	push	{r7, lr}
20000252:	b084      	sub	sp, #16
20000254:	af00      	add	r7, sp, #0
20000256:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++) {
20000258:	2300      	movs	r3, #0
2000025a:	60fb      	str	r3, [r7, #12]
2000025c:	e01e      	b.n	2000029c <draw_object+0x4c>
        pixel((o->geo->px[i].x) + o->posx, (o->geo->px[i].y) + o->posy, 1);
2000025e:	687b      	ldr	r3, [r7, #4]
20000260:	681a      	ldr	r2, [r3, #0]
20000262:	68fb      	ldr	r3, [r7, #12]
20000264:	3304      	adds	r3, #4
20000266:	005b      	lsls	r3, r3, #1
20000268:	18d3      	adds	r3, r2, r3
2000026a:	3304      	adds	r3, #4
2000026c:	781b      	ldrb	r3, [r3, #0]
2000026e:	001a      	movs	r2, r3
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	68db      	ldr	r3, [r3, #12]
20000274:	18d0      	adds	r0, r2, r3
20000276:	687b      	ldr	r3, [r7, #4]
20000278:	681a      	ldr	r2, [r3, #0]
2000027a:	68fb      	ldr	r3, [r7, #12]
2000027c:	3304      	adds	r3, #4
2000027e:	005b      	lsls	r3, r3, #1
20000280:	18d3      	adds	r3, r2, r3
20000282:	3305      	adds	r3, #5
20000284:	781b      	ldrb	r3, [r3, #0]
20000286:	001a      	movs	r2, r3
20000288:	687b      	ldr	r3, [r7, #4]
2000028a:	691b      	ldr	r3, [r3, #16]
2000028c:	18d3      	adds	r3, r2, r3
2000028e:	2201      	movs	r2, #1
20000290:	0019      	movs	r1, r3
20000292:	f000 fb71 	bl	20000978 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++) {
20000296:	68fb      	ldr	r3, [r7, #12]
20000298:	3301      	adds	r3, #1
2000029a:	60fb      	str	r3, [r7, #12]
2000029c:	687b      	ldr	r3, [r7, #4]
2000029e:	681b      	ldr	r3, [r3, #0]
200002a0:	681a      	ldr	r2, [r3, #0]
200002a2:	68fb      	ldr	r3, [r7, #12]
200002a4:	429a      	cmp	r2, r3
200002a6:	dcda      	bgt.n	2000025e <draw_object+0xe>
    }
}
200002a8:	46c0      	nop			; (mov r8, r8)
200002aa:	46bd      	mov	sp, r7
200002ac:	b004      	add	sp, #16
200002ae:	bd80      	pop	{r7, pc}

200002b0 <clear_object>:

void clear_object(PPONGBALL o) {
200002b0:	b580      	push	{r7, lr}
200002b2:	b084      	sub	sp, #16
200002b4:	af00      	add	r7, sp, #0
200002b6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < o->geo->numpoints; i++) {
200002b8:	2300      	movs	r3, #0
200002ba:	60fb      	str	r3, [r7, #12]
200002bc:	e01e      	b.n	200002fc <clear_object+0x4c>
        pixel((o->geo->px[i].x) + o->posx, (o->geo->px[i].y) + o->posy, 0);
200002be:	687b      	ldr	r3, [r7, #4]
200002c0:	681a      	ldr	r2, [r3, #0]
200002c2:	68fb      	ldr	r3, [r7, #12]
200002c4:	3304      	adds	r3, #4
200002c6:	005b      	lsls	r3, r3, #1
200002c8:	18d3      	adds	r3, r2, r3
200002ca:	3304      	adds	r3, #4
200002cc:	781b      	ldrb	r3, [r3, #0]
200002ce:	001a      	movs	r2, r3
200002d0:	687b      	ldr	r3, [r7, #4]
200002d2:	68db      	ldr	r3, [r3, #12]
200002d4:	18d0      	adds	r0, r2, r3
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	681a      	ldr	r2, [r3, #0]
200002da:	68fb      	ldr	r3, [r7, #12]
200002dc:	3304      	adds	r3, #4
200002de:	005b      	lsls	r3, r3, #1
200002e0:	18d3      	adds	r3, r2, r3
200002e2:	3305      	adds	r3, #5
200002e4:	781b      	ldrb	r3, [r3, #0]
200002e6:	001a      	movs	r2, r3
200002e8:	687b      	ldr	r3, [r7, #4]
200002ea:	691b      	ldr	r3, [r3, #16]
200002ec:	18d3      	adds	r3, r2, r3
200002ee:	2200      	movs	r2, #0
200002f0:	0019      	movs	r1, r3
200002f2:	f000 fb41 	bl	20000978 <pixel>
    for (int i = 0; i < o->geo->numpoints; i++) {
200002f6:	68fb      	ldr	r3, [r7, #12]
200002f8:	3301      	adds	r3, #1
200002fa:	60fb      	str	r3, [r7, #12]
200002fc:	687b      	ldr	r3, [r7, #4]
200002fe:	681b      	ldr	r3, [r3, #0]
20000300:	681a      	ldr	r2, [r3, #0]
20000302:	68fb      	ldr	r3, [r7, #12]
20000304:	429a      	cmp	r2, r3
20000306:	dcda      	bgt.n	200002be <clear_object+0xe>
    }
}
20000308:	46c0      	nop			; (mov r8, r8)
2000030a:	46bd      	mov	sp, r7
2000030c:	b004      	add	sp, #16
2000030e:	bd80      	pop	{r7, pc}

20000310 <move_object>:

void move_object(PPONGBALL o, PRACKET leftR, PRACKET rightR) 
{
20000310:	b580      	push	{r7, lr}
20000312:	b084      	sub	sp, #16
20000314:	af00      	add	r7, sp, #0
20000316:	60f8      	str	r0, [r7, #12]
20000318:	60b9      	str	r1, [r7, #8]
2000031a:	607a      	str	r2, [r7, #4]
    clear_object(o);
2000031c:	68fb      	ldr	r3, [r7, #12]
2000031e:	0018      	movs	r0, r3
20000320:	f7ff ffc6 	bl	200002b0 <clear_object>
	
	
	if ((collide(leftR, o) == 1) || (collide(rightR, o) == 1)){
20000324:	68fa      	ldr	r2, [r7, #12]
20000326:	68bb      	ldr	r3, [r7, #8]
20000328:	0011      	movs	r1, r2
2000032a:	0018      	movs	r0, r3
2000032c:	f000 f872 	bl	20000414 <collide>
20000330:	0003      	movs	r3, r0
20000332:	2b01      	cmp	r3, #1
20000334:	d008      	beq.n	20000348 <move_object+0x38>
20000336:	68fa      	ldr	r2, [r7, #12]
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	0011      	movs	r1, r2
2000033c:	0018      	movs	r0, r3
2000033e:	f000 f869 	bl	20000414 <collide>
20000342:	0003      	movs	r3, r0
20000344:	2b01      	cmp	r3, #1
20000346:	d104      	bne.n	20000352 <move_object+0x42>
		o->dirx = o->dirx * -1;
20000348:	68fb      	ldr	r3, [r7, #12]
2000034a:	685b      	ldr	r3, [r3, #4]
2000034c:	425a      	negs	r2, r3
2000034e:	68fb      	ldr	r3, [r7, #12]
20000350:	605a      	str	r2, [r3, #4]
		if ((rightR->pos_y_inbounds(rightR, new_y) == 1) || (rightR->pos_y_inbounds(rightR, new_y + o->geo->sizey) == 1)){
			o->dirx = o->dirx * -1;
		}
	}*/
	
	o->posx += o->dirx;
20000352:	68fb      	ldr	r3, [r7, #12]
20000354:	68da      	ldr	r2, [r3, #12]
20000356:	68fb      	ldr	r3, [r7, #12]
20000358:	685b      	ldr	r3, [r3, #4]
2000035a:	18d2      	adds	r2, r2, r3
2000035c:	68fb      	ldr	r3, [r7, #12]
2000035e:	60da      	str	r2, [r3, #12]
    o->posy += o->diry;
20000360:	68fb      	ldr	r3, [r7, #12]
20000362:	691a      	ldr	r2, [r3, #16]
20000364:	68fb      	ldr	r3, [r7, #12]
20000366:	689b      	ldr	r3, [r3, #8]
20000368:	18d2      	adds	r2, r2, r3
2000036a:	68fb      	ldr	r3, [r7, #12]
2000036c:	611a      	str	r2, [r3, #16]
    
    if (o->posy < 1) {
2000036e:	68fb      	ldr	r3, [r7, #12]
20000370:	691b      	ldr	r3, [r3, #16]
20000372:	2b00      	cmp	r3, #0
20000374:	dc05      	bgt.n	20000382 <move_object+0x72>
        o->diry = o->diry * -1;
20000376:	68fb      	ldr	r3, [r7, #12]
20000378:	689b      	ldr	r3, [r3, #8]
2000037a:	425a      	negs	r2, r3
2000037c:	68fb      	ldr	r3, [r7, #12]
2000037e:	609a      	str	r2, [r3, #8]
20000380:	e00c      	b.n	2000039c <move_object+0x8c>
    } else if (o->posy + o->geo->sizey > 64) {
20000382:	68fb      	ldr	r3, [r7, #12]
20000384:	691a      	ldr	r2, [r3, #16]
20000386:	68fb      	ldr	r3, [r7, #12]
20000388:	681b      	ldr	r3, [r3, #0]
2000038a:	689b      	ldr	r3, [r3, #8]
2000038c:	18d3      	adds	r3, r2, r3
2000038e:	2b40      	cmp	r3, #64	; 0x40
20000390:	dd04      	ble.n	2000039c <move_object+0x8c>
        o->diry = o->diry * -1;
20000392:	68fb      	ldr	r3, [r7, #12]
20000394:	689b      	ldr	r3, [r3, #8]
20000396:	425a      	negs	r2, r3
20000398:	68fb      	ldr	r3, [r7, #12]
2000039a:	609a      	str	r2, [r3, #8]
    }
	
    draw_object(o);
2000039c:	68fb      	ldr	r3, [r7, #12]
2000039e:	0018      	movs	r0, r3
200003a0:	f7ff ff56 	bl	20000250 <draw_object>
}
200003a4:	46c0      	nop			; (mov r8, r8)
200003a6:	46bd      	mov	sp, r7
200003a8:	b004      	add	sp, #16
200003aa:	bd80      	pop	{r7, pc}

200003ac <pos_x_pongball_inbounds>:

int pos_x_pongball_inbounds(PPONGBALL o, int positionx){
200003ac:	b580      	push	{r7, lr}
200003ae:	b084      	sub	sp, #16
200003b0:	af00      	add	r7, sp, #0
200003b2:	6078      	str	r0, [r7, #4]
200003b4:	6039      	str	r1, [r7, #0]
	int tmp = o->posx - positionx;
200003b6:	687b      	ldr	r3, [r7, #4]
200003b8:	68da      	ldr	r2, [r3, #12]
200003ba:	683b      	ldr	r3, [r7, #0]
200003bc:	1ad3      	subs	r3, r2, r3
200003be:	60fb      	str	r3, [r7, #12]
	if ((tmp > o->geo->sizex) || (tmp < 0)) return 0;
200003c0:	687b      	ldr	r3, [r7, #4]
200003c2:	681b      	ldr	r3, [r3, #0]
200003c4:	685a      	ldr	r2, [r3, #4]
200003c6:	68fb      	ldr	r3, [r7, #12]
200003c8:	429a      	cmp	r2, r3
200003ca:	db02      	blt.n	200003d2 <pos_x_pongball_inbounds+0x26>
200003cc:	68fb      	ldr	r3, [r7, #12]
200003ce:	2b00      	cmp	r3, #0
200003d0:	da01      	bge.n	200003d6 <pos_x_pongball_inbounds+0x2a>
200003d2:	2300      	movs	r3, #0
200003d4:	e000      	b.n	200003d8 <pos_x_pongball_inbounds+0x2c>
	else return 1;
200003d6:	2301      	movs	r3, #1
}
200003d8:	0018      	movs	r0, r3
200003da:	46bd      	mov	sp, r7
200003dc:	b004      	add	sp, #16
200003de:	bd80      	pop	{r7, pc}

200003e0 <pos_y_pongball_inbounds>:

int pos_y_pongball_inbounds(PPONGBALL o, int positiony){
200003e0:	b580      	push	{r7, lr}
200003e2:	b084      	sub	sp, #16
200003e4:	af00      	add	r7, sp, #0
200003e6:	6078      	str	r0, [r7, #4]
200003e8:	6039      	str	r1, [r7, #0]
	int tmp = o->posy - positiony;
200003ea:	687b      	ldr	r3, [r7, #4]
200003ec:	691a      	ldr	r2, [r3, #16]
200003ee:	683b      	ldr	r3, [r7, #0]
200003f0:	1ad3      	subs	r3, r2, r3
200003f2:	60fb      	str	r3, [r7, #12]
	if ((tmp > o->geo->sizey) || (tmp < 0)) return 0;
200003f4:	687b      	ldr	r3, [r7, #4]
200003f6:	681b      	ldr	r3, [r3, #0]
200003f8:	689a      	ldr	r2, [r3, #8]
200003fa:	68fb      	ldr	r3, [r7, #12]
200003fc:	429a      	cmp	r2, r3
200003fe:	db02      	blt.n	20000406 <pos_y_pongball_inbounds+0x26>
20000400:	68fb      	ldr	r3, [r7, #12]
20000402:	2b00      	cmp	r3, #0
20000404:	da01      	bge.n	2000040a <pos_y_pongball_inbounds+0x2a>
20000406:	2300      	movs	r3, #0
20000408:	e000      	b.n	2000040c <pos_y_pongball_inbounds+0x2c>
	else return 1;
2000040a:	2301      	movs	r3, #1
}
2000040c:	0018      	movs	r0, r3
2000040e:	46bd      	mov	sp, r7
20000410:	b004      	add	sp, #16
20000412:	bd80      	pop	{r7, pc}

20000414 <collide>:


int collide(PRACKET o, PPONGBALL p){
20000414:	b580      	push	{r7, lr}
20000416:	b088      	sub	sp, #32
20000418:	af00      	add	r7, sp, #0
2000041a:	6078      	str	r0, [r7, #4]
2000041c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < o->geo->numpoints; i++){
2000041e:	2300      	movs	r3, #0
20000420:	61fb      	str	r3, [r7, #28]
20000422:	e04c      	b.n	200004be <collide+0xaa>
		for (int j = 0; j < p->geo->numpoints; j++){
20000424:	2300      	movs	r3, #0
20000426:	61bb      	str	r3, [r7, #24]
20000428:	e040      	b.n	200004ac <collide+0x98>
			int o_x = o->geo->px[i].x + o->posx;
2000042a:	687b      	ldr	r3, [r7, #4]
2000042c:	681a      	ldr	r2, [r3, #0]
2000042e:	69fb      	ldr	r3, [r7, #28]
20000430:	3304      	adds	r3, #4
20000432:	005b      	lsls	r3, r3, #1
20000434:	18d3      	adds	r3, r2, r3
20000436:	3304      	adds	r3, #4
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	001a      	movs	r2, r3
2000043c:	687b      	ldr	r3, [r7, #4]
2000043e:	68db      	ldr	r3, [r3, #12]
20000440:	18d3      	adds	r3, r2, r3
20000442:	617b      	str	r3, [r7, #20]
			int o_y = o->geo->px[i].y + o->posy;
20000444:	687b      	ldr	r3, [r7, #4]
20000446:	681a      	ldr	r2, [r3, #0]
20000448:	69fb      	ldr	r3, [r7, #28]
2000044a:	3304      	adds	r3, #4
2000044c:	005b      	lsls	r3, r3, #1
2000044e:	18d3      	adds	r3, r2, r3
20000450:	3305      	adds	r3, #5
20000452:	781b      	ldrb	r3, [r3, #0]
20000454:	001a      	movs	r2, r3
20000456:	687b      	ldr	r3, [r7, #4]
20000458:	691b      	ldr	r3, [r3, #16]
2000045a:	18d3      	adds	r3, r2, r3
2000045c:	613b      	str	r3, [r7, #16]
			
			int p_x = p->geo->px[j].x + p->posx;
2000045e:	683b      	ldr	r3, [r7, #0]
20000460:	681a      	ldr	r2, [r3, #0]
20000462:	69bb      	ldr	r3, [r7, #24]
20000464:	3304      	adds	r3, #4
20000466:	005b      	lsls	r3, r3, #1
20000468:	18d3      	adds	r3, r2, r3
2000046a:	3304      	adds	r3, #4
2000046c:	781b      	ldrb	r3, [r3, #0]
2000046e:	001a      	movs	r2, r3
20000470:	683b      	ldr	r3, [r7, #0]
20000472:	68db      	ldr	r3, [r3, #12]
20000474:	18d3      	adds	r3, r2, r3
20000476:	60fb      	str	r3, [r7, #12]
			int p_y = p->geo->px[j].y + p->posy;
20000478:	683b      	ldr	r3, [r7, #0]
2000047a:	681a      	ldr	r2, [r3, #0]
2000047c:	69bb      	ldr	r3, [r7, #24]
2000047e:	3304      	adds	r3, #4
20000480:	005b      	lsls	r3, r3, #1
20000482:	18d3      	adds	r3, r2, r3
20000484:	3305      	adds	r3, #5
20000486:	781b      	ldrb	r3, [r3, #0]
20000488:	001a      	movs	r2, r3
2000048a:	683b      	ldr	r3, [r7, #0]
2000048c:	691b      	ldr	r3, [r3, #16]
2000048e:	18d3      	adds	r3, r2, r3
20000490:	60bb      	str	r3, [r7, #8]
			
			if ((o_x == p_x) && (o_y == p_y)) return 1;
20000492:	697a      	ldr	r2, [r7, #20]
20000494:	68fb      	ldr	r3, [r7, #12]
20000496:	429a      	cmp	r2, r3
20000498:	d105      	bne.n	200004a6 <collide+0x92>
2000049a:	693a      	ldr	r2, [r7, #16]
2000049c:	68bb      	ldr	r3, [r7, #8]
2000049e:	429a      	cmp	r2, r3
200004a0:	d101      	bne.n	200004a6 <collide+0x92>
200004a2:	2301      	movs	r3, #1
200004a4:	e012      	b.n	200004cc <collide+0xb8>
		for (int j = 0; j < p->geo->numpoints; j++){
200004a6:	69bb      	ldr	r3, [r7, #24]
200004a8:	3301      	adds	r3, #1
200004aa:	61bb      	str	r3, [r7, #24]
200004ac:	683b      	ldr	r3, [r7, #0]
200004ae:	681b      	ldr	r3, [r3, #0]
200004b0:	681a      	ldr	r2, [r3, #0]
200004b2:	69bb      	ldr	r3, [r7, #24]
200004b4:	429a      	cmp	r2, r3
200004b6:	dcb8      	bgt.n	2000042a <collide+0x16>
	for (int i = 0; i < o->geo->numpoints; i++){
200004b8:	69fb      	ldr	r3, [r7, #28]
200004ba:	3301      	adds	r3, #1
200004bc:	61fb      	str	r3, [r7, #28]
200004be:	687b      	ldr	r3, [r7, #4]
200004c0:	681b      	ldr	r3, [r3, #0]
200004c2:	681a      	ldr	r2, [r3, #0]
200004c4:	69fb      	ldr	r3, [r7, #28]
200004c6:	429a      	cmp	r2, r3
200004c8:	dcac      	bgt.n	20000424 <collide+0x10>
		}
	}
	
	return 0;
200004ca:	2300      	movs	r3, #0
200004cc:	0018      	movs	r0, r3
200004ce:	46bd      	mov	sp, r7
200004d0:	b008      	add	sp, #32
200004d2:	bd80      	pop	{r7, pc}

200004d4 <init_app>:
void init_app(void) 
{
200004d4:	b580      	push	{r7, lr}
200004d6:	af00      	add	r7, sp, #0
	*( (unsigned long *) 0x40023830) = 0x18;
200004d8:	4b0e      	ldr	r3, [pc, #56]	; (20000514 <init_app+0x40>)
200004da:	2218      	movs	r2, #24
200004dc:	601a      	str	r2, [r3, #0]
	
    /* PORT E */ 
    *portModer =     0x55555555;  /* all bits outputs */ 
200004de:	4b0e      	ldr	r3, [pc, #56]	; (20000518 <init_app+0x44>)
200004e0:	4a0e      	ldr	r2, [pc, #56]	; (2000051c <init_app+0x48>)
200004e2:	601a      	str	r2, [r3, #0]
    *portOtyper =    0x00000000;/* outputs arepush/pull*/ 
200004e4:	4b0e      	ldr	r3, [pc, #56]	; (20000520 <init_app+0x4c>)
200004e6:	2200      	movs	r2, #0
200004e8:	801a      	strh	r2, [r3, #0]
    *portOspeedr =   0x55555555;/* medium speed */ 
200004ea:	4b0e      	ldr	r3, [pc, #56]	; (20000524 <init_app+0x50>)
200004ec:	4a0b      	ldr	r2, [pc, #44]	; (2000051c <init_app+0x48>)
200004ee:	601a      	str	r2, [r3, #0]
    *portPupdr =     0x55550000;/* inputs arepullup*/
200004f0:	4b0d      	ldr	r3, [pc, #52]	; (20000528 <init_app+0x54>)
200004f2:	4a0e      	ldr	r2, [pc, #56]	; (2000052c <init_app+0x58>)
200004f4:	601a      	str	r2, [r3, #0]
	
    // port 15-8 -> Keypad
    *( (unsigned long *) GPIO_D_MODER) = 0x55000000;
200004f6:	4b0e      	ldr	r3, [pc, #56]	; (20000530 <init_app+0x5c>)
200004f8:	22aa      	movs	r2, #170	; 0xaa
200004fa:	05d2      	lsls	r2, r2, #23
200004fc:	601a      	str	r2, [r3, #0]
	
    //OTYPER bits 15-8 to push-pull
    *( (unsigned short *) GPIO_D_OTYPER) = 0x0000; //00000000
200004fe:	4b0d      	ldr	r3, [pc, #52]	; (20000534 <init_app+0x60>)
20000500:	2200      	movs	r2, #0
20000502:	801a      	strh	r2, [r3, #0]
	
    //PUPDR bits 23-16 to pull-down, rest to zero
    *( (unsigned long *) GPIO_D_PUPDR) = 0x00AA0000; //10101010 000000000 000000000
20000504:	4b0c      	ldr	r3, [pc, #48]	; (20000538 <init_app+0x64>)
20000506:	22aa      	movs	r2, #170	; 0xaa
20000508:	0412      	lsls	r2, r2, #16
2000050a:	601a      	str	r2, [r3, #0]
}
2000050c:	46c0      	nop			; (mov r8, r8)
2000050e:	46bd      	mov	sp, r7
20000510:	bd80      	pop	{r7, pc}
20000512:	46c0      	nop			; (mov r8, r8)
20000514:	40023830 	andmi	r3, r2, r0, lsr r8
20000518:	40021000 	andmi	r1, r2, r0
2000051c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000520:	40021004 	andmi	r1, r2, r4
20000524:	40021008 	andmi	r1, r2, r8
20000528:	4002100c 	andmi	r1, r2, ip
2000052c:	55550000 	ldrbpl	r0, [r5, #-0]
20000530:	40020c00 	andmi	r0, r2, r0, lsl #24
20000534:	40020c04 	andmi	r0, r2, r4, lsl #24
20000538:	40020c0c 	andmi	r0, r2, ip, lsl #24

2000053c <delay250ns>:

void delay250ns(void)
{
2000053c:	b580      	push	{r7, lr}
2000053e:	af00      	add	r7, sp, #0
    *STK_CTRL   = 0;
20000540:	4b0c      	ldr	r3, [pc, #48]	; (20000574 <delay250ns+0x38>)
20000542:	2200      	movs	r2, #0
20000544:	601a      	str	r2, [r3, #0]
    *STK_LOAD   = (168/4)-1;   // minst 500 ns
20000546:	4b0c      	ldr	r3, [pc, #48]	; (20000578 <delay250ns+0x3c>)
20000548:	2229      	movs	r2, #41	; 0x29
2000054a:	601a      	str	r2, [r3, #0]
    *STK_VAL    = 0;
2000054c:	4b0b      	ldr	r3, [pc, #44]	; (2000057c <delay250ns+0x40>)
2000054e:	2200      	movs	r2, #0
20000550:	601a      	str	r2, [r3, #0]
    *STK_CTRL   = 5;
20000552:	4b08      	ldr	r3, [pc, #32]	; (20000574 <delay250ns+0x38>)
20000554:	2205      	movs	r2, #5
20000556:	601a      	str	r2, [r3, #0]
    while((* STK_CTRL & 0x10000) == 0) ;
20000558:	46c0      	nop			; (mov r8, r8)
2000055a:	4b06      	ldr	r3, [pc, #24]	; (20000574 <delay250ns+0x38>)
2000055c:	681a      	ldr	r2, [r3, #0]
2000055e:	2380      	movs	r3, #128	; 0x80
20000560:	025b      	lsls	r3, r3, #9
20000562:	4013      	ands	r3, r2
20000564:	d0f9      	beq.n	2000055a <delay250ns+0x1e>
    *STK_CTRL   = 0;
20000566:	4b03      	ldr	r3, [pc, #12]	; (20000574 <delay250ns+0x38>)
20000568:	2200      	movs	r2, #0
2000056a:	601a      	str	r2, [r3, #0]
}
2000056c:	46c0      	nop			; (mov r8, r8)
2000056e:	46bd      	mov	sp, r7
20000570:	bd80      	pop	{r7, pc}
20000572:	46c0      	nop			; (mov r8, r8)
20000574:	e000e010 	and	lr, r0, r0, lsl r0
20000578:	e000e014 	and	lr, r0, r4, lsl r0
2000057c:	e000e018 	and	lr, r0, r8, lsl r0

20000580 <delay_500ns>:

void delay_500ns(void)
{
20000580:	b580      	push	{r7, lr}
20000582:	af00      	add	r7, sp, #0
    delay250ns();
20000584:	f7ff ffda 	bl	2000053c <delay250ns>
    delay250ns();
20000588:	f7ff ffd8 	bl	2000053c <delay250ns>
}
2000058c:	46c0      	nop			; (mov r8, r8)
2000058e:	46bd      	mov	sp, r7
20000590:	bd80      	pop	{r7, pc}

20000592 <delay_mikro>:

void delay_mikro(unsigned int us)
{
20000592:	b580      	push	{r7, lr}
20000594:	b082      	sub	sp, #8
20000596:	af00      	add	r7, sp, #0
20000598:	6078      	str	r0, [r7, #4]
//#ifdef   SIMULATOR
    //us = us / 1000;
    //us++;
//#endif
    while(us < 0){
2000059a:	46c0      	nop			; (mov r8, r8)
            delay250ns();
            delay250ns();
            us--;
        }
    }
}
2000059c:	46c0      	nop			; (mov r8, r8)
2000059e:	46bd      	mov	sp, r7
200005a0:	b002      	add	sp, #8
200005a2:	bd80      	pop	{r7, pc}

200005a4 <delay_milli>:

void delay_milli(unsigned ms)
{
200005a4:	b580      	push	{r7, lr}
200005a6:	b082      	sub	sp, #8
200005a8:	af00      	add	r7, sp, #0
200005aa:	6078      	str	r0, [r7, #4]
//#ifdef  SIMULATOR
    //ms = ms/1000;
    //ms++;
//#endif
    while(ms > 0){
200005ac:	e00a      	b.n	200005c4 <delay_milli+0x20>
        {
            delay_mikro(1);
200005ae:	2001      	movs	r0, #1
200005b0:	f7ff ffef 	bl	20000592 <delay_mikro>
            delay_mikro(1000);
200005b4:	23fa      	movs	r3, #250	; 0xfa
200005b6:	009b      	lsls	r3, r3, #2
200005b8:	0018      	movs	r0, r3
200005ba:	f7ff ffea 	bl	20000592 <delay_mikro>
            ms--;
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	3b01      	subs	r3, #1
200005c2:	607b      	str	r3, [r7, #4]
    while(ms > 0){
200005c4:	687b      	ldr	r3, [r7, #4]
200005c6:	2b00      	cmp	r3, #0
200005c8:	d1f1      	bne.n	200005ae <delay_milli+0xa>
            
        }
    }
}
200005ca:	46c0      	nop			; (mov r8, r8)
200005cc:	46bd      	mov	sp, r7
200005ce:	b002      	add	sp, #8
200005d0:	bd80      	pop	{r7, pc}

200005d2 <graphic_ctrl_bit_set>:


static void graphic_ctrl_bit_set( unsigned char x ) 
{ 
200005d2:	b580      	push	{r7, lr}
200005d4:	b082      	sub	sp, #8
200005d6:	af00      	add	r7, sp, #0
200005d8:	0002      	movs	r2, r0
200005da:	1dfb      	adds	r3, r7, #7
200005dc:	701a      	strb	r2, [r3, #0]
    *portOdrLow |= ( ~B_SELECT & x );
200005de:	4909      	ldr	r1, [pc, #36]	; (20000604 <graphic_ctrl_bit_set+0x32>)
200005e0:	4b08      	ldr	r3, [pc, #32]	; (20000604 <graphic_ctrl_bit_set+0x32>)
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	b2db      	uxtb	r3, r3
200005e6:	b25a      	sxtb	r2, r3
200005e8:	1dfb      	adds	r3, r7, #7
200005ea:	781b      	ldrb	r3, [r3, #0]
200005ec:	b25b      	sxtb	r3, r3
200005ee:	2004      	movs	r0, #4
200005f0:	4383      	bics	r3, r0
200005f2:	b25b      	sxtb	r3, r3
200005f4:	4313      	orrs	r3, r2
200005f6:	b25b      	sxtb	r3, r3
200005f8:	b2db      	uxtb	r3, r3
200005fa:	700b      	strb	r3, [r1, #0]
 } 
200005fc:	46c0      	nop			; (mov r8, r8)
200005fe:	46bd      	mov	sp, r7
20000600:	b002      	add	sp, #8
20000602:	bd80      	pop	{r7, pc}
20000604:	40021014 	andmi	r1, r2, r4, lsl r0

20000608 <graphic_ctrl_bit_clear>:
static void graphic_ctrl_bit_clear( unsigned char x ) 
{ 
20000608:	b580      	push	{r7, lr}
2000060a:	b082      	sub	sp, #8
2000060c:	af00      	add	r7, sp, #0
2000060e:	0002      	movs	r2, r0
20000610:	1dfb      	adds	r3, r7, #7
20000612:	701a      	strb	r2, [r3, #0]
    *portOdrLow &= ( ~B_SELECT & ~x ); 
20000614:	4908      	ldr	r1, [pc, #32]	; (20000638 <graphic_ctrl_bit_clear+0x30>)
20000616:	4b08      	ldr	r3, [pc, #32]	; (20000638 <graphic_ctrl_bit_clear+0x30>)
20000618:	781b      	ldrb	r3, [r3, #0]
2000061a:	b2db      	uxtb	r3, r3
2000061c:	1dfa      	adds	r2, r7, #7
2000061e:	7812      	ldrb	r2, [r2, #0]
20000620:	43d2      	mvns	r2, r2
20000622:	b2d2      	uxtb	r2, r2
20000624:	4013      	ands	r3, r2
20000626:	b2db      	uxtb	r3, r3
20000628:	2204      	movs	r2, #4
2000062a:	4393      	bics	r3, r2
2000062c:	b2db      	uxtb	r3, r3
2000062e:	700b      	strb	r3, [r1, #0]
}
20000630:	46c0      	nop			; (mov r8, r8)
20000632:	46bd      	mov	sp, r7
20000634:	b002      	add	sp, #8
20000636:	bd80      	pop	{r7, pc}
20000638:	40021014 	andmi	r1, r2, r4, lsl r0

2000063c <select_controller>:

static void select_controller(unsigned char controller) 
{ 
2000063c:	b580      	push	{r7, lr}
2000063e:	b082      	sub	sp, #8
20000640:	af00      	add	r7, sp, #0
20000642:	0002      	movs	r2, r0
20000644:	1dfb      	adds	r3, r7, #7
20000646:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000648:	1dfb      	adds	r3, r7, #7
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	2b08      	cmp	r3, #8
2000064e:	d00c      	beq.n	2000066a <select_controller+0x2e>
20000650:	dc02      	bgt.n	20000658 <select_controller+0x1c>
20000652:	2b00      	cmp	r3, #0
20000654:	d005      	beq.n	20000662 <select_controller+0x26>
        case 0: graphic_ctrl_bit_clear(B_CS1|B_CS2);  break; 
        case B_CS1 : graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break; 
        case B_CS2 : graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1);  break; 
        case B_CS1|B_CS2 : graphic_ctrl_bit_set(B_CS1|B_CS2);  break; 
    }
} 
20000656:	e01a      	b.n	2000068e <select_controller+0x52>
    switch(controller){
20000658:	2b10      	cmp	r3, #16
2000065a:	d00d      	beq.n	20000678 <select_controller+0x3c>
2000065c:	2b18      	cmp	r3, #24
2000065e:	d012      	beq.n	20000686 <select_controller+0x4a>
} 
20000660:	e015      	b.n	2000068e <select_controller+0x52>
        case 0: graphic_ctrl_bit_clear(B_CS1|B_CS2);  break; 
20000662:	2018      	movs	r0, #24
20000664:	f7ff ffd0 	bl	20000608 <graphic_ctrl_bit_clear>
20000668:	e011      	b.n	2000068e <select_controller+0x52>
        case B_CS1 : graphic_ctrl_bit_set(B_CS1); graphic_ctrl_bit_clear(B_CS2); break; 
2000066a:	2008      	movs	r0, #8
2000066c:	f7ff ffb1 	bl	200005d2 <graphic_ctrl_bit_set>
20000670:	2010      	movs	r0, #16
20000672:	f7ff ffc9 	bl	20000608 <graphic_ctrl_bit_clear>
20000676:	e00a      	b.n	2000068e <select_controller+0x52>
        case B_CS2 : graphic_ctrl_bit_set(B_CS2); graphic_ctrl_bit_clear(B_CS1);  break; 
20000678:	2010      	movs	r0, #16
2000067a:	f7ff ffaa 	bl	200005d2 <graphic_ctrl_bit_set>
2000067e:	2008      	movs	r0, #8
20000680:	f7ff ffc2 	bl	20000608 <graphic_ctrl_bit_clear>
20000684:	e003      	b.n	2000068e <select_controller+0x52>
        case B_CS1|B_CS2 : graphic_ctrl_bit_set(B_CS1|B_CS2);  break; 
20000686:	2018      	movs	r0, #24
20000688:	f7ff ffa3 	bl	200005d2 <graphic_ctrl_bit_set>
2000068c:	46c0      	nop			; (mov r8, r8)
} 
2000068e:	46c0      	nop			; (mov r8, r8)
20000690:	46bd      	mov	sp, r7
20000692:	b002      	add	sp, #8
20000694:	bd80      	pop	{r7, pc}

20000696 <graphic_wait_ready>:

static void graphic_wait_ready(void) 
{ 
20000696:	b580      	push	{r7, lr}
20000698:	b082      	sub	sp, #8
2000069a:	af00      	add	r7, sp, #0
    unsigned char c;
    
    graphic_ctrl_bit_clear( B_E ); 
2000069c:	2040      	movs	r0, #64	; 0x40
2000069e:	f7ff ffb3 	bl	20000608 <graphic_ctrl_bit_clear>
    *portModer= 0x00005555; /* b15-8 are inputs, b7-0 are outputs */ 
200006a2:	4b16      	ldr	r3, [pc, #88]	; (200006fc <graphic_wait_ready+0x66>)
200006a4:	4a16      	ldr	r2, [pc, #88]	; (20000700 <graphic_wait_ready+0x6a>)
200006a6:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear( B_DI ); 
200006a8:	2001      	movs	r0, #1
200006aa:	f7ff ffad 	bl	20000608 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set( B_RW ); 
200006ae:	2002      	movs	r0, #2
200006b0:	f7ff ff8f 	bl	200005d2 <graphic_ctrl_bit_set>
    delay_500ns();
200006b4:	f7ff ff64 	bl	20000580 <delay_500ns>
    
    while( 1 ) 
    { 
        graphic_ctrl_bit_set( B_E ); 
200006b8:	2040      	movs	r0, #64	; 0x40
200006ba:	f7ff ff8a 	bl	200005d2 <graphic_ctrl_bit_set>
        delay_500ns(); 
200006be:	f7ff ff5f 	bl	20000580 <delay_500ns>
        c = *portIdrHigh & 0x80; 
200006c2:	4b10      	ldr	r3, [pc, #64]	; (20000704 <graphic_wait_ready+0x6e>)
200006c4:	781b      	ldrb	r3, [r3, #0]
200006c6:	b2da      	uxtb	r2, r3
200006c8:	1dfb      	adds	r3, r7, #7
200006ca:	217f      	movs	r1, #127	; 0x7f
200006cc:	438a      	bics	r2, r1
200006ce:	701a      	strb	r2, [r3, #0]
        if( c == 0 )break; 
200006d0:	1dfb      	adds	r3, r7, #7
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	2b00      	cmp	r3, #0
200006d6:	d005      	beq.n	200006e4 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_clear( B_E ); 
200006d8:	2040      	movs	r0, #64	; 0x40
200006da:	f7ff ff95 	bl	20000608 <graphic_ctrl_bit_clear>
        delay_500ns(); 
200006de:	f7ff ff4f 	bl	20000580 <delay_500ns>
        graphic_ctrl_bit_set( B_E ); 
200006e2:	e7e9      	b.n	200006b8 <graphic_wait_ready+0x22>
        if( c == 0 )break; 
200006e4:	46c0      	nop			; (mov r8, r8)
    } 
    *portModer= 0x55555555; /* all bits outputs */ 
200006e6:	4b05      	ldr	r3, [pc, #20]	; (200006fc <graphic_wait_ready+0x66>)
200006e8:	4a07      	ldr	r2, [pc, #28]	; (20000708 <graphic_wait_ready+0x72>)
200006ea:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set( B_E );
200006ec:	2040      	movs	r0, #64	; 0x40
200006ee:	f7ff ff70 	bl	200005d2 <graphic_ctrl_bit_set>
}
200006f2:	46c0      	nop			; (mov r8, r8)
200006f4:	46bd      	mov	sp, r7
200006f6:	b002      	add	sp, #8
200006f8:	bd80      	pop	{r7, pc}
200006fa:	46c0      	nop			; (mov r8, r8)
200006fc:	40021000 	andmi	r1, r2, r0
20000700:	00005555 	andeq	r5, r0, r5, asr r5
20000704:	40021011 	andmi	r1, r2, r1, lsl r0
20000708:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000070c <display_read>:

static unsigned char  display_read(unsigned char controller) 
{ 
2000070c:	b580      	push	{r7, lr}
2000070e:	b084      	sub	sp, #16
20000710:	af00      	add	r7, sp, #0
20000712:	0002      	movs	r2, r0
20000714:	1dfb      	adds	r3, r7, #7
20000716:	701a      	strb	r2, [r3, #0]
    unsigned char c; 
    *portModer= 0x00005555; /* b15-8 are inputs, 7-0 are outputs */ 
20000718:	4b1d      	ldr	r3, [pc, #116]	; (20000790 <display_read+0x84>)
2000071a:	4a1e      	ldr	r2, [pc, #120]	; (20000794 <display_read+0x88>)
2000071c:	601a      	str	r2, [r3, #0]
    select_controller( controller );
2000071e:	1dfb      	adds	r3, r7, #7
20000720:	781b      	ldrb	r3, [r3, #0]
20000722:	0018      	movs	r0, r3
20000724:	f7ff ff8a 	bl	2000063c <select_controller>

    graphic_ctrl_bit_clear( B_E ); 
20000728:	2040      	movs	r0, #64	; 0x40
2000072a:	f7ff ff6d 	bl	20000608 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set( B_DI | B_RW ); 
2000072e:	2003      	movs	r0, #3
20000730:	f7ff ff4f 	bl	200005d2 <graphic_ctrl_bit_set>
    delay_500ns(); 
20000734:	f7ff ff24 	bl	20000580 <delay_500ns>
    graphic_ctrl_bit_set( B_E ); 
20000738:	2040      	movs	r0, #64	; 0x40
2000073a:	f7ff ff4a 	bl	200005d2 <graphic_ctrl_bit_set>
    delay_500ns(); 
2000073e:	f7ff ff1f 	bl	20000580 <delay_500ns>
    c = *portIdrHigh;
20000742:	4a15      	ldr	r2, [pc, #84]	; (20000798 <display_read+0x8c>)
20000744:	230f      	movs	r3, #15
20000746:	18fb      	adds	r3, r7, r3
20000748:	7812      	ldrb	r2, [r2, #0]
2000074a:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear( B_E ); 
2000074c:	2040      	movs	r0, #64	; 0x40
2000074e:	f7ff ff5b 	bl	20000608 <graphic_ctrl_bit_clear>
    *portModer= 0x55555555; /* all bits outputs */
20000752:	4b0f      	ldr	r3, [pc, #60]	; (20000790 <display_read+0x84>)
20000754:	4a11      	ldr	r2, [pc, #68]	; (2000079c <display_read+0x90>)
20000756:	601a      	str	r2, [r3, #0]
    
    if( controller & B_CS1 ) 
20000758:	1dfb      	adds	r3, r7, #7
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	2208      	movs	r2, #8
2000075e:	4013      	ands	r3, r2
20000760:	d004      	beq.n	2000076c <display_read+0x60>
    { 
        select_controller( B_CS1); 
20000762:	2008      	movs	r0, #8
20000764:	f7ff ff6a 	bl	2000063c <select_controller>
        graphic_wait_ready(); 
20000768:	f7ff ff95 	bl	20000696 <graphic_wait_ready>
    } 
    if( controller & B_CS2 ) 
2000076c:	1dfb      	adds	r3, r7, #7
2000076e:	781b      	ldrb	r3, [r3, #0]
20000770:	2210      	movs	r2, #16
20000772:	4013      	ands	r3, r2
20000774:	d004      	beq.n	20000780 <display_read+0x74>
    { 
        select_controller( B_CS2); 
20000776:	2010      	movs	r0, #16
20000778:	f7ff ff60 	bl	2000063c <select_controller>
        graphic_wait_ready(); 
2000077c:	f7ff ff8b 	bl	20000696 <graphic_wait_ready>
    } 
    return c; 
20000780:	230f      	movs	r3, #15
20000782:	18fb      	adds	r3, r7, r3
20000784:	781b      	ldrb	r3, [r3, #0]
}
20000786:	0018      	movs	r0, r3
20000788:	46bd      	mov	sp, r7
2000078a:	b004      	add	sp, #16
2000078c:	bd80      	pop	{r7, pc}
2000078e:	46c0      	nop			; (mov r8, r8)
20000790:	40021000 	andmi	r1, r2, r0
20000794:	00005555 	andeq	r5, r0, r5, asr r5
20000798:	40021011 	andmi	r1, r2, r1, lsl r0
2000079c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007a0 <graphic_write>:

static void graphic_write(unsigned char val, unsigned char controller) 
{ 
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	0002      	movs	r2, r0
200007a8:	1dfb      	adds	r3, r7, #7
200007aa:	701a      	strb	r2, [r3, #0]
200007ac:	1dbb      	adds	r3, r7, #6
200007ae:	1c0a      	adds	r2, r1, #0
200007b0:	701a      	strb	r2, [r3, #0]
    *portOdrHigh= val; 
200007b2:	4a1a      	ldr	r2, [pc, #104]	; (2000081c <graphic_write+0x7c>)
200007b4:	1dfb      	adds	r3, r7, #7
200007b6:	781b      	ldrb	r3, [r3, #0]
200007b8:	7013      	strb	r3, [r2, #0]
    select_controller( controller ); 
200007ba:	1dbb      	adds	r3, r7, #6
200007bc:	781b      	ldrb	r3, [r3, #0]
200007be:	0018      	movs	r0, r3
200007c0:	f7ff ff3c 	bl	2000063c <select_controller>
    delay_500ns(); 
200007c4:	f7ff fedc 	bl	20000580 <delay_500ns>
    graphic_ctrl_bit_set( B_E ); 
200007c8:	2040      	movs	r0, #64	; 0x40
200007ca:	f7ff ff02 	bl	200005d2 <graphic_ctrl_bit_set>
    delay_500ns(); 
200007ce:	f7ff fed7 	bl	20000580 <delay_500ns>
    graphic_ctrl_bit_clear( B_E ); 
200007d2:	2040      	movs	r0, #64	; 0x40
200007d4:	f7ff ff18 	bl	20000608 <graphic_ctrl_bit_clear>
    if( controller & B_CS1 ) 
200007d8:	1dbb      	adds	r3, r7, #6
200007da:	781b      	ldrb	r3, [r3, #0]
200007dc:	2208      	movs	r2, #8
200007de:	4013      	ands	r3, r2
200007e0:	d004      	beq.n	200007ec <graphic_write+0x4c>
        { 
            select_controller( B_CS1); 
200007e2:	2008      	movs	r0, #8
200007e4:	f7ff ff2a 	bl	2000063c <select_controller>
            graphic_wait_ready(); 
200007e8:	f7ff ff55 	bl	20000696 <graphic_wait_ready>
        } 
    if( controller & B_CS2 ) 
200007ec:	1dbb      	adds	r3, r7, #6
200007ee:	781b      	ldrb	r3, [r3, #0]
200007f0:	2210      	movs	r2, #16
200007f2:	4013      	ands	r3, r2
200007f4:	d004      	beq.n	20000800 <graphic_write+0x60>
        { 
            select_controller( B_CS2); 
200007f6:	2010      	movs	r0, #16
200007f8:	f7ff ff20 	bl	2000063c <select_controller>
            graphic_wait_ready(); 
200007fc:	f7ff ff4b 	bl	20000696 <graphic_wait_ready>
        }

    *portOdrHigh = 0; 
20000800:	4b06      	ldr	r3, [pc, #24]	; (2000081c <graphic_write+0x7c>)
20000802:	2200      	movs	r2, #0
20000804:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_set( B_E ); 
20000806:	2040      	movs	r0, #64	; 0x40
20000808:	f7ff fee3 	bl	200005d2 <graphic_ctrl_bit_set>
    select_controller( 0 );
2000080c:	2000      	movs	r0, #0
2000080e:	f7ff ff15 	bl	2000063c <select_controller>
}
20000812:	46c0      	nop			; (mov r8, r8)
20000814:	46bd      	mov	sp, r7
20000816:	b002      	add	sp, #8
20000818:	bd80      	pop	{r7, pc}
2000081a:	46c0      	nop			; (mov r8, r8)
2000081c:	40021015 	andmi	r1, r2, r5, lsl r0

20000820 <graphic_writeCommand>:

static void graphic_writeCommand(unsigned char commandToWrite, unsigned char controller) 
{ 
20000820:	b580      	push	{r7, lr}
20000822:	b082      	sub	sp, #8
20000824:	af00      	add	r7, sp, #0
20000826:	0002      	movs	r2, r0
20000828:	1dfb      	adds	r3, r7, #7
2000082a:	701a      	strb	r2, [r3, #0]
2000082c:	1dbb      	adds	r3, r7, #6
2000082e:	1c0a      	adds	r2, r1, #0
20000830:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear( B_E ); 
20000832:	2040      	movs	r0, #64	; 0x40
20000834:	f7ff fee8 	bl	20000608 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_clear( B_DI | B_RW ); 
20000838:	2003      	movs	r0, #3
2000083a:	f7ff fee5 	bl	20000608 <graphic_ctrl_bit_clear>
    graphic_write(commandToWrite, controller); 
2000083e:	1dbb      	adds	r3, r7, #6
20000840:	781a      	ldrb	r2, [r3, #0]
20000842:	1dfb      	adds	r3, r7, #7
20000844:	781b      	ldrb	r3, [r3, #0]
20000846:	0011      	movs	r1, r2
20000848:	0018      	movs	r0, r3
2000084a:	f7ff ffa9 	bl	200007a0 <graphic_write>
}
2000084e:	46c0      	nop			; (mov r8, r8)
20000850:	46bd      	mov	sp, r7
20000852:	b002      	add	sp, #8
20000854:	bd80      	pop	{r7, pc}

20000856 <graphic_writeData>:
static void graphic_writeData(unsigned char data, unsigned char controller) 
{ 
20000856:	b580      	push	{r7, lr}
20000858:	b082      	sub	sp, #8
2000085a:	af00      	add	r7, sp, #0
2000085c:	0002      	movs	r2, r0
2000085e:	1dfb      	adds	r3, r7, #7
20000860:	701a      	strb	r2, [r3, #0]
20000862:	1dbb      	adds	r3, r7, #6
20000864:	1c0a      	adds	r2, r1, #0
20000866:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear( B_E ); 
20000868:	2040      	movs	r0, #64	; 0x40
2000086a:	f7ff fecd 	bl	20000608 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set( B_DI ); 
2000086e:	2001      	movs	r0, #1
20000870:	f7ff feaf 	bl	200005d2 <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear( B_RW ); 
20000874:	2002      	movs	r0, #2
20000876:	f7ff fec7 	bl	20000608 <graphic_ctrl_bit_clear>
    graphic_write(data, controller); 
2000087a:	1dbb      	adds	r3, r7, #6
2000087c:	781a      	ldrb	r2, [r3, #0]
2000087e:	1dfb      	adds	r3, r7, #7
20000880:	781b      	ldrb	r3, [r3, #0]
20000882:	0011      	movs	r1, r2
20000884:	0018      	movs	r0, r3
20000886:	f7ff ff8b 	bl	200007a0 <graphic_write>
}
2000088a:	46c0      	nop			; (mov r8, r8)
2000088c:	46bd      	mov	sp, r7
2000088e:	b002      	add	sp, #8
20000890:	bd80      	pop	{r7, pc}

20000892 <graphic_initalize>:

void graphic_initalize(void) 
{ 
20000892:	b580      	push	{r7, lr}
20000894:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set( B_E ); 
20000896:	2040      	movs	r0, #64	; 0x40
20000898:	f7ff fe9b 	bl	200005d2 <graphic_ctrl_bit_set>
    delay_mikro(10);
2000089c:	200a      	movs	r0, #10
2000089e:	f7ff fe78 	bl	20000592 <delay_mikro>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);  
200008a2:	2078      	movs	r0, #120	; 0x78
200008a4:	f7ff feb0 	bl	20000608 <graphic_ctrl_bit_clear>
    delay_milli( 30 ); 
200008a8:	201e      	movs	r0, #30
200008aa:	f7ff fe7b 	bl	200005a4 <delay_milli>
    graphic_ctrl_bit_set(B_RST); 
200008ae:	2020      	movs	r0, #32
200008b0:	f7ff fe8f 	bl	200005d2 <graphic_ctrl_bit_set>
    graphic_writeCommand(LCD_OFF, B_CS1|B_CS2); 
200008b4:	2118      	movs	r1, #24
200008b6:	203e      	movs	r0, #62	; 0x3e
200008b8:	f7ff ffb2 	bl	20000820 <graphic_writeCommand>
    graphic_writeCommand(LCD_ON, B_CS1|B_CS2); 
200008bc:	2118      	movs	r1, #24
200008be:	203f      	movs	r0, #63	; 0x3f
200008c0:	f7ff ffae 	bl	20000820 <graphic_writeCommand>
    graphic_writeCommand(LCD_DISP_START, B_CS1|B_CS2); 
200008c4:	2118      	movs	r1, #24
200008c6:	20c0      	movs	r0, #192	; 0xc0
200008c8:	f7ff ffaa 	bl	20000820 <graphic_writeCommand>
    graphic_writeCommand(LCD_SET_ADD, B_CS1|B_CS2); 
200008cc:	2118      	movs	r1, #24
200008ce:	2040      	movs	r0, #64	; 0x40
200008d0:	f7ff ffa6 	bl	20000820 <graphic_writeCommand>
    graphic_writeCommand(LCD_SET_PAGE, B_CS1|B_CS2); 
200008d4:	2118      	movs	r1, #24
200008d6:	20b8      	movs	r0, #184	; 0xb8
200008d8:	f7ff ffa2 	bl	20000820 <graphic_writeCommand>
    select_controller(0);
200008dc:	2000      	movs	r0, #0
200008de:	f7ff fead 	bl	2000063c <select_controller>
}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	46bd      	mov	sp, r7
200008e6:	bd80      	pop	{r7, pc}

200008e8 <graphic_clearScreen>:

void graphic_clearScreen(void) 
{ 
200008e8:	b580      	push	{r7, lr}
200008ea:	b082      	sub	sp, #8
200008ec:	af00      	add	r7, sp, #0
    unsigned char i, j; 
    for(j = 0; j < 8; j++) 
200008ee:	1dbb      	adds	r3, r7, #6
200008f0:	2200      	movs	r2, #0
200008f2:	701a      	strb	r2, [r3, #0]
200008f4:	e023      	b.n	2000093e <graphic_clearScreen+0x56>
    { 
        graphic_writeCommand(LCD_SET_PAGE | j, B_CS1|B_CS2 ); 
200008f6:	1dbb      	adds	r3, r7, #6
200008f8:	781b      	ldrb	r3, [r3, #0]
200008fa:	2248      	movs	r2, #72	; 0x48
200008fc:	4252      	negs	r2, r2
200008fe:	4313      	orrs	r3, r2
20000900:	b2db      	uxtb	r3, r3
20000902:	2118      	movs	r1, #24
20000904:	0018      	movs	r0, r3
20000906:	f7ff ff8b 	bl	20000820 <graphic_writeCommand>
        graphic_writeCommand(LCD_SET_ADD | 0, B_CS1|B_CS2 ); 
2000090a:	2118      	movs	r1, #24
2000090c:	2040      	movs	r0, #64	; 0x40
2000090e:	f7ff ff87 	bl	20000820 <graphic_writeCommand>
        for(i = 0; i <= 63; i++)
20000912:	1dfb      	adds	r3, r7, #7
20000914:	2200      	movs	r2, #0
20000916:	701a      	strb	r2, [r3, #0]
20000918:	e008      	b.n	2000092c <graphic_clearScreen+0x44>
        {
            graphic_writeData(0,  B_CS1|B_CS2); 
2000091a:	2118      	movs	r1, #24
2000091c:	2000      	movs	r0, #0
2000091e:	f7ff ff9a 	bl	20000856 <graphic_writeData>
        for(i = 0; i <= 63; i++)
20000922:	1dfb      	adds	r3, r7, #7
20000924:	781a      	ldrb	r2, [r3, #0]
20000926:	1dfb      	adds	r3, r7, #7
20000928:	3201      	adds	r2, #1
2000092a:	701a      	strb	r2, [r3, #0]
2000092c:	1dfb      	adds	r3, r7, #7
2000092e:	781b      	ldrb	r3, [r3, #0]
20000930:	2b3f      	cmp	r3, #63	; 0x3f
20000932:	d9f2      	bls.n	2000091a <graphic_clearScreen+0x32>
    for(j = 0; j < 8; j++) 
20000934:	1dbb      	adds	r3, r7, #6
20000936:	781a      	ldrb	r2, [r3, #0]
20000938:	1dbb      	adds	r3, r7, #6
2000093a:	3201      	adds	r2, #1
2000093c:	701a      	strb	r2, [r3, #0]
2000093e:	1dbb      	adds	r3, r7, #6
20000940:	781b      	ldrb	r3, [r3, #0]
20000942:	2b07      	cmp	r3, #7
20000944:	d9d7      	bls.n	200008f6 <graphic_clearScreen+0xe>
        } 
    } 
}
20000946:	46c0      	nop			; (mov r8, r8)
20000948:	46bd      	mov	sp, r7
2000094a:	b002      	add	sp, #8
2000094c:	bd80      	pop	{r7, pc}

2000094e <graphic_read>:

static unsigned char graphic_read(unsigned char controller)
{ 
2000094e:	b580      	push	{r7, lr}
20000950:	b082      	sub	sp, #8
20000952:	af00      	add	r7, sp, #0
20000954:	0002      	movs	r2, r0
20000956:	1dfb      	adds	r3, r7, #7
20000958:	701a      	strb	r2, [r3, #0]
    display_read(controller);
2000095a:	1dfb      	adds	r3, r7, #7
2000095c:	781b      	ldrb	r3, [r3, #0]
2000095e:	0018      	movs	r0, r3
20000960:	f7ff fed4 	bl	2000070c <display_read>
    return display_read(controller);
20000964:	1dfb      	adds	r3, r7, #7
20000966:	781b      	ldrb	r3, [r3, #0]
20000968:	0018      	movs	r0, r3
2000096a:	f7ff fecf 	bl	2000070c <display_read>
2000096e:	0003      	movs	r3, r0
}
20000970:	0018      	movs	r0, r3
20000972:	46bd      	mov	sp, r7
20000974:	b002      	add	sp, #8
20000976:	bd80      	pop	{r7, pc}

20000978 <pixel>:

void pixel( int x, int y, int set ) 
{ 
20000978:	b590      	push	{r4, r7, lr}
2000097a:	b089      	sub	sp, #36	; 0x24
2000097c:	af00      	add	r7, sp, #0
2000097e:	60f8      	str	r0, [r7, #12]
20000980:	60b9      	str	r1, [r7, #8]
20000982:	607a      	str	r2, [r7, #4]
    unsigned char mask,c, controller; 
    int index;

    if( (x > 128 ) || (y > 64) ) 
20000984:	68fb      	ldr	r3, [r7, #12]
20000986:	2b80      	cmp	r3, #128	; 0x80
20000988:	dd00      	ble.n	2000098c <pixel+0x14>
2000098a:	e0b8      	b.n	20000afe <pixel+0x186>
2000098c:	68bb      	ldr	r3, [r7, #8]
2000098e:	2b40      	cmp	r3, #64	; 0x40
20000990:	dd00      	ble.n	20000994 <pixel+0x1c>
20000992:	e0b4      	b.n	20000afe <pixel+0x186>
        return;

	index = (y-1)/8;
20000994:	68bb      	ldr	r3, [r7, #8]
20000996:	3b01      	subs	r3, #1
20000998:	2b00      	cmp	r3, #0
2000099a:	da00      	bge.n	2000099e <pixel+0x26>
2000099c:	3307      	adds	r3, #7
2000099e:	10db      	asrs	r3, r3, #3
200009a0:	61bb      	str	r3, [r7, #24]
	switch((y-1)%8) {
200009a2:	68bb      	ldr	r3, [r7, #8]
200009a4:	3b01      	subs	r3, #1
200009a6:	4a58      	ldr	r2, [pc, #352]	; (20000b08 <pixel+0x190>)
200009a8:	4013      	ands	r3, r2
200009aa:	d504      	bpl.n	200009b6 <pixel+0x3e>
200009ac:	3b01      	subs	r3, #1
200009ae:	2208      	movs	r2, #8
200009b0:	4252      	negs	r2, r2
200009b2:	4313      	orrs	r3, r2
200009b4:	3301      	adds	r3, #1
200009b6:	2b07      	cmp	r3, #7
200009b8:	d82c      	bhi.n	20000a14 <pixel+0x9c>
200009ba:	009a      	lsls	r2, r3, #2
200009bc:	4b53      	ldr	r3, [pc, #332]	; (20000b0c <pixel+0x194>)
200009be:	18d3      	adds	r3, r2, r3
200009c0:	681b      	ldr	r3, [r3, #0]
200009c2:	469f      	mov	pc, r3
		case 0: mask = 0x01; break;
200009c4:	231f      	movs	r3, #31
200009c6:	18fb      	adds	r3, r7, r3
200009c8:	2201      	movs	r2, #1
200009ca:	701a      	strb	r2, [r3, #0]
200009cc:	e022      	b.n	20000a14 <pixel+0x9c>
		case 1: mask = 0x02; break;
200009ce:	231f      	movs	r3, #31
200009d0:	18fb      	adds	r3, r7, r3
200009d2:	2202      	movs	r2, #2
200009d4:	701a      	strb	r2, [r3, #0]
200009d6:	e01d      	b.n	20000a14 <pixel+0x9c>
		case 2: mask = 0x04; break;
200009d8:	231f      	movs	r3, #31
200009da:	18fb      	adds	r3, r7, r3
200009dc:	2204      	movs	r2, #4
200009de:	701a      	strb	r2, [r3, #0]
200009e0:	e018      	b.n	20000a14 <pixel+0x9c>
		case 3: mask = 0x08; break;
200009e2:	231f      	movs	r3, #31
200009e4:	18fb      	adds	r3, r7, r3
200009e6:	2208      	movs	r2, #8
200009e8:	701a      	strb	r2, [r3, #0]
200009ea:	e013      	b.n	20000a14 <pixel+0x9c>
		case 4: mask = 0x10; break;
200009ec:	231f      	movs	r3, #31
200009ee:	18fb      	adds	r3, r7, r3
200009f0:	2210      	movs	r2, #16
200009f2:	701a      	strb	r2, [r3, #0]
200009f4:	e00e      	b.n	20000a14 <pixel+0x9c>
		case 5: mask = 0x20; break;
200009f6:	231f      	movs	r3, #31
200009f8:	18fb      	adds	r3, r7, r3
200009fa:	2220      	movs	r2, #32
200009fc:	701a      	strb	r2, [r3, #0]
200009fe:	e009      	b.n	20000a14 <pixel+0x9c>
		case 6: mask = 0x40; break;
20000a00:	231f      	movs	r3, #31
20000a02:	18fb      	adds	r3, r7, r3
20000a04:	2240      	movs	r2, #64	; 0x40
20000a06:	701a      	strb	r2, [r3, #0]
20000a08:	e004      	b.n	20000a14 <pixel+0x9c>
		case 7: mask = 0x80; break;
20000a0a:	231f      	movs	r3, #31
20000a0c:	18fb      	adds	r3, r7, r3
20000a0e:	2280      	movs	r2, #128	; 0x80
20000a10:	701a      	strb	r2, [r3, #0]
20000a12:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set==0){
20000a14:	687b      	ldr	r3, [r7, #4]
20000a16:	2b00      	cmp	r3, #0
20000a18:	d106      	bne.n	20000a28 <pixel+0xb0>
		mask = ~mask;
20000a1a:	231f      	movs	r3, #31
20000a1c:	18fb      	adds	r3, r7, r3
20000a1e:	221f      	movs	r2, #31
20000a20:	18ba      	adds	r2, r7, r2
20000a22:	7812      	ldrb	r2, [r2, #0]
20000a24:	43d2      	mvns	r2, r2
20000a26:	701a      	strb	r2, [r3, #0]
	}
    
	if(x > 64){ 
20000a28:	68fb      	ldr	r3, [r7, #12]
20000a2a:	2b40      	cmp	r3, #64	; 0x40
20000a2c:	dd07      	ble.n	20000a3e <pixel+0xc6>
        controller = B_CS2; 
20000a2e:	231e      	movs	r3, #30
20000a30:	18fb      	adds	r3, r7, r3
20000a32:	2210      	movs	r2, #16
20000a34:	701a      	strb	r2, [r3, #0]
        x = x -65; 
20000a36:	68fb      	ldr	r3, [r7, #12]
20000a38:	3b41      	subs	r3, #65	; 0x41
20000a3a:	60fb      	str	r3, [r7, #12]
20000a3c:	e006      	b.n	20000a4c <pixel+0xd4>
    } else{
        controller = B_CS1; x = x-1; 
20000a3e:	231e      	movs	r3, #30
20000a40:	18fb      	adds	r3, r7, r3
20000a42:	2208      	movs	r2, #8
20000a44:	701a      	strb	r2, [r3, #0]
20000a46:	68fb      	ldr	r3, [r7, #12]
20000a48:	3b01      	subs	r3, #1
20000a4a:	60fb      	str	r3, [r7, #12]
    }
    graphic_writeCommand(LCD_SET_ADD | x, controller ); 
20000a4c:	68fb      	ldr	r3, [r7, #12]
20000a4e:	b25b      	sxtb	r3, r3
20000a50:	2240      	movs	r2, #64	; 0x40
20000a52:	4313      	orrs	r3, r2
20000a54:	b25b      	sxtb	r3, r3
20000a56:	b2da      	uxtb	r2, r3
20000a58:	231e      	movs	r3, #30
20000a5a:	18fb      	adds	r3, r7, r3
20000a5c:	781b      	ldrb	r3, [r3, #0]
20000a5e:	0019      	movs	r1, r3
20000a60:	0010      	movs	r0, r2
20000a62:	f7ff fedd 	bl	20000820 <graphic_writeCommand>
    graphic_writeCommand(LCD_SET_PAGE | index, controller ); 
20000a66:	69bb      	ldr	r3, [r7, #24]
20000a68:	b25b      	sxtb	r3, r3
20000a6a:	2248      	movs	r2, #72	; 0x48
20000a6c:	4252      	negs	r2, r2
20000a6e:	4313      	orrs	r3, r2
20000a70:	b25b      	sxtb	r3, r3
20000a72:	b2da      	uxtb	r2, r3
20000a74:	231e      	movs	r3, #30
20000a76:	18fb      	adds	r3, r7, r3
20000a78:	781b      	ldrb	r3, [r3, #0]
20000a7a:	0019      	movs	r1, r3
20000a7c:	0010      	movs	r0, r2
20000a7e:	f7ff fecf 	bl	20000820 <graphic_writeCommand>
    c = graphic_read( controller ); 
20000a82:	2317      	movs	r3, #23
20000a84:	18fc      	adds	r4, r7, r3
20000a86:	231e      	movs	r3, #30
20000a88:	18fb      	adds	r3, r7, r3
20000a8a:	781b      	ldrb	r3, [r3, #0]
20000a8c:	0018      	movs	r0, r3
20000a8e:	f7ff ff5e 	bl	2000094e <graphic_read>
20000a92:	0003      	movs	r3, r0
20000a94:	7023      	strb	r3, [r4, #0]
    graphic_writeCommand(LCD_SET_ADD | x, controller ); 
20000a96:	68fb      	ldr	r3, [r7, #12]
20000a98:	b25b      	sxtb	r3, r3
20000a9a:	2240      	movs	r2, #64	; 0x40
20000a9c:	4313      	orrs	r3, r2
20000a9e:	b25b      	sxtb	r3, r3
20000aa0:	b2da      	uxtb	r2, r3
20000aa2:	231e      	movs	r3, #30
20000aa4:	18fb      	adds	r3, r7, r3
20000aa6:	781b      	ldrb	r3, [r3, #0]
20000aa8:	0019      	movs	r1, r3
20000aaa:	0010      	movs	r0, r2
20000aac:	f7ff feb8 	bl	20000820 <graphic_writeCommand>
    if( set ) mask = mask | c; 
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	2b00      	cmp	r3, #0
20000ab4:	d00a      	beq.n	20000acc <pixel+0x154>
20000ab6:	231f      	movs	r3, #31
20000ab8:	18fb      	adds	r3, r7, r3
20000aba:	221f      	movs	r2, #31
20000abc:	18b9      	adds	r1, r7, r2
20000abe:	2217      	movs	r2, #23
20000ac0:	18ba      	adds	r2, r7, r2
20000ac2:	7809      	ldrb	r1, [r1, #0]
20000ac4:	7812      	ldrb	r2, [r2, #0]
20000ac6:	430a      	orrs	r2, r1
20000ac8:	701a      	strb	r2, [r3, #0]
20000aca:	e009      	b.n	20000ae0 <pixel+0x168>
    else mask = mask & c; 
20000acc:	231f      	movs	r3, #31
20000ace:	18fb      	adds	r3, r7, r3
20000ad0:	221f      	movs	r2, #31
20000ad2:	18ba      	adds	r2, r7, r2
20000ad4:	2117      	movs	r1, #23
20000ad6:	1879      	adds	r1, r7, r1
20000ad8:	7812      	ldrb	r2, [r2, #0]
20000ada:	7809      	ldrb	r1, [r1, #0]
20000adc:	400a      	ands	r2, r1
20000ade:	701a      	strb	r2, [r3, #0]
    graphic_writeData( mask, controller); 
20000ae0:	231e      	movs	r3, #30
20000ae2:	18fb      	adds	r3, r7, r3
20000ae4:	781a      	ldrb	r2, [r3, #0]
20000ae6:	231f      	movs	r3, #31
20000ae8:	18fb      	adds	r3, r7, r3
20000aea:	781b      	ldrb	r3, [r3, #0]
20000aec:	0011      	movs	r1, r2
20000aee:	0018      	movs	r0, r3
20000af0:	f7ff feb1 	bl	20000856 <graphic_writeData>
	
    graphic_writeCommand(LCD_ON, B_CS1|B_CS2);
20000af4:	2118      	movs	r1, #24
20000af6:	203f      	movs	r0, #63	; 0x3f
20000af8:	f7ff fe92 	bl	20000820 <graphic_writeCommand>
20000afc:	e000      	b.n	20000b00 <pixel+0x188>
        return;
20000afe:	46c0      	nop			; (mov r8, r8)
}
20000b00:	46bd      	mov	sp, r7
20000b02:	b009      	add	sp, #36	; 0x24
20000b04:	bd90      	pop	{r4, r7, pc}
20000b06:	46c0      	nop			; (mov r8, r8)
20000b08:	80000007 	andhi	r0, r0, r7
20000b0c:	20001150 	andcs	r1, r0, r0, asr r1

20000b10 <ascii_ctrl_bit_set>:

/*ASCII SHIT*/
void ascii_ctrl_bit_set( unsigned char x )
{
20000b10:	b580      	push	{r7, lr}
20000b12:	b084      	sub	sp, #16
20000b14:	af00      	add	r7, sp, #0
20000b16:	0002      	movs	r2, r0
20000b18:	1dfb      	adds	r3, r7, #7
20000b1a:	701a      	strb	r2, [r3, #0]
    unsigned char c;
    c = *portOdrLow;
20000b1c:	4a0c      	ldr	r2, [pc, #48]	; (20000b50 <ascii_ctrl_bit_set+0x40>)
20000b1e:	230f      	movs	r3, #15
20000b20:	18fb      	adds	r3, r7, r3
20000b22:	7812      	ldrb	r2, [r2, #0]
20000b24:	701a      	strb	r2, [r3, #0]
    c |=  (B_SELECT | x);
20000b26:	1dfa      	adds	r2, r7, #7
20000b28:	230f      	movs	r3, #15
20000b2a:	18fb      	adds	r3, r7, r3
20000b2c:	7812      	ldrb	r2, [r2, #0]
20000b2e:	781b      	ldrb	r3, [r3, #0]
20000b30:	4313      	orrs	r3, r2
20000b32:	b2da      	uxtb	r2, r3
20000b34:	230f      	movs	r3, #15
20000b36:	18fb      	adds	r3, r7, r3
20000b38:	2104      	movs	r1, #4
20000b3a:	430a      	orrs	r2, r1
20000b3c:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000b3e:	4a04      	ldr	r2, [pc, #16]	; (20000b50 <ascii_ctrl_bit_set+0x40>)
20000b40:	230f      	movs	r3, #15
20000b42:	18fb      	adds	r3, r7, r3
20000b44:	781b      	ldrb	r3, [r3, #0]
20000b46:	7013      	strb	r3, [r2, #0]
}
20000b48:	46c0      	nop			; (mov r8, r8)
20000b4a:	46bd      	mov	sp, r7
20000b4c:	b004      	add	sp, #16
20000b4e:	bd80      	pop	{r7, pc}
20000b50:	40021014 	andmi	r1, r2, r4, lsl r0

20000b54 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x)
{
20000b54:	b580      	push	{r7, lr}
20000b56:	b084      	sub	sp, #16
20000b58:	af00      	add	r7, sp, #0
20000b5a:	0002      	movs	r2, r0
20000b5c:	1dfb      	adds	r3, r7, #7
20000b5e:	701a      	strb	r2, [r3, #0]
    unsigned char  c;
    c = *portOdrLow;
20000b60:	4a0f      	ldr	r2, [pc, #60]	; (20000ba0 <ascii_ctrl_bit_clear+0x4c>)
20000b62:	230f      	movs	r3, #15
20000b64:	18fb      	adds	r3, r7, r3
20000b66:	7812      	ldrb	r2, [r2, #0]
20000b68:	701a      	strb	r2, [r3, #0]
    c &= (B_SELECT | ~x);
20000b6a:	1dfb      	adds	r3, r7, #7
20000b6c:	781b      	ldrb	r3, [r3, #0]
20000b6e:	b25b      	sxtb	r3, r3
20000b70:	43db      	mvns	r3, r3
20000b72:	b25b      	sxtb	r3, r3
20000b74:	2204      	movs	r2, #4
20000b76:	4313      	orrs	r3, r2
20000b78:	b25b      	sxtb	r3, r3
20000b7a:	220f      	movs	r2, #15
20000b7c:	18ba      	adds	r2, r7, r2
20000b7e:	7812      	ldrb	r2, [r2, #0]
20000b80:	b252      	sxtb	r2, r2
20000b82:	4013      	ands	r3, r2
20000b84:	b25a      	sxtb	r2, r3
20000b86:	230f      	movs	r3, #15
20000b88:	18fb      	adds	r3, r7, r3
20000b8a:	701a      	strb	r2, [r3, #0]
    *portOdrLow = c;
20000b8c:	4a04      	ldr	r2, [pc, #16]	; (20000ba0 <ascii_ctrl_bit_clear+0x4c>)
20000b8e:	230f      	movs	r3, #15
20000b90:	18fb      	adds	r3, r7, r3
20000b92:	781b      	ldrb	r3, [r3, #0]
20000b94:	7013      	strb	r3, [r2, #0]
}
20000b96:	46c0      	nop			; (mov r8, r8)
20000b98:	46bd      	mov	sp, r7
20000b9a:	b004      	add	sp, #16
20000b9c:	bd80      	pop	{r7, pc}
20000b9e:	46c0      	nop			; (mov r8, r8)
20000ba0:	40021014 	andmi	r1, r2, r4, lsl r0

20000ba4 <ascii_write_controller>:

void ascii_write_controller( unsigned char c)
{
20000ba4:	b580      	push	{r7, lr}
20000ba6:	b082      	sub	sp, #8
20000ba8:	af00      	add	r7, sp, #0
20000baa:	0002      	movs	r2, r0
20000bac:	1dfb      	adds	r3, r7, #7
20000bae:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_set(B_E);      // E = 1
20000bb0:	2040      	movs	r0, #64	; 0x40
20000bb2:	f7ff ffad 	bl	20000b10 <ascii_ctrl_bit_set>
    *portOdrHigh = c;
20000bb6:	4a06      	ldr	r2, [pc, #24]	; (20000bd0 <ascii_write_controller+0x2c>)
20000bb8:	1dfb      	adds	r3, r7, #7
20000bba:	781b      	ldrb	r3, [r3, #0]
20000bbc:	7013      	strb	r3, [r2, #0]
    ascii_ctrl_bit_clear(B_E);    // E = 0
20000bbe:	2040      	movs	r0, #64	; 0x40
20000bc0:	f7ff ffc8 	bl	20000b54 <ascii_ctrl_bit_clear>
    delay250ns();
20000bc4:	f7ff fcba 	bl	2000053c <delay250ns>
}
20000bc8:	46c0      	nop			; (mov r8, r8)
20000bca:	46bd      	mov	sp, r7
20000bcc:	b002      	add	sp, #8
20000bce:	bd80      	pop	{r7, pc}
20000bd0:	40021015 	andmi	r1, r2, r5, lsl r0

20000bd4 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char c)
{
20000bd4:	b580      	push	{r7, lr}
20000bd6:	b082      	sub	sp, #8
20000bd8:	af00      	add	r7, sp, #0
20000bda:	0002      	movs	r2, r0
20000bdc:	1dfb      	adds	r3, r7, #7
20000bde:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_DI | B_RW);    // "|" = bitvis eller
20000be0:	2003      	movs	r0, #3
20000be2:	f7ff ffb7 	bl	20000b54 <ascii_ctrl_bit_clear>
    ascii_write_controller(c);
20000be6:	1dfb      	adds	r3, r7, #7
20000be8:	781b      	ldrb	r3, [r3, #0]
20000bea:	0018      	movs	r0, r3
20000bec:	f7ff ffda 	bl	20000ba4 <ascii_write_controller>
}
20000bf0:	46c0      	nop			; (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b002      	add	sp, #8
20000bf6:	bd80      	pop	{r7, pc}

20000bf8 <ascii_write_data>:


void ascii_write_data(unsigned char c)
{
20000bf8:	b580      	push	{r7, lr}
20000bfa:	b082      	sub	sp, #8
20000bfc:	af00      	add	r7, sp, #0
20000bfe:	0002      	movs	r2, r0
20000c00:	1dfb      	adds	r3, r7, #7
20000c02:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_RW);
20000c04:	2002      	movs	r0, #2
20000c06:	f7ff ffa5 	bl	20000b54 <ascii_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_DI);
20000c0a:	2001      	movs	r0, #1
20000c0c:	f7ff ff80 	bl	20000b10 <ascii_ctrl_bit_set>
    ascii_write_controller(c);
20000c10:	1dfb      	adds	r3, r7, #7
20000c12:	781b      	ldrb	r3, [r3, #0]
20000c14:	0018      	movs	r0, r3
20000c16:	f7ff ffc5 	bl	20000ba4 <ascii_write_controller>
}
20000c1a:	46c0      	nop			; (mov r8, r8)
20000c1c:	46bd      	mov	sp, r7
20000c1e:	b002      	add	sp, #8
20000c20:	bd80      	pop	{r7, pc}

20000c22 <ascii_read_controller>:

unsigned char ascii_read_controller(void)
{
20000c22:	b580      	push	{r7, lr}
20000c24:	b082      	sub	sp, #8
20000c26:	af00      	add	r7, sp, #0
    unsigned char c;
    ascii_ctrl_bit_set(B_E);
20000c28:	2040      	movs	r0, #64	; 0x40
20000c2a:	f7ff ff71 	bl	20000b10 <ascii_ctrl_bit_set>
    delay250ns();
20000c2e:	f7ff fc85 	bl	2000053c <delay250ns>
    delay250ns();
20000c32:	f7ff fc83 	bl	2000053c <delay250ns>
    c = *portIdrHigh;
20000c36:	4a06      	ldr	r2, [pc, #24]	; (20000c50 <ascii_read_controller+0x2e>)
20000c38:	1dfb      	adds	r3, r7, #7
20000c3a:	7812      	ldrb	r2, [r2, #0]
20000c3c:	701a      	strb	r2, [r3, #0]
    ascii_ctrl_bit_clear(B_E);
20000c3e:	2040      	movs	r0, #64	; 0x40
20000c40:	f7ff ff88 	bl	20000b54 <ascii_ctrl_bit_clear>
    return c;
20000c44:	1dfb      	adds	r3, r7, #7
20000c46:	781b      	ldrb	r3, [r3, #0]
}
20000c48:	0018      	movs	r0, r3
20000c4a:	46bd      	mov	sp, r7
20000c4c:	b002      	add	sp, #8
20000c4e:	bd80      	pop	{r7, pc}
20000c50:	40021011 	andmi	r1, r2, r1, lsl r0

20000c54 <ascii_read_status>:

unsigned char ascii_read_status(void)
{
20000c54:	b590      	push	{r4, r7, lr}
20000c56:	b083      	sub	sp, #12
20000c58:	af00      	add	r7, sp, #0
    unsigned char c;
    *portModer = 0x00005555;
20000c5a:	4b0b      	ldr	r3, [pc, #44]	; (20000c88 <ascii_read_status+0x34>)
20000c5c:	4a0b      	ldr	r2, [pc, #44]	; (20000c8c <ascii_read_status+0x38>)
20000c5e:	601a      	str	r2, [r3, #0]
    ascii_ctrl_bit_set(B_RW);
20000c60:	2002      	movs	r0, #2
20000c62:	f7ff ff55 	bl	20000b10 <ascii_ctrl_bit_set>
    ascii_ctrl_bit_clear(B_DI);
20000c66:	2001      	movs	r0, #1
20000c68:	f7ff ff74 	bl	20000b54 <ascii_ctrl_bit_clear>
    c = ascii_read_controller();
20000c6c:	1dfc      	adds	r4, r7, #7
20000c6e:	f7ff ffd8 	bl	20000c22 <ascii_read_controller>
20000c72:	0003      	movs	r3, r0
20000c74:	7023      	strb	r3, [r4, #0]
    *portModer = 0x55555555;
20000c76:	4b04      	ldr	r3, [pc, #16]	; (20000c88 <ascii_read_status+0x34>)
20000c78:	4a05      	ldr	r2, [pc, #20]	; (20000c90 <ascii_read_status+0x3c>)
20000c7a:	601a      	str	r2, [r3, #0]
    return c;
20000c7c:	1dfb      	adds	r3, r7, #7
20000c7e:	781b      	ldrb	r3, [r3, #0]
}
20000c80:	0018      	movs	r0, r3
20000c82:	46bd      	mov	sp, r7
20000c84:	b003      	add	sp, #12
20000c86:	bd90      	pop	{r4, r7, pc}
20000c88:	40021000 	andmi	r1, r2, r0
20000c8c:	00005555 	andeq	r5, r0, r5, asr r5
20000c90:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c94 <ascii_wait_ready>:

void ascii_wait_ready( void )
{
20000c94:	b580      	push	{r7, lr}
20000c96:	af00      	add	r7, sp, #0
    while( ( ascii_read_status() & 0x80) == 0x80) ;
20000c98:	46c0      	nop			; (mov r8, r8)
20000c9a:	f7ff ffdb 	bl	20000c54 <ascii_read_status>
20000c9e:	0003      	movs	r3, r0
20000ca0:	001a      	movs	r2, r3
20000ca2:	2380      	movs	r3, #128	; 0x80
20000ca4:	4013      	ands	r3, r2
20000ca6:	2b80      	cmp	r3, #128	; 0x80
20000ca8:	d0f7      	beq.n	20000c9a <ascii_wait_ready+0x6>
    delay_mikro(8);
20000caa:	2008      	movs	r0, #8
20000cac:	f7ff fc71 	bl	20000592 <delay_mikro>
}
20000cb0:	46c0      	nop			; (mov r8, r8)
20000cb2:	46bd      	mov	sp, r7
20000cb4:	bd80      	pop	{r7, pc}

20000cb6 <ascii_write_char>:

void ascii_write_char(unsigned char c)
{
20000cb6:	b580      	push	{r7, lr}
20000cb8:	b082      	sub	sp, #8
20000cba:	af00      	add	r7, sp, #0
20000cbc:	0002      	movs	r2, r0
20000cbe:	1dfb      	adds	r3, r7, #7
20000cc0:	701a      	strb	r2, [r3, #0]
    ascii_wait_ready();
20000cc2:	f7ff ffe7 	bl	20000c94 <ascii_wait_ready>
    ascii_write_data(c);
20000cc6:	1dfb      	adds	r3, r7, #7
20000cc8:	781b      	ldrb	r3, [r3, #0]
20000cca:	0018      	movs	r0, r3
20000ccc:	f7ff ff94 	bl	20000bf8 <ascii_write_data>
    delay_mikro(39);
20000cd0:	2027      	movs	r0, #39	; 0x27
20000cd2:	f7ff fc5e 	bl	20000592 <delay_mikro>
    
}
20000cd6:	46c0      	nop			; (mov r8, r8)
20000cd8:	46bd      	mov	sp, r7
20000cda:	b002      	add	sp, #8
20000cdc:	bd80      	pop	{r7, pc}

20000cde <ascii_init>:

void ascii_init(void)
{
20000cde:	b580      	push	{r7, lr}
20000ce0:	af00      	add	r7, sp, #0
    ascii_wait_ready();
20000ce2:	f7ff ffd7 	bl	20000c94 <ascii_wait_ready>
    ascii_write_cmd( 0x0C);    /*display on*/
20000ce6:	200c      	movs	r0, #12
20000ce8:	f7ff ff74 	bl	20000bd4 <ascii_write_cmd>
    delay_mikro(39);
20000cec:	2027      	movs	r0, #39	; 0x27
20000cee:	f7ff fc50 	bl	20000592 <delay_mikro>
    ascii_wait_ready();
20000cf2:	f7ff ffcf 	bl	20000c94 <ascii_wait_ready>
    ascii_write_cmd( 0x38);    /*function set*/
20000cf6:	2038      	movs	r0, #56	; 0x38
20000cf8:	f7ff ff6c 	bl	20000bd4 <ascii_write_cmd>
    delay_mikro(39);
20000cfc:	2027      	movs	r0, #39	; 0x27
20000cfe:	f7ff fc48 	bl	20000592 <delay_mikro>
    ascii_wait_ready();
20000d02:	f7ff ffc7 	bl	20000c94 <ascii_wait_ready>
    ascii_write_cmd( 1 );    /*clear display*/
20000d06:	2001      	movs	r0, #1
20000d08:	f7ff ff64 	bl	20000bd4 <ascii_write_cmd>
    delay_milli(2);
20000d0c:	2002      	movs	r0, #2
20000d0e:	f7ff fc49 	bl	200005a4 <delay_milli>
    ascii_wait_ready();
20000d12:	f7ff ffbf 	bl	20000c94 <ascii_wait_ready>
    ascii_write_cmd( 6 );    /*entry mode set*/
20000d16:	2006      	movs	r0, #6
20000d18:	f7ff ff5c 	bl	20000bd4 <ascii_write_cmd>
    delay_mikro(39);
20000d1c:	2027      	movs	r0, #39	; 0x27
20000d1e:	f7ff fc38 	bl	20000592 <delay_mikro>
}
20000d22:	46c0      	nop			; (mov r8, r8)
20000d24:	46bd      	mov	sp, r7
20000d26:	bd80      	pop	{r7, pc}

20000d28 <ascii_gotoxy>:

void ascii_gotoxy( unsigned char x, unsigned char y)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	b084      	sub	sp, #16
20000d2c:	af00      	add	r7, sp, #0
20000d2e:	0002      	movs	r2, r0
20000d30:	1dfb      	adds	r3, r7, #7
20000d32:	701a      	strb	r2, [r3, #0]
20000d34:	1dbb      	adds	r3, r7, #6
20000d36:	1c0a      	adds	r2, r1, #0
20000d38:	701a      	strb	r2, [r3, #0]
    ascii_wait_ready();
20000d3a:	f7ff ffab 	bl	20000c94 <ascii_wait_ready>
    unsigned char address;
    if(y != 1){
20000d3e:	1dbb      	adds	r3, r7, #6
20000d40:	781b      	ldrb	r3, [r3, #0]
20000d42:	2b01      	cmp	r3, #1
20000d44:	d00b      	beq.n	20000d5e <ascii_gotoxy+0x36>
        address = 0x40 | (x-1);
20000d46:	1dfb      	adds	r3, r7, #7
20000d48:	781b      	ldrb	r3, [r3, #0]
20000d4a:	3b01      	subs	r3, #1
20000d4c:	b2db      	uxtb	r3, r3
20000d4e:	b25b      	sxtb	r3, r3
20000d50:	2240      	movs	r2, #64	; 0x40
20000d52:	4313      	orrs	r3, r2
20000d54:	b25a      	sxtb	r2, r3
20000d56:	230f      	movs	r3, #15
20000d58:	18fb      	adds	r3, r7, r3
20000d5a:	701a      	strb	r2, [r3, #0]
20000d5c:	e005      	b.n	20000d6a <ascii_gotoxy+0x42>
    }
    else{
        address = x-1;
20000d5e:	230f      	movs	r3, #15
20000d60:	18fb      	adds	r3, r7, r3
20000d62:	1dfa      	adds	r2, r7, #7
20000d64:	7812      	ldrb	r2, [r2, #0]
20000d66:	3a01      	subs	r2, #1
20000d68:	701a      	strb	r2, [r3, #0]
    }
    
    ascii_write_cmd ( 0x80 | address);
20000d6a:	230f      	movs	r3, #15
20000d6c:	18fb      	adds	r3, r7, r3
20000d6e:	781b      	ldrb	r3, [r3, #0]
20000d70:	2280      	movs	r2, #128	; 0x80
20000d72:	4252      	negs	r2, r2
20000d74:	4313      	orrs	r3, r2
20000d76:	b2db      	uxtb	r3, r3
20000d78:	0018      	movs	r0, r3
20000d7a:	f7ff ff2b 	bl	20000bd4 <ascii_write_cmd>
}
20000d7e:	46c0      	nop			; (mov r8, r8)
20000d80:	46bd      	mov	sp, r7
20000d82:	b004      	add	sp, #16
20000d84:	bd80      	pop	{r7, pc}

20000d86 <activateRow>:

/*Eventuella hjälprutiner*/
void activateRow ( unsigned int adress, unsigned int row )
{
20000d86:	b580      	push	{r7, lr}
20000d88:	b084      	sub	sp, #16
20000d8a:	af00      	add	r7, sp, #0
20000d8c:	6078      	str	r0, [r7, #4]
20000d8e:	6039      	str	r1, [r7, #0]
	unsigned char bitmask = (0x10 << row);
20000d90:	2210      	movs	r2, #16
20000d92:	683b      	ldr	r3, [r7, #0]
20000d94:	409a      	lsls	r2, r3
20000d96:	230f      	movs	r3, #15
20000d98:	18fb      	adds	r3, r7, r3
20000d9a:	701a      	strb	r2, [r3, #0]
	*( (unsigned char *) adress) = bitmask;
20000d9c:	687b      	ldr	r3, [r7, #4]
20000d9e:	220f      	movs	r2, #15
20000da0:	18ba      	adds	r2, r7, r2
20000da2:	7812      	ldrb	r2, [r2, #0]
20000da4:	701a      	strb	r2, [r3, #0]
}
20000da6:	46c0      	nop			; (mov r8, r8)
20000da8:	46bd      	mov	sp, r7
20000daa:	b004      	add	sp, #16
20000dac:	bd80      	pop	{r7, pc}

20000dae <checkValues>:

int checkValues(unsigned int adress)
{
20000dae:	b580      	push	{r7, lr}
20000db0:	b084      	sub	sp, #16
20000db2:	af00      	add	r7, sp, #0
20000db4:	6078      	str	r0, [r7, #4]
	 unsigned char colsValue = *((unsigned char *) adress);
20000db6:	687a      	ldr	r2, [r7, #4]
20000db8:	230f      	movs	r3, #15
20000dba:	18fb      	adds	r3, r7, r3
20000dbc:	7812      	ldrb	r2, [r2, #0]
20000dbe:	701a      	strb	r2, [r3, #0]
	 colsValue &= 0x0F;
20000dc0:	230f      	movs	r3, #15
20000dc2:	18fb      	adds	r3, r7, r3
20000dc4:	220f      	movs	r2, #15
20000dc6:	18ba      	adds	r2, r7, r2
20000dc8:	7812      	ldrb	r2, [r2, #0]
20000dca:	210f      	movs	r1, #15
20000dcc:	400a      	ands	r2, r1
20000dce:	701a      	strb	r2, [r3, #0]
	 switch(colsValue) {
20000dd0:	230f      	movs	r3, #15
20000dd2:	18fb      	adds	r3, r7, r3
20000dd4:	781b      	ldrb	r3, [r3, #0]
20000dd6:	2b02      	cmp	r3, #2
20000dd8:	d00a      	beq.n	20000df0 <checkValues+0x42>
20000dda:	dc02      	bgt.n	20000de2 <checkValues+0x34>
20000ddc:	2b01      	cmp	r3, #1
20000dde:	d005      	beq.n	20000dec <checkValues+0x3e>
20000de0:	e00c      	b.n	20000dfc <checkValues+0x4e>
20000de2:	2b04      	cmp	r3, #4
20000de4:	d006      	beq.n	20000df4 <checkValues+0x46>
20000de6:	2b08      	cmp	r3, #8
20000de8:	d006      	beq.n	20000df8 <checkValues+0x4a>
20000dea:	e007      	b.n	20000dfc <checkValues+0x4e>
		 case 1: return 1;
20000dec:	2301      	movs	r3, #1
20000dee:	e006      	b.n	20000dfe <checkValues+0x50>
		 case 2: return 2;
20000df0:	2302      	movs	r3, #2
20000df2:	e004      	b.n	20000dfe <checkValues+0x50>
		 case 4: return 3;
20000df4:	2303      	movs	r3, #3
20000df6:	e002      	b.n	20000dfe <checkValues+0x50>
		 case 8: return 4;
20000df8:	2304      	movs	r3, #4
20000dfa:	e000      	b.n	20000dfe <checkValues+0x50>
		 default: return 0;
20000dfc:	2300      	movs	r3, #0
	 }
}
20000dfe:	0018      	movs	r0, r3
20000e00:	46bd      	mov	sp, r7
20000e02:	b004      	add	sp, #16
20000e04:	bd80      	pop	{r7, pc}

20000e06 <keyb>:

unsigned char keyb ( unsigned int inadress, unsigned int outadress )
{
20000e06:	b590      	push	{r4, r7, lr}
20000e08:	b089      	sub	sp, #36	; 0x24
20000e0a:	af00      	add	r7, sp, #0
20000e0c:	6078      	str	r0, [r7, #4]
20000e0e:	6039      	str	r1, [r7, #0]
	unsigned char keys[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0,0,0,0xD};
20000e10:	2308      	movs	r3, #8
20000e12:	18fb      	adds	r3, r7, r3
20000e14:	4a15      	ldr	r2, [pc, #84]	; (20000e6c <keyb+0x66>)
20000e16:	ca13      	ldmia	r2!, {r0, r1, r4}
20000e18:	c313      	stmia	r3!, {r0, r1, r4}
20000e1a:	6812      	ldr	r2, [r2, #0]
20000e1c:	601a      	str	r2, [r3, #0]
    for (int row = 0; row <= 3; row++)
20000e1e:	2300      	movs	r3, #0
20000e20:	61fb      	str	r3, [r7, #28]
20000e22:	e01a      	b.n	20000e5a <keyb+0x54>
    {
        activateRow(outadress, row);
20000e24:	69fa      	ldr	r2, [r7, #28]
20000e26:	683b      	ldr	r3, [r7, #0]
20000e28:	0011      	movs	r1, r2
20000e2a:	0018      	movs	r0, r3
20000e2c:	f7ff ffab 	bl	20000d86 <activateRow>
        int col = checkValues(inadress);
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	0018      	movs	r0, r3
20000e34:	f7ff ffbb 	bl	20000dae <checkValues>
20000e38:	0003      	movs	r3, r0
20000e3a:	61bb      	str	r3, [r7, #24]
        if(col != 0)
20000e3c:	69bb      	ldr	r3, [r7, #24]
20000e3e:	2b00      	cmp	r3, #0
20000e40:	d008      	beq.n	20000e54 <keyb+0x4e>
        {
            return keys[(col + (row * 4) - 1)];
20000e42:	69fb      	ldr	r3, [r7, #28]
20000e44:	009a      	lsls	r2, r3, #2
20000e46:	69bb      	ldr	r3, [r7, #24]
20000e48:	18d3      	adds	r3, r2, r3
20000e4a:	3b01      	subs	r3, #1
20000e4c:	2208      	movs	r2, #8
20000e4e:	18ba      	adds	r2, r7, r2
20000e50:	5cd3      	ldrb	r3, [r2, r3]
20000e52:	e006      	b.n	20000e62 <keyb+0x5c>
    for (int row = 0; row <= 3; row++)
20000e54:	69fb      	ldr	r3, [r7, #28]
20000e56:	3301      	adds	r3, #1
20000e58:	61fb      	str	r3, [r7, #28]
20000e5a:	69fb      	ldr	r3, [r7, #28]
20000e5c:	2b03      	cmp	r3, #3
20000e5e:	dde1      	ble.n	20000e24 <keyb+0x1e>
        }
    }
    return 0xFF;
20000e60:	23ff      	movs	r3, #255	; 0xff
}
20000e62:	0018      	movs	r0, r3
20000e64:	46bd      	mov	sp, r7
20000e66:	b009      	add	sp, #36	; 0x24
20000e68:	bd90      	pop	{r4, r7, pc}
20000e6a:	46c0      	nop			; (mov r8, r8)
20000e6c:	20001170 	andcs	r1, r0, r0, ror r1

20000e70 <checkForGoals>:

void checkForGoals(PPONGBALL o){
20000e70:	b580      	push	{r7, lr}
20000e72:	b082      	sub	sp, #8
20000e74:	af00      	add	r7, sp, #0
20000e76:	6078      	str	r0, [r7, #4]
	if ((o->pos_x_inbounds(o, 0) == 1)){
20000e78:	687b      	ldr	r3, [r7, #4]
20000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000e7c:	687a      	ldr	r2, [r7, #4]
20000e7e:	2100      	movs	r1, #0
20000e80:	0010      	movs	r0, r2
20000e82:	4798      	blx	r3
20000e84:	0003      	movs	r3, r0
20000e86:	2b01      	cmp	r3, #1
20000e88:	d10c      	bne.n	20000ea4 <checkForGoals+0x34>
		p2_score++;
20000e8a:	4b13      	ldr	r3, [pc, #76]	; (20000ed8 <checkForGoals+0x68>)
20000e8c:	781b      	ldrb	r3, [r3, #0]
20000e8e:	3301      	adds	r3, #1
20000e90:	b2da      	uxtb	r2, r3
20000e92:	4b11      	ldr	r3, [pc, #68]	; (20000ed8 <checkForGoals+0x68>)
20000e94:	701a      	strb	r2, [r3, #0]
		resetBallPosition(o);
20000e96:	687b      	ldr	r3, [r7, #4]
20000e98:	0018      	movs	r0, r3
20000e9a:	f000 f821 	bl	20000ee0 <resetBallPosition>
		writeScore();
20000e9e:	f000 f837 	bl	20000f10 <writeScore>
	} else if ((o->pos_x_inbounds(o, 128) == 1)){
		p1_score++;
		resetBallPosition(o);
		writeScore();
	}
}
20000ea2:	e014      	b.n	20000ece <checkForGoals+0x5e>
	} else if ((o->pos_x_inbounds(o, 128) == 1)){
20000ea4:	687b      	ldr	r3, [r7, #4]
20000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000ea8:	687a      	ldr	r2, [r7, #4]
20000eaa:	2180      	movs	r1, #128	; 0x80
20000eac:	0010      	movs	r0, r2
20000eae:	4798      	blx	r3
20000eb0:	0003      	movs	r3, r0
20000eb2:	2b01      	cmp	r3, #1
20000eb4:	d10b      	bne.n	20000ece <checkForGoals+0x5e>
		p1_score++;
20000eb6:	4b09      	ldr	r3, [pc, #36]	; (20000edc <checkForGoals+0x6c>)
20000eb8:	781b      	ldrb	r3, [r3, #0]
20000eba:	3301      	adds	r3, #1
20000ebc:	b2da      	uxtb	r2, r3
20000ebe:	4b07      	ldr	r3, [pc, #28]	; (20000edc <checkForGoals+0x6c>)
20000ec0:	701a      	strb	r2, [r3, #0]
		resetBallPosition(o);
20000ec2:	687b      	ldr	r3, [r7, #4]
20000ec4:	0018      	movs	r0, r3
20000ec6:	f000 f80b 	bl	20000ee0 <resetBallPosition>
		writeScore();
20000eca:	f000 f821 	bl	20000f10 <writeScore>
}
20000ece:	46c0      	nop			; (mov r8, r8)
20000ed0:	46bd      	mov	sp, r7
20000ed2:	b002      	add	sp, #8
20000ed4:	bd80      	pop	{r7, pc}
20000ed6:	46c0      	nop			; (mov r8, r8)
20000ed8:	20001031 	andcs	r1, r0, r1, lsr r0
20000edc:	20001030 	andcs	r1, r0, r0, lsr r0

20000ee0 <resetBallPosition>:

void resetBallPosition(PPONGBALL o){
20000ee0:	b580      	push	{r7, lr}
20000ee2:	b082      	sub	sp, #8
20000ee4:	af00      	add	r7, sp, #0
20000ee6:	6078      	str	r0, [r7, #4]
	o->clear(o);
20000ee8:	687b      	ldr	r3, [r7, #4]
20000eea:	699b      	ldr	r3, [r3, #24]
20000eec:	687a      	ldr	r2, [r7, #4]
20000eee:	0010      	movs	r0, r2
20000ef0:	4798      	blx	r3
	o->posx = 64;
20000ef2:	687b      	ldr	r3, [r7, #4]
20000ef4:	2240      	movs	r2, #64	; 0x40
20000ef6:	60da      	str	r2, [r3, #12]
	o->posy = 32;
20000ef8:	687b      	ldr	r3, [r7, #4]
20000efa:	2220      	movs	r2, #32
20000efc:	611a      	str	r2, [r3, #16]
	o->draw(o);
20000efe:	687b      	ldr	r3, [r7, #4]
20000f00:	695b      	ldr	r3, [r3, #20]
20000f02:	687a      	ldr	r2, [r7, #4]
20000f04:	0010      	movs	r0, r2
20000f06:	4798      	blx	r3
}
20000f08:	46c0      	nop			; (mov r8, r8)
20000f0a:	46bd      	mov	sp, r7
20000f0c:	b002      	add	sp, #8
20000f0e:	bd80      	pop	{r7, pc}

20000f10 <writeScore>:

void writeScore(){
20000f10:	b580      	push	{r7, lr}
20000f12:	af00      	add	r7, sp, #0
	//char *s;
    //char test1[] = "0 - 0";
	ascii_gotoxy(9,1);
20000f14:	2101      	movs	r1, #1
20000f16:	2009      	movs	r0, #9
20000f18:	f7ff ff06 	bl	20000d28 <ascii_gotoxy>
	ascii_write_char( p1_score + offset );
20000f1c:	4b0e      	ldr	r3, [pc, #56]	; (20000f58 <writeScore+0x48>)
20000f1e:	781a      	ldrb	r2, [r3, #0]
20000f20:	4b0e      	ldr	r3, [pc, #56]	; (20000f5c <writeScore+0x4c>)
20000f22:	781b      	ldrb	r3, [r3, #0]
20000f24:	18d3      	adds	r3, r2, r3
20000f26:	b2db      	uxtb	r3, r3
20000f28:	0018      	movs	r0, r3
20000f2a:	f7ff fec4 	bl	20000cb6 <ascii_write_char>
	ascii_write_char( 32 );
20000f2e:	2020      	movs	r0, #32
20000f30:	f7ff fec1 	bl	20000cb6 <ascii_write_char>
	ascii_write_char( 45 );
20000f34:	202d      	movs	r0, #45	; 0x2d
20000f36:	f7ff febe 	bl	20000cb6 <ascii_write_char>
	ascii_write_char( 32 );
20000f3a:	2020      	movs	r0, #32
20000f3c:	f7ff febb 	bl	20000cb6 <ascii_write_char>
	ascii_write_char( p2_score + offset );
20000f40:	4b07      	ldr	r3, [pc, #28]	; (20000f60 <writeScore+0x50>)
20000f42:	781a      	ldrb	r2, [r3, #0]
20000f44:	4b05      	ldr	r3, [pc, #20]	; (20000f5c <writeScore+0x4c>)
20000f46:	781b      	ldrb	r3, [r3, #0]
20000f48:	18d3      	adds	r3, r2, r3
20000f4a:	b2db      	uxtb	r3, r3
20000f4c:	0018      	movs	r0, r3
20000f4e:	f7ff feb2 	bl	20000cb6 <ascii_write_char>
    /*s = test1;
    while( *s )
        ascii_write_char( *s++ );*/
}
20000f52:	46c0      	nop			; (mov r8, r8)
20000f54:	46bd      	mov	sp, r7
20000f56:	bd80      	pop	{r7, pc}
20000f58:	20001030 	andcs	r1, r0, r0, lsr r0
20000f5c:	20001034 	andcs	r1, r0, r4, lsr r0
20000f60:	20001031 	andcs	r1, r0, r1, lsr r0

20000f64 <main>:
	pos_x_racket_inbounds,
	pos_y_racket_inbounds
};

int main(void)
{
20000f64:	b590      	push	{r4, r7, lr}
20000f66:	b085      	sub	sp, #20
20000f68:	af00      	add	r7, sp, #0
	char c;
	
	init_app();
20000f6a:	f7ff fab3 	bl	200004d4 <init_app>
    ascii_init();
20000f6e:	f7ff feb6 	bl	20000cde <ascii_init>
	writeScore();
20000f72:	f7ff ffcd 	bl	20000f10 <writeScore>
	
    PPONGBALL p = &ball;
20000f76:	4b29      	ldr	r3, [pc, #164]	; (2000101c <main+0xb8>)
20000f78:	60fb      	str	r3, [r7, #12]
	PRACKET r1 = &racket_1;
20000f7a:	4b29      	ldr	r3, [pc, #164]	; (20001020 <main+0xbc>)
20000f7c:	60bb      	str	r3, [r7, #8]
	PRACKET r2 = &racket_2;
20000f7e:	4b29      	ldr	r3, [pc, #164]	; (20001024 <main+0xc0>)
20000f80:	607b      	str	r3, [r7, #4]
	
    graphic_initalize(); 
20000f82:	f7ff fc86 	bl	20000892 <graphic_initalize>
    //#ifndef SIMULATOR
        graphic_clearScreen();
20000f86:	f7ff fcaf 	bl	200008e8 <graphic_clearScreen>
    //#endif

    while( 1 ) 
    {
		checkForGoals(p);
20000f8a:	68fb      	ldr	r3, [r7, #12]
20000f8c:	0018      	movs	r0, r3
20000f8e:	f7ff ff6f 	bl	20000e70 <checkForGoals>
        p->move(p, r1, r2);
20000f92:	68fb      	ldr	r3, [r7, #12]
20000f94:	69db      	ldr	r3, [r3, #28]
20000f96:	687a      	ldr	r2, [r7, #4]
20000f98:	68b9      	ldr	r1, [r7, #8]
20000f9a:	68f8      	ldr	r0, [r7, #12]
20000f9c:	4798      	blx	r3
		r1->move(r1);
20000f9e:	68bb      	ldr	r3, [r7, #8]
20000fa0:	69db      	ldr	r3, [r3, #28]
20000fa2:	68ba      	ldr	r2, [r7, #8]
20000fa4:	0010      	movs	r0, r2
20000fa6:	4798      	blx	r3
		r2->move(r2);
20000fa8:	687b      	ldr	r3, [r7, #4]
20000faa:	69db      	ldr	r3, [r3, #28]
20000fac:	687a      	ldr	r2, [r7, #4]
20000fae:	0010      	movs	r0, r2
20000fb0:	4798      	blx	r3
        //delay_milli(100000);/* 25 frames/sec */
		c = keyb((GPIO_D_INPUT+1), (GPIO_D_OUTPUT+1));
20000fb2:	1cfc      	adds	r4, r7, #3
20000fb4:	4a1c      	ldr	r2, [pc, #112]	; (20001028 <main+0xc4>)
20000fb6:	4b1d      	ldr	r3, [pc, #116]	; (2000102c <main+0xc8>)
20000fb8:	0011      	movs	r1, r2
20000fba:	0018      	movs	r0, r3
20000fbc:	f7ff ff23 	bl	20000e06 <keyb>
20000fc0:	0003      	movs	r3, r0
20000fc2:	7023      	strb	r3, [r4, #0]
		switch (c){
20000fc4:	1cfb      	adds	r3, r7, #3
20000fc6:	781b      	ldrb	r3, [r3, #0]
20000fc8:	2b01      	cmp	r3, #1
20000fca:	d008      	beq.n	20000fde <main+0x7a>
20000fcc:	dc02      	bgt.n	20000fd4 <main+0x70>
20000fce:	2b00      	cmp	r3, #0
20000fd0:	d01c      	beq.n	2000100c <main+0xa8>
20000fd2:	e022      	b.n	2000101a <main+0xb6>
20000fd4:	2b05      	cmp	r3, #5
20000fd6:	d011      	beq.n	20000ffc <main+0x98>
20000fd8:	2b07      	cmp	r3, #7
20000fda:	d008      	beq.n	20000fee <main+0x8a>
20000fdc:	e01d      	b.n	2000101a <main+0xb6>
			case 1: r1->set_speed(r1, -2); break;
20000fde:	68bb      	ldr	r3, [r7, #8]
20000fe0:	6a1b      	ldr	r3, [r3, #32]
20000fe2:	2202      	movs	r2, #2
20000fe4:	4251      	negs	r1, r2
20000fe6:	68ba      	ldr	r2, [r7, #8]
20000fe8:	0010      	movs	r0, r2
20000fea:	4798      	blx	r3
20000fec:	e015      	b.n	2000101a <main+0xb6>
			case 7: r1->set_speed(r1, 2); break;
20000fee:	68bb      	ldr	r3, [r7, #8]
20000ff0:	6a1b      	ldr	r3, [r3, #32]
20000ff2:	68ba      	ldr	r2, [r7, #8]
20000ff4:	2102      	movs	r1, #2
20000ff6:	0010      	movs	r0, r2
20000ff8:	4798      	blx	r3
20000ffa:	e00e      	b.n	2000101a <main+0xb6>
			case 5: r2->set_speed(r2, -2); break;
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	6a1b      	ldr	r3, [r3, #32]
20001000:	2202      	movs	r2, #2
20001002:	4251      	negs	r1, r2
20001004:	687a      	ldr	r2, [r7, #4]
20001006:	0010      	movs	r0, r2
20001008:	4798      	blx	r3
2000100a:	e006      	b.n	2000101a <main+0xb6>
			case 0: r2->set_speed(r2, 2); break;
2000100c:	687b      	ldr	r3, [r7, #4]
2000100e:	6a1b      	ldr	r3, [r3, #32]
20001010:	687a      	ldr	r2, [r7, #4]
20001012:	2102      	movs	r1, #2
20001014:	0010      	movs	r0, r2
20001016:	4798      	blx	r3
20001018:	46c0      	nop			; (mov r8, r8)
		checkForGoals(p);
2000101a:	e7b6      	b.n	20000f8a <main+0x26>
2000101c:	200010c8 	andcs	r1, r0, r8, asr #1
20001020:	200010f8 	strdcs	r1, [r0], -r8
20001024:	20001124 	andcs	r1, r0, r4, lsr #2
20001028:	40020c15 	andmi	r0, r2, r5, lsl ip
2000102c:	40020c11 	andmi	r0, r2, r1, lsl ip

20001030 <p1_score>:
	...

20001031 <p2_score>:
20001031:	30000000 	andcc	r0, r0, r0

20001034 <offset>:
20001034:	00000030 	andeq	r0, r0, r0, lsr r0

20001038 <ball_geometry>:
20001038:	0000000c 	andeq	r0, r0, ip
2000103c:	00000004 	andeq	r0, r0, r4
20001040:	00000004 	andeq	r0, r0, r4
20001044:	02000100 	andeq	r0, r0, #0, 2
20001048:	01010001 	tsteq	r1, r1
2000104c:	03010201 	movweq	r0, #4609	; 0x1201
20001050:	01020002 	tsteq	r2, r2
20001054:	03020202 	movweq	r0, #8706	; 0x2202
20001058:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20001080 <rect_geometry>:
20001080:	0000001a 	andeq	r0, r0, sl, lsl r0
20001084:	00000002 	andeq	r0, r0, r2
20001088:	0000000d 	andeq	r0, r0, sp
2000108c:	00010000 	andeq	r0, r1, r0
20001090:	01010100 	mrseq	r0, (UNDEF: 17)
20001094:	02010200 	andeq	r0, r1, #0, 4
20001098:	03010300 	movweq	r0, #4864	; 0x1300
2000109c:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200010a0:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
200010a4:	06010600 	streq	r0, [r1], -r0, lsl #12
200010a8:	07010700 	streq	r0, [r1, -r0, lsl #14]
200010ac:	08010800 	stmdaeq	r1, {fp}
200010b0:	09010900 	stmdbeq	r1, {r8, fp}
200010b4:	0a010a00 	beq	200438bc <racket_2+0x42798>
200010b8:	0b010b00 	bleq	20043cc0 <racket_2+0x42b9c>
200010bc:	0c010c00 	stceq	12, cr0, [r1], {-0}
	...

200010c8 <ball>:
200010c8:	20001038 	andcs	r1, r0, r8, lsr r0
200010cc:	00000001 	andeq	r0, r0, r1
200010d0:	00000001 	andeq	r0, r0, r1
200010d4:	00000040 	andeq	r0, r0, r0, asr #32
200010d8:	00000020 	andeq	r0, r0, r0, lsr #32
200010dc:	20000251 	andcs	r0, r0, r1, asr r2
200010e0:	200002b1 			; <UNDEFINED> instruction: 0x200002b1
200010e4:	20000311 	andcs	r0, r0, r1, lsl r3
200010e8:	20000221 	andcs	r0, r0, r1, lsr #4
200010ec:	20000239 	andcs	r0, r0, r9, lsr r2
200010f0:	200003ad 	andcs	r0, r0, sp, lsr #7
200010f4:	200003e1 	andcs	r0, r0, r1, ror #7

200010f8 <racket_1>:
200010f8:	20001080 	andcs	r1, r0, r0, lsl #1
200010fc:	00000000 	andeq	r0, r0, r0
20001100:	00000001 	andeq	r0, r0, r1
20001104:	00000004 	andeq	r0, r0, r4
20001108:	00000002 	andeq	r0, r0, r2
2000110c:	20000029 	andcs	r0, r0, r9, lsr #32
20001110:	20000089 	andcs	r0, r0, r9, lsl #1
20001114:	200000e9 	andcs	r0, r0, r9, ror #1
20001118:	20000011 	andcs	r0, r0, r1, lsl r0
2000111c:	200001b9 			; <UNDEFINED> instruction: 0x200001b9
20001120:	200001ed 	andcs	r0, r0, sp, ror #3

20001124 <racket_2>:
20001124:	20001080 	andcs	r1, r0, r0, lsl #1
20001128:	00000000 	andeq	r0, r0, r0
2000112c:	00000001 	andeq	r0, r0, r1
20001130:	0000007c 	andeq	r0, r0, ip, ror r0
20001134:	00000002 	andeq	r0, r0, r2
20001138:	20000029 	andcs	r0, r0, r9, lsr #32
2000113c:	20000089 	andcs	r0, r0, r9, lsl #1
20001140:	200000e9 	andcs	r0, r0, r9, ror #1
20001144:	20000011 	andcs	r0, r0, r1, lsl r0
20001148:	200001b9 			; <UNDEFINED> instruction: 0x200001b9
2000114c:	200001ed 	andcs	r0, r0, sp, ror #3
20001150:	200009c4 	andcs	r0, r0, r4, asr #19
20001154:	200009ce 	andcs	r0, r0, lr, asr #19
20001158:	200009d8 	ldrdcs	r0, [r0], -r8
2000115c:	200009e2 	andcs	r0, r0, r2, ror #19
20001160:	200009ec 	andcs	r0, r0, ip, ror #19
20001164:	200009f6 	strdcs	r0, [r0], -r6
20001168:	20000a00 	andcs	r0, r0, r0, lsl #20
2000116c:	20000a0a 	andcs	r0, r0, sl, lsl #20
20001170:	0a030201 	beq	200c197c <racket_2+0xc0858>
20001174:	0b060504 	bleq	2018258c <racket_2+0x181468>
20001178:	0c090807 	stceq	8, cr0, [r9], {7}
2000117c:	0d000000 	stceq	0, cr0, [r0, #-0]

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000d63 	andeq	r0, r0, r3, ror #26
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000043 	andeq	r0, r0, r3, asr #32
  10:	00045b0c 	andeq	r5, r4, ip, lsl #22
	...
  20:	02970200 	addseq	r0, r7, #0, 4
  24:	04020000 	streq	r0, [r2], #-0
  28:	00004201 	andeq	r4, r0, r1, lsl #4
  2c:	00780300 	rsbseq	r0, r8, r0, lsl #6
  30:	00420204 	subeq	r0, r2, r4, lsl #4
  34:	03000000 	movweq	r0, #0
  38:	03040079 	movweq	r0, #16505	; 0x4079
  3c:	00000042 	andeq	r0, r0, r2, asr #32
  40:	01040001 	tsteq	r4, r1
  44:	00024508 	andeq	r4, r2, r8, lsl #10
  48:	01720500 	cmneq	r2, r0, lsl #10
  4c:	04040000 	streq	r0, [r4], #-0
  50:	00000021 	andeq	r0, r0, r1, lsr #32
  54:	0000e002 	andeq	lr, r0, r2
  58:	08044800 	stmdaeq	r4, {fp, lr}
  5c:	00000090 	muleq	r0, r0, r0
  60:	00023b06 	andeq	r3, r2, r6, lsl #22
  64:	90090400 	andls	r0, r9, r0, lsl #8
  68:	00000000 	andeq	r0, r0, r0
  6c:	0001db06 	andeq	sp, r1, r6, lsl #22
  70:	900a0400 	andls	r0, sl, r0, lsl #8
  74:	04000000 	streq	r0, [r0], #-0
  78:	0001e106 	andeq	lr, r1, r6, lsl #2
  7c:	900b0400 	andls	r0, fp, r0, lsl #8
  80:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  84:	00787003 	rsbseq	r7, r8, r3
  88:	00970c04 	addseq	r0, r7, r4, lsl #24
  8c:	000c0000 	andeq	r0, ip, r0
  90:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
  94:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  98:	00000049 	andeq	r0, r0, r9, asr #32
  9c:	000000a7 	andeq	r0, r0, r7, lsr #1
  a0:	0000a709 	andeq	sl, r0, r9, lsl #14
  a4:	04001d00 	streq	r1, [r0], #-3328	; 0xfffff300
  a8:	00ea0704 	rsceq	r0, sl, r4, lsl #14
  ac:	3e050000 	cdpcc	0, 0, cr0, cr5, cr0, {0}
  b0:	04000001 	streq	r0, [r0], #-1
  b4:	0000540d 	andeq	r5, r0, sp, lsl #8
  b8:	013d0500 	teqeq	sp, r0, lsl #10
  bc:	0d040000 	stceq	0, cr0, [r4, #-0]
  c0:	000000c4 	andeq	r0, r0, r4, asr #1
  c4:	0054040a 	subseq	r0, r4, sl, lsl #8
  c8:	ef020000 	svc	0x00020000
  cc:	2c000002 	stccs	0, cr0, [r0], {2}
  d0:	015b0101 	cmpeq	fp, r1, lsl #2
  d4:	67030000 	strvs	r0, [r3, -r0]
  d8:	01006f65 	tsteq	r0, r5, ror #30
  dc:	0000b902 	andeq	fp, r0, r2, lsl #18
  e0:	9c060000 	stcls	0, cr0, [r6], {-0}
  e4:	01000001 	tsteq	r0, r1
  e8:	00009003 	andeq	r9, r0, r3
  ec:	a1060400 	tstge	r6, r0, lsl #8
  f0:	01000001 	tsteq	r0, r1
  f4:	00009003 	andeq	r9, r0, r3
  f8:	17060800 	strne	r0, [r6, -r0, lsl #16]
  fc:	01000000 	mrseq	r0, (UNDEF: 0)
 100:	00009004 	andeq	r9, r0, r4
 104:	80060c00 	andhi	r0, r6, r0, lsl #24
 108:	01000001 	tsteq	r0, r1
 10c:	00009004 	andeq	r9, r0, r4
 110:	d4061000 	strle	r1, [r6], #-0
 114:	01000003 	tsteq	r0, r3
 118:	00016c05 	andeq	r6, r1, r5, lsl #24
 11c:	64061400 	strvs	r1, [r6], #-1024	; 0xfffffc00
 120:	01000002 	tsteq	r0, r2
 124:	00016c06 	andeq	r6, r1, r6, lsl #24
 128:	34061800 	strcc	r1, [r6], #-2048	; 0xfffff800
 12c:	01000005 	tsteq	r0, r5
 130:	00016c07 	andeq	r6, r1, r7, lsl #24
 134:	d9061c00 	stmdble	r6, {sl, fp, ip}
 138:	01000003 	tsteq	r0, r3
 13c:	00018208 	andeq	r8, r1, r8, lsl #4
 140:	9e062000 	cdpls	0, 0, cr2, cr6, cr0, {0}
 144:	01000002 	tsteq	r0, r2
 148:	00019c09 	andeq	r9, r1, r9, lsl #24
 14c:	53062400 	movwpl	r2, #25600	; 0x6400
 150:	01000003 	tsteq	r0, r3
 154:	00019c0a 	andeq	r9, r1, sl, lsl #24
 158:	0b002800 	bleq	a160 <startup-0x1fff5ea0>
 15c:	00000166 	andeq	r0, r0, r6, ror #2
 160:	0001660c 	andeq	r6, r1, ip, lsl #12
 164:	040a0000 	streq	r0, [sl], #-0
 168:	000000ca 	andeq	r0, r0, sl, asr #1
 16c:	015b040a 	cmpeq	fp, sl, lsl #8
 170:	820b0000 	andhi	r0, fp, #0
 174:	0c000001 	stceq	0, cr0, [r0], {1}
 178:	00000166 	andeq	r0, r0, r6, ror #2
 17c:	0000900c 	andeq	r9, r0, ip
 180:	040a0000 	streq	r0, [sl], #-0
 184:	00000172 	andeq	r0, r0, r2, ror r1
 188:	0000900d 	andeq	r9, r0, sp
 18c:	00019c00 	andeq	r9, r1, r0, lsl #24
 190:	01660c00 	cmneq	r6, r0, lsl #24
 194:	900c0000 	andls	r0, ip, r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	0188040a 	orreq	r0, r8, sl, lsl #8
 1a0:	2a050000 	bcs	1401a8 <startup-0x1febfe58>
 1a4:	01000000 	mrseq	r0, (UNDEF: 0)
 1a8:	0000ca0b 	andeq	ip, r0, fp, lsl #20
 1ac:	00290500 	eoreq	r0, r9, r0, lsl #10
 1b0:	0b010000 	bleq	401b8 <startup-0x1ffbfe48>
 1b4:	00000166 	andeq	r0, r0, r6, ror #2
 1b8:	00000702 	andeq	r0, r0, r2, lsl #14
 1bc:	03023000 	movweq	r3, #8192	; 0x2000
 1c0:	00000255 	andeq	r0, r0, r5, asr r2
 1c4:	6f656703 	svcvs	0x00656703
 1c8:	b9040200 	stmdblt	r4, {r9}
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	00019c06 	andeq	r9, r1, r6, lsl #24
 1d4:	90050200 	andls	r0, r5, r0, lsl #4
 1d8:	04000000 	streq	r0, [r0], #-0
 1dc:	0001a106 	andeq	sl, r1, r6, lsl #2
 1e0:	90050200 	andls	r0, r5, r0, lsl #4
 1e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 1e8:	00001706 	andeq	r1, r0, r6, lsl #14
 1ec:	90060200 	andls	r0, r6, r0, lsl #4
 1f0:	0c000000 	stceq	0, cr0, [r0], {-0}
 1f4:	00018006 	andeq	r8, r1, r6
 1f8:	90060200 	andls	r0, r6, r0, lsl #4
 1fc:	10000000 	andne	r0, r0, r0
 200:	0003d406 	andeq	sp, r3, r6, lsl #8
 204:	66070200 	strvs	r0, [r7], -r0, lsl #4
 208:	14000002 	strne	r0, [r0], #-2
 20c:	00026406 	andeq	r6, r2, r6, lsl #8
 210:	66080200 	strvs	r0, [r8], -r0, lsl #4
 214:	18000002 	stmdane	r0, {r1}
 218:	00053406 	andeq	r3, r5, r6, lsl #8
 21c:	81090200 	mrshi	r0, R9_fiq
 220:	1c000002 	stcne	0, cr0, [r0], {2}
 224:	00028b06 	andeq	r8, r2, r6, lsl #22
 228:	970a0200 	strls	r0, [sl, -r0, lsl #4]
 22c:	20000002 	andcs	r0, r0, r2
 230:	0001cf06 	andeq	ip, r1, r6, lsl #30
 234:	970b0200 	strls	r0, [fp, -r0, lsl #4]
 238:	24000002 	strcs	r0, [r0], #-2
 23c:	00029e06 	andeq	r9, r2, r6, lsl #28
 240:	b10c0200 	mrslt	r0, R12_fiq
 244:	28000002 	stmdacs	r0, {r1}
 248:	00035306 	andeq	r5, r3, r6, lsl #6
 24c:	b10d0200 	mrslt	r0, SP_fiq
 250:	2c000002 	stccs	0, cr0, [r0], {2}
 254:	02600b00 	rsbeq	r0, r0, #0, 22
 258:	600c0000 	andvs	r0, ip, r0
 25c:	00000002 	andeq	r0, r0, r2
 260:	01b8040a 			; <UNDEFINED> instruction: 0x01b8040a
 264:	040a0000 	streq	r0, [sl], #-0
 268:	00000255 	andeq	r0, r0, r5, asr r2
 26c:	0002810b 	andeq	r8, r2, fp, lsl #2
 270:	02600c00 	rsbeq	r0, r0, #0, 24
 274:	660c0000 	strvs	r0, [ip], -r0
 278:	0c000001 	stceq	0, cr0, [r0], {1}
 27c:	00000166 	andeq	r0, r0, r6, ror #2
 280:	6c040a00 			; <UNDEFINED> instruction: 0x6c040a00
 284:	0b000002 	bleq	294 <startup-0x1ffffd6c>
 288:	00000297 	muleq	r0, r7, r2
 28c:	0002600c 	andeq	r6, r2, ip
 290:	00900c00 	addseq	r0, r0, r0, lsl #24
 294:	0a000000 	beq	29c <startup-0x1ffffd64>
 298:	00028704 	andeq	r8, r2, r4, lsl #14
 29c:	00900d00 	addseq	r0, r0, r0, lsl #26
 2a0:	02b10000 	adcseq	r0, r1, #0
 2a4:	600c0000 	andvs	r0, ip, r0
 2a8:	0c000002 	stceq	0, cr0, [r0], {2}
 2ac:	00000090 	muleq	r0, r0, r0
 2b0:	9d040a00 	vstrls	s0, [r4, #-0]
 2b4:	05000002 	streq	r0, [r0, #-2]
 2b8:	0000051f 	andeq	r0, r0, pc, lsl r5
 2bc:	01b80e02 			; <UNDEFINED> instruction: 0x01b80e02
 2c0:	1e050000 	cdpne	0, 0, cr0, cr5, cr0, {0}
 2c4:	02000005 	andeq	r0, r0, #5
 2c8:	0002600e 	andeq	r6, r2, lr
 2cc:	02d80e00 	sbcseq	r0, r8, #0, 28
 2d0:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 2d4:	000002de 	ldrdeq	r0, [r0], -lr
 2d8:	10300305 	eorsne	r0, r0, r5, lsl #6
 2dc:	01042000 	mrseq	r2, (UNDEF: 4)
 2e0:	00024e08 	andeq	r4, r2, r8, lsl #28
 2e4:	00f30e00 	rscseq	r0, r3, r0, lsl #28
 2e8:	2f030000 	svccs	0x00030000
 2ec:	000002de 	ldrdeq	r0, [r0], -lr
 2f0:	10310305 	eorsne	r0, r1, r5, lsl #6
 2f4:	040e2000 	streq	r2, [lr], #-0
 2f8:	03000003 	movweq	r0, #3
 2fc:	0002de30 	andeq	sp, r2, r0, lsr lr
 300:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
 304:	0f200010 	svceq	0x00200010
 308:	0000041b 	andeq	r0, r0, fp, lsl r4
 30c:	ae01e803 	cdpge	8, 0, cr14, cr1, cr3, {0}
 310:	05000000 	streq	r0, [r0, #-0]
 314:	00103803 	andseq	r3, r0, r3, lsl #16
 318:	03e30f20 	mvneq	r0, #32, 30	; 0x80
 31c:	f4030000 	vst4.8	{d0-d3}, [r3], r0
 320:	0000ae01 	andeq	sl, r0, r1, lsl #28
 324:	80030500 	andhi	r0, r3, r0, lsl #10
 328:	10200010 	eorne	r0, r0, r0, lsl r0
 32c:	000000db 	ldrdeq	r0, [r0], -fp
 330:	b7020803 	strlt	r0, [r2, -r3, lsl #16]
 334:	05000002 	streq	r0, [r0, #-2]
 338:	0010c803 	andseq	ip, r0, r3, lsl #16
 33c:	00fc1020 	rscseq	r1, ip, r0, lsr #32
 340:	16030000 	strne	r0, [r3], -r0
 344:	0001a202 	andeq	sl, r1, r2, lsl #4
 348:	f8030500 			; <UNDEFINED> instruction: 0xf8030500
 34c:	10200010 	eorne	r0, r0, r0, lsl r0
 350:	00000105 	andeq	r0, r0, r5, lsl #2
 354:	a2022203 	andge	r2, r2, #805306368	; 0x30000000
 358:	05000001 	streq	r0, [r0, #-1]
 35c:	00112403 	andseq	r2, r1, r3, lsl #8
 360:	01161120 	tsteq	r6, r0, lsr #2
 364:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 368:	00009002 	andeq	r9, r0, r2
 36c:	000f6400 	andeq	r6, pc, r0, lsl #8
 370:	0000cc20 	andeq	ip, r0, r0, lsr #24
 374:	b29c0100 	addslt	r0, ip, #0, 2
 378:	12000003 	andne	r0, r0, #3
 37c:	30030063 	andcc	r0, r3, r3, rrx
 380:	0002de02 	andeq	sp, r2, r2, lsl #28
 384:	63910200 	orrsvs	r0, r1, #0, 4
 388:	03007012 	movweq	r7, #18
 38c:	02c20236 	sbceq	r0, r2, #1610612739	; 0x60000003
 390:	91020000 	mrsls	r0, (UNDEF: 2)
 394:	3172126c 	cmncc	r2, ip, ror #4
 398:	02370300 	eorseq	r0, r7, #0, 6
 39c:	000001ad 	andeq	r0, r0, sp, lsr #3
 3a0:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
 3a4:	03003272 	movweq	r3, #626	; 0x272
 3a8:	01ad0238 			; <UNDEFINED> instruction: 0x01ad0238
 3ac:	91020000 	mrsls	r0, (UNDEF: 2)
 3b0:	87130064 	ldrhi	r0, [r3, -r4, rrx]
 3b4:	03000003 	movweq	r0, #3
 3b8:	0f1001da 	svceq	0x001001da
 3bc:	00542000 	subseq	r2, r4, r0
 3c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 3c4:	00036214 	andeq	r6, r3, r4, lsl r2
 3c8:	01d30300 	bicseq	r0, r3, r0, lsl #6
 3cc:	20000ee0 	andcs	r0, r0, r0, ror #29
 3d0:	00000030 	andeq	r0, r0, r0, lsr r0
 3d4:	03e89c01 	mvneq	r9, #256	; 0x100
 3d8:	6f150000 	svcvs	0x00150000
 3dc:	01d30300 	bicseq	r0, r3, r0, lsl #6
 3e0:	000002c2 	andeq	r0, r0, r2, asr #5
 3e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 3e8:	0002e114 	andeq	lr, r2, r4, lsl r1
 3ec:	01c70300 	biceq	r0, r7, r0, lsl #6
 3f0:	20000e70 	andcs	r0, r0, r0, ror lr
 3f4:	00000070 	andeq	r0, r0, r0, ror r0
 3f8:	04649c01 	strbteq	r9, [r4], #-3073	; 0xfffff3ff
 3fc:	6f150000 	svcvs	0x00150000
 400:	01c70300 	biceq	r0, r7, r0, lsl #6
 404:	000002c2 	andeq	r0, r0, r2, asr #5
 408:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 40c:	20000e8a 	andcs	r0, r0, sl, lsl #29
 410:	00000018 	andeq	r0, r0, r8, lsl r0
 414:	00000439 	andeq	r0, r0, r9, lsr r4
 418:	00036217 	andeq	r6, r3, r7, lsl r2
 41c:	01ca0300 	biceq	r0, sl, r0, lsl #6
 420:	00000090 	muleq	r0, r0, r0
 424:	0000042a 	andeq	r0, r0, sl, lsr #8
 428:	87190018 			; <UNDEFINED> instruction: 0x87190018
 42c:	03000003 	movweq	r0, #3
 430:	009001cb 	addseq	r0, r0, fp, asr #3
 434:	00180000 	andseq	r0, r8, r0
 438:	0eb61a00 	vmoveq.f32	s2, #96	; 0x3f000000  0.5
 43c:	00182000 	andseq	r2, r8, r0
 440:	62170000 	andsvs	r0, r7, #0
 444:	03000003 	movweq	r0, #3
 448:	009001ca 	addseq	r0, r0, sl, asr #3
 44c:	04540000 	ldrbeq	r0, [r4], #-0
 450:	00180000 	andseq	r0, r8, r0
 454:	00038719 	andeq	r8, r3, r9, lsl r7
 458:	01cb0300 	biceq	r0, fp, r0, lsl #6
 45c:	00000090 	muleq	r0, r0, r0
 460:	00000018 	andeq	r0, r0, r8, lsl r0
 464:	0001ca11 	andeq	ip, r1, r1, lsl sl
 468:	01b80300 			; <UNDEFINED> instruction: 0x01b80300
 46c:	00000042 	andeq	r0, r0, r2, asr #32
 470:	20000e06 	andcs	r0, r0, r6, lsl #28
 474:	0000006a 	andeq	r0, r0, sl, rrx
 478:	04de9c01 	ldrbeq	r9, [lr], #3073	; 0xc01
 47c:	9d1b0000 	ldcls	0, cr0, [fp, #-0]
 480:	03000004 	movweq	r0, #4
 484:	04de01b8 	ldrbeq	r0, [lr], #440	; 0x1b8
 488:	91020000 	mrsls	r0, (UNDEF: 2)
 48c:	011b1b54 	tsteq	fp, r4, asr fp
 490:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
 494:	0004de01 	andeq	sp, r4, r1, lsl #28
 498:	50910200 	addspl	r0, r1, r0, lsl #4
 49c:	00022110 	andeq	r2, r2, r0, lsl r1
 4a0:	01ba0300 			; <UNDEFINED> instruction: 0x01ba0300
 4a4:	000004e5 	andeq	r0, r0, r5, ror #9
 4a8:	1a589102 	bne	16248b8 <startup-0x1e9db748>
 4ac:	20000e1e 	andcs	r0, r0, lr, lsl lr
 4b0:	00000042 	andeq	r0, r0, r2, asr #32
 4b4:	776f7212 			; <UNDEFINED> instruction: 0x776f7212
 4b8:	01bb0300 			; <UNDEFINED> instruction: 0x01bb0300
 4bc:	00000090 	muleq	r0, r0, r0
 4c0:	1a6c9102 	bne	1b248d0 <startup-0x1e4db730>
 4c4:	20000e24 	andcs	r0, r0, r4, lsr #28
 4c8:	00000030 	andeq	r0, r0, r0, lsr r0
 4cc:	6c6f6312 	stclvs	3, cr6, [pc], #-72	; 48c <startup-0x1ffffb74>
 4d0:	01be0300 			; <UNDEFINED> instruction: 0x01be0300
 4d4:	00000090 	muleq	r0, r0, r0
 4d8:	00689102 	rsbeq	r9, r8, r2, lsl #2
 4dc:	04040000 	streq	r0, [r4], #-0
 4e0:	0002b507 	andeq	fp, r2, r7, lsl #10
 4e4:	00420800 	subeq	r0, r2, r0, lsl #16
 4e8:	04f50000 	ldrbteq	r0, [r5], #0
 4ec:	a7090000 	strge	r0, [r9, -r0]
 4f0:	0f000000 	svceq	0x00000000
 4f4:	01251c00 			; <UNDEFINED> instruction: 0x01251c00
 4f8:	ab030000 	blge	c0500 <startup-0x1ff3fb00>
 4fc:	00009001 	andeq	r9, r0, r1
 500:	000dae00 	andeq	sl, sp, r0, lsl #28
 504:	00005820 	andeq	r5, r0, r0, lsr #16
 508:	2e9c0100 	fmlcse	f0, f4, f0
 50c:	1b000005 	blne	528 <startup-0x1ffffad8>
 510:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 514:	de01ab03 	vmlale.f64	d10, d1, d3
 518:	02000004 	andeq	r0, r0, #4
 51c:	ce106c91 	mrcgt	12, 0, r6, cr0, cr1, {4}
 520:	03000002 	movweq	r0, #2
 524:	004201ad 	subeq	r0, r2, sp, lsr #3
 528:	91020000 	mrsls	r0, (UNDEF: 2)
 52c:	6a1d0077 	bvs	740710 <startup-0x1f8bf8f0>
 530:	03000002 	movweq	r0, #2
 534:	0d8601a5 	stfeqs	f0, [r6, #660]	; 0x294
 538:	00282000 	eoreq	r2, r8, r0
 53c:	9c010000 	stcls	0, cr0, [r1], {-0}
 540:	00000572 	andeq	r0, r0, r2, ror r5
 544:	00049f1b 	andeq	r9, r4, fp, lsl pc
 548:	01a50300 			; <UNDEFINED> instruction: 0x01a50300
 54c:	000004de 	ldrdeq	r0, [r0], -lr
 550:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 554:	00776f72 	rsbseq	r6, r7, r2, ror pc
 558:	de01a503 	cfsh32le	mvfx10, mvfx1, #3
 55c:	02000004 	andeq	r0, r0, #4
 560:	78106891 	ldmdavc	r0, {r0, r4, r7, fp, sp, lr}
 564:	03000001 	movweq	r0, #1
 568:	004201a7 	subeq	r0, r2, r7, lsr #3
 56c:	91020000 	mrsls	r0, (UNDEF: 2)
 570:	f7140077 			; <UNDEFINED> instruction: 0xf7140077
 574:	03000002 	movweq	r0, #2
 578:	0d280196 	stfeqs	f0, [r8, #-600]!	; 0xfffffda8
 57c:	005e2000 	subseq	r2, lr, r0
 580:	9c010000 	stcls	0, cr0, [r1], {-0}
 584:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
 588:	03007815 	movweq	r7, #2069	; 0x815
 58c:	00420196 	umaaleq	r0, r2, r6, r1
 590:	91020000 	mrsls	r0, (UNDEF: 2)
 594:	0079156f 	rsbseq	r1, r9, pc, ror #10
 598:	42019603 	andmi	r9, r1, #3145728	; 0x300000
 59c:	02000000 	andeq	r0, r0, #0
 5a0:	ad106e91 	ldcge	14, cr6, [r0, #-580]	; 0xfffffdbc
 5a4:	03000002 	movweq	r0, #2
 5a8:	00420199 	umaaleq	r0, r2, r9, r1
 5ac:	91020000 	mrsls	r0, (UNDEF: 2)
 5b0:	4b1e0077 	blmi	780794 <startup-0x1f87f86c>
 5b4:	03000005 	movweq	r0, #5
 5b8:	0cde0186 	ldfeqe	f0, [lr], {134}	; 0x86
 5bc:	004a2000 	subeq	r2, sl, r0
 5c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 5c4:	00034214 	andeq	r4, r3, r4, lsl r2
 5c8:	017e0300 	cmneq	lr, r0, lsl #6
 5cc:	20000cb6 			; <UNDEFINED> instruction: 0x20000cb6
 5d0:	00000028 	andeq	r0, r0, r8, lsr #32
 5d4:	05e89c01 	strbeq	r9, [r8, #3073]!	; 0xc01
 5d8:	63150000 	tstvs	r5, #0
 5dc:	017e0300 	cmneq	lr, r0, lsl #6
 5e0:	00000042 	andeq	r0, r0, r2, asr #32
 5e4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 5e8:	0004f51e 	andeq	pc, r4, lr, lsl r5	; <UNPREDICTABLE>
 5ec:	01780300 	cmneq	r8, r0, lsl #6
 5f0:	20000c94 	mulcs	r0, r4, ip
 5f4:	00000022 	andeq	r0, r0, r2, lsr #32
 5f8:	39119c01 	ldmdbcc	r1, {r0, sl, fp, ip, pc}
 5fc:	03000005 	movweq	r0, #5
 600:	0042016d 	subeq	r0, r2, sp, ror #2
 604:	0c540000 	mraeq	r0, r4, acc0
 608:	00402000 	subeq	r2, r0, r0
 60c:	9c010000 	stcls	0, cr0, [r1], {-0}
 610:	00000622 	andeq	r0, r0, r2, lsr #12
 614:	03006312 	movweq	r6, #786	; 0x312
 618:	0042016f 	subeq	r0, r2, pc, ror #2
 61c:	91020000 	mrsls	r0, (UNDEF: 2)
 620:	9211006f 	andsls	r0, r1, #111	; 0x6f
 624:	03000003 	movweq	r0, #3
 628:	00420162 	subeq	r0, r2, r2, ror #2
 62c:	0c220000 	stceq	0, cr0, [r2], #-0
 630:	00322000 	eorseq	r2, r2, r0
 634:	9c010000 	stcls	0, cr0, [r1], {-0}
 638:	0000064a 	andeq	r0, r0, sl, asr #12
 63c:	03006312 	movweq	r6, #786	; 0x312
 640:	00420164 	subeq	r0, r2, r4, ror #2
 644:	91020000 	mrsls	r0, (UNDEF: 2)
 648:	a8140077 	ldmdage	r4, {r0, r1, r2, r4, r5, r6}
 64c:	03000003 	movweq	r0, #3
 650:	0bf8015b 	bleq	ffe00bc4 <racket_2+0xdfdffaa0>
 654:	002a2000 	eoreq	r2, sl, r0
 658:	9c010000 	stcls	0, cr0, [r1], {-0}
 65c:	0000066e 	andeq	r0, r0, lr, ror #12
 660:	03006315 	movweq	r6, #789	; 0x315
 664:	0042015b 	subeq	r0, r2, fp, asr r1
 668:	91020000 	mrsls	r0, (UNDEF: 2)
 66c:	69140077 	ldmdbvs	r4, {r0, r1, r2, r4, r5, r6}
 670:	03000005 	movweq	r0, #5
 674:	0bd40154 	bleq	ff500bcc <racket_2+0xdf4ffaa8>
 678:	00242000 	eoreq	r2, r4, r0
 67c:	9c010000 	stcls	0, cr0, [r1], {-0}
 680:	00000692 	muleq	r0, r2, r6
 684:	03006315 	movweq	r6, #789	; 0x315
 688:	00420154 	subeq	r0, r2, r4, asr r1
 68c:	91020000 	mrsls	r0, (UNDEF: 2)
 690:	a6140077 			; <UNDEFINED> instruction: 0xa6140077
 694:	03000004 	movweq	r0, #4
 698:	0ba4014c 	bleq	fe900bd0 <racket_2+0xde8ffaac>
 69c:	00302000 	eorseq	r2, r0, r0
 6a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6a4:	000006b6 			; <UNDEFINED> instruction: 0x000006b6
 6a8:	03006315 	movweq	r6, #789	; 0x315
 6ac:	0042014c 	subeq	r0, r2, ip, asr #2
 6b0:	91020000 	mrsls	r0, (UNDEF: 2)
 6b4:	261d0077 			; <UNDEFINED> instruction: 0x261d0077
 6b8:	03000002 	movweq	r0, #2
 6bc:	0b540144 	bleq	1500bd4 <startup-0x1eaff42c>
 6c0:	00502000 	subseq	r2, r0, r0
 6c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 6c8:	000006e7 	andeq	r0, r0, r7, ror #13
 6cc:	03007815 	movweq	r7, #2069	; 0x815
 6d0:	00420144 	subeq	r0, r2, r4, asr #2
 6d4:	91020000 	mrsls	r0, (UNDEF: 2)
 6d8:	0063126f 	rsbeq	r1, r3, pc, ror #4
 6dc:	42014603 	andmi	r4, r1, #3145728	; 0x300000
 6e0:	02000000 	andeq	r0, r0, #0
 6e4:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 6e8:	00000374 	andeq	r0, r0, r4, ror r3
 6ec:	10013c03 	andne	r3, r1, r3, lsl #24
 6f0:	4420000b 	strtmi	r0, [r0], #-11
 6f4:	01000000 	mrseq	r0, (UNDEF: 0)
 6f8:	0007189c 	muleq	r7, ip, r8
 6fc:	00781500 	rsbseq	r1, r8, r0, lsl #10
 700:	42013c03 	andmi	r3, r1, #768	; 0x300
 704:	02000000 	andeq	r0, r0, #0
 708:	63126f91 	tstvs	r2, #580	; 0x244
 70c:	013e0300 	teqeq	lr, r0, lsl #6
 710:	00000042 	andeq	r0, r0, r2, asr #32
 714:	00779102 	rsbseq	r9, r7, r2, lsl #2
 718:	00001c14 	andeq	r1, r0, r4, lsl ip
 71c:	01120300 	tsteq	r2, r0, lsl #6
 720:	20000978 	andcs	r0, r0, r8, ror r9
 724:	00000198 	muleq	r0, r8, r1
 728:	07929c01 	ldreq	r9, [r2, r1, lsl #24]
 72c:	78150000 	ldmdavc	r5, {}	; <UNPREDICTABLE>
 730:	01120300 	tsteq	r2, r0, lsl #6
 734:	00000090 	muleq	r0, r0, r0
 738:	155c9102 	ldrbne	r9, [ip, #-258]	; 0xfffffefe
 73c:	12030079 	andne	r0, r3, #121	; 0x79
 740:	00009001 	andeq	r9, r0, r1
 744:	58910200 	ldmpl	r1, {r9}
 748:	74657315 	strbtvc	r7, [r5], #-789	; 0xfffffceb
 74c:	01120300 	tsteq	r2, r0, lsl #6
 750:	00000090 	muleq	r0, r0, r0
 754:	10549102 	subsne	r9, r4, r2, lsl #2
 758:	0000017b 	andeq	r0, r0, fp, ror r1
 75c:	42011403 	andmi	r1, r1, #50331648	; 0x3000000
 760:	02000000 	andeq	r0, r0, #0
 764:	63126f91 	tstvs	r2, #580	; 0x244
 768:	01140300 	tsteq	r4, r0, lsl #6
 76c:	00000042 	andeq	r0, r0, r2, asr #32
 770:	10679102 	rsbne	r9, r7, r2, lsl #2
 774:	0000039d 	muleq	r0, sp, r3
 778:	42011403 	andmi	r1, r1, #50331648	; 0x3000000
 77c:	02000000 	andeq	r0, r0, #0
 780:	5f106e91 	svcpl	0x00106e91
 784:	03000001 	movweq	r0, #1
 788:	00900115 	addseq	r0, r0, r5, lsl r1
 78c:	91020000 	mrsls	r0, (UNDEF: 2)
 790:	651f0068 	ldrvs	r0, [pc, #-104]	; 730 <startup-0x1ffff8d0>
 794:	03000001 	movweq	r0, #1
 798:	0042010c 	subeq	r0, r2, ip, lsl #2
 79c:	094e0000 	stmdbeq	lr, {}^	; <UNPREDICTABLE>
 7a0:	002a2000 	eoreq	r2, sl, r0
 7a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 7a8:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
 7ac:	00039d1b 	andeq	r9, r3, fp, lsl sp
 7b0:	010c0300 	mrseq	r0, LR_mon
 7b4:	00000042 	andeq	r0, r0, r2, asr #32
 7b8:	00779102 	rsbseq	r9, r7, r2, lsl #2
 7bc:	0003c020 	andeq	ip, r3, r0, lsr #32
 7c0:	e8fe0300 	ldm	lr!, {r8, r9}^
 7c4:	66200008 	strtvs	r0, [r0], -r8
 7c8:	01000000 	mrseq	r0, (UNDEF: 0)
 7cc:	0007ec9c 	muleq	r7, ip, ip
 7d0:	00691200 	rsbeq	r1, r9, r0, lsl #4
 7d4:	42010003 	andmi	r0, r1, #3
 7d8:	02000000 	andeq	r0, r0, #0
 7dc:	6a127791 	bvs	49e628 <startup-0x1fb619d8>
 7e0:	01000300 	mrseq	r0, LR_irq
 7e4:	00000042 	andeq	r0, r0, r2, asr #32
 7e8:	00769102 	rsbseq	r9, r6, r2, lsl #2
 7ec:	0001b821 	andeq	fp, r1, r1, lsr #16
 7f0:	92ef0300 	rscls	r0, pc, #0, 6
 7f4:	56200008 	strtpl	r0, [r0], -r8
 7f8:	01000000 	mrseq	r0, (UNDEF: 0)
 7fc:	0031229c 	mlaseq	r1, ip, r2, r2
 800:	e7030000 	str	r0, [r3, -r0]
 804:	20000856 	andcs	r0, r0, r6, asr r8
 808:	0000003c 	andeq	r0, r0, ip, lsr r0
 80c:	082f9c01 	stmdaeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
 810:	b4230000 	strtlt	r0, [r3], #-0
 814:	03000003 	movweq	r0, #3
 818:	000042e7 	andeq	r4, r0, r7, ror #5
 81c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 820:	00039d23 	andeq	r9, r3, r3, lsr #26
 824:	42e70300 	rscmi	r0, r7, #0, 6
 828:	02000000 	andeq	r0, r0, #0
 82c:	22007691 	andcs	r7, r0, #152043520	; 0x9100000
 830:	00000276 	andeq	r0, r0, r6, ror r2
 834:	0820e103 	stmdaeq	r0!, {r0, r1, r8, sp, lr, pc}
 838:	00362000 	eorseq	r2, r6, r0
 83c:	9c010000 	stcls	0, cr0, [r1], {-0}
 840:	00000861 	andeq	r0, r0, r1, ror #16
 844:	00044c23 	andeq	r4, r4, r3, lsr #24
 848:	42e10300 	rscmi	r0, r1, #0, 6
 84c:	02000000 	andeq	r0, r0, #0
 850:	9d237791 	stcls	7, cr7, [r3, #-580]!	; 0xfffffdbc
 854:	03000003 	movweq	r0, #3
 858:	000042e1 	andeq	r4, r0, r1, ror #5
 85c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 860:	01fa2200 	mvnseq	r2, r0, lsl #4
 864:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
 868:	200007a0 	andcs	r0, r0, r0, lsr #15
 86c:	00000080 	andeq	r0, r0, r0, lsl #1
 870:	08939c01 	ldmeq	r3, {r0, sl, fp, ip, pc}
 874:	76240000 	strtvc	r0, [r4], -r0
 878:	03006c61 	movweq	r6, #3169	; 0xc61
 87c:	000042c9 	andeq	r4, r0, r9, asr #5
 880:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 884:	00039d23 	andeq	r9, r3, r3, lsr #26
 888:	42c90300 	sbcmi	r0, r9, #0, 6
 88c:	02000000 	andeq	r0, r0, #0
 890:	25007691 	strcs	r7, [r0, #-1681]	; 0xfffff96f
 894:	00000320 	andeq	r0, r0, r0, lsr #6
 898:	0042ad03 	subeq	sl, r2, r3, lsl #26
 89c:	070c0000 	streq	r0, [ip, -r0]
 8a0:	00942000 	addseq	r2, r4, r0
 8a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8a8:	000008c7 	andeq	r0, r0, r7, asr #17
 8ac:	00039d23 	andeq	r9, r3, r3, lsr #26
 8b0:	42ad0300 	adcmi	r0, sp, #0, 6
 8b4:	02000000 	andeq	r0, r0, #0
 8b8:	63266f91 			; <UNDEFINED> instruction: 0x63266f91
 8bc:	42af0300 	adcmi	r0, pc, #0, 6
 8c0:	02000000 	andeq	r0, r0, #0
 8c4:	22007791 	andcs	r7, r0, #38010880	; 0x2440000
 8c8:	000003f1 	strdeq	r0, [r0], -r1
 8cc:	06969603 	ldreq	r9, [r6], r3, lsl #12
 8d0:	00762000 	rsbseq	r2, r6, r0
 8d4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8d8:	000008e9 	andeq	r0, r0, r9, ror #17
 8dc:	03006326 	movweq	r6, #806	; 0x326
 8e0:	00004298 	muleq	r0, r8, r2
 8e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 8e8:	04292200 	strteq	r2, [r9], #-512	; 0xfffffe00
 8ec:	8c030000 	stchi	0, cr0, [r3], {-0}
 8f0:	2000063c 	andcs	r0, r0, ip, lsr r6
 8f4:	0000005a 	andeq	r0, r0, sl, asr r0
 8f8:	090d9c01 	stmdbeq	sp, {r0, sl, fp, ip, pc}
 8fc:	9d230000 	stcls	0, cr0, [r3, #-0]
 900:	03000003 	movweq	r0, #3
 904:	0000428c 	andeq	r4, r0, ip, lsl #5
 908:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 90c:	02532700 	subseq	r2, r3, #0, 14
 910:	87030000 	strhi	r0, [r3, -r0]
 914:	20000608 	andcs	r0, r0, r8, lsl #12
 918:	00000034 	andeq	r0, r0, r4, lsr r0
 91c:	092f9c01 	stmdbeq	pc!, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
 920:	78240000 	stmdavc	r4!, {}	; <UNPREDICTABLE>
 924:	42870300 	addmi	r0, r7, #0, 6
 928:	02000000 	andeq	r0, r0, #0
 92c:	27007791 			; <UNDEFINED> instruction: 0x27007791
 930:	0000032d 	andeq	r0, r0, sp, lsr #6
 934:	05d28303 	ldrbeq	r8, [r2, #771]	; 0x303
 938:	00362000 	eorseq	r2, r6, r0
 93c:	9c010000 	stcls	0, cr0, [r1], {-0}
 940:	00000951 	andeq	r0, r0, r1, asr r9
 944:	03007824 	movweq	r7, #2084	; 0x824
 948:	00004283 	andeq	r4, r0, r3, lsl #5
 94c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 950:	02082000 	andeq	r2, r8, #0
 954:	72030000 	andvc	r0, r3, #0
 958:	200005a4 	andcs	r0, r0, r4, lsr #11
 95c:	0000002e 	andeq	r0, r0, lr, lsr #32
 960:	09749c01 	ldmdbeq	r4!, {r0, sl, fp, ip, pc}^
 964:	6d240000 	stcvs	0, cr0, [r4, #-0]
 968:	72030073 	andvc	r0, r3, #115	; 0x73
 96c:	000004de 	ldrdeq	r0, [r0], -lr
 970:	00749102 	rsbseq	r9, r4, r2, lsl #2
 974:	00013128 	andeq	r3, r1, r8, lsr #2
 978:	92610300 	rsbls	r0, r1, #0, 6
 97c:	12200005 	eorne	r0, r0, #5
 980:	01000000 	mrseq	r0, (UNDEF: 0)
 984:	0009979c 	muleq	r9, ip, r7
 988:	73752400 	cmnvc	r5, #0, 8
 98c:	de610300 	cdple	3, 6, cr0, cr1, cr0, {0}
 990:	02000004 	andeq	r0, r0, #4
 994:	21007491 			; <UNDEFINED> instruction: 0x21007491
 998:	000002c2 	andeq	r0, r0, r2, asr #5
 99c:	05805b03 	streq	r5, [r0, #2819]	; 0xb03
 9a0:	00122000 	andseq	r2, r2, r0
 9a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 9a8:	00018529 	andeq	r8, r1, r9, lsr #10
 9ac:	3c510300 	mrrccc	3, 0, r0, r1, cr0
 9b0:	44200005 	strtmi	r0, [r0], #-5
 9b4:	01000000 	mrseq	r0, (UNDEF: 0)
 9b8:	0317299c 	tsteq	r7, #156, 18	; 0x270000
 9bc:	3d030000 	stccc	0, cr0, [r3, #-0]
 9c0:	200004d4 	ldrdcs	r0, [r0], -r4
 9c4:	00000068 	andeq	r0, r0, r8, rrx
 9c8:	a6299c01 	strtge	r9, [r9], -r1, lsl #24
 9cc:	03000001 	movweq	r0, #1
 9d0:	00000034 	andeq	r0, r0, r4, lsr r0
 9d4:	00000c20 	andeq	r0, r0, r0, lsr #24
 9d8:	2a9c0100 	bcs	fe700de0 <racket_2+0xde6ffcbc>
 9dc:	0000010e 	andeq	r0, r0, lr, lsl #2
 9e0:	00905902 	addseq	r5, r0, r2, lsl #18
 9e4:	04140000 	ldreq	r0, [r4], #-0
 9e8:	00c02000 	sbceq	r2, r0, r0
 9ec:	9c010000 	stcls	0, cr0, [r1], {-0}
 9f0:	00000a7b 	andeq	r0, r0, fp, ror sl
 9f4:	02006f24 	andeq	r6, r0, #36, 30	; 0x90
 9f8:	0001ad59 	andeq	sl, r1, r9, asr sp
 9fc:	5c910200 	lfmpl	f0, 4, [r1], {0}
 a00:	02007024 	andeq	r7, r0, #36	; 0x24
 a04:	0002c259 	andeq	ip, r2, r9, asr r2
 a08:	58910200 	ldmpl	r1, {r9}
 a0c:	00041e1a 	andeq	r1, r4, sl, lsl lr
 a10:	0000ac20 	andeq	sl, r0, r0, lsr #24
 a14:	00692600 	rsbeq	r2, r9, r0, lsl #12
 a18:	00905a02 	addseq	r5, r0, r2, lsl #20
 a1c:	91020000 	mrsls	r0, (UNDEF: 2)
 a20:	04241a74 	strteq	r1, [r4], #-2676	; 0xfffff58c
 a24:	00942000 	addseq	r2, r4, r0
 a28:	6a260000 	bvs	980a30 <startup-0x1f67f5d0>
 a2c:	905b0200 	subsls	r0, fp, r0, lsl #4
 a30:	02000000 	andeq	r0, r0, #0
 a34:	2a1a7091 	bcs	69cc80 <startup-0x1f963380>
 a38:	7c200004 	stcvc	0, cr0, [r0], #-16
 a3c:	26000000 	strcs	r0, [r0], -r0
 a40:	00785f6f 	rsbseq	r5, r8, pc, ror #30
 a44:	00905c02 	addseq	r5, r0, r2, lsl #24
 a48:	91020000 	mrsls	r0, (UNDEF: 2)
 a4c:	5f6f266c 	svcpl	0x006f266c
 a50:	5d020079 	stcpl	0, cr0, [r2, #-484]	; 0xfffffe1c
 a54:	00000090 	muleq	r0, r0, r0
 a58:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
 a5c:	00785f70 	rsbseq	r5, r8, r0, ror pc
 a60:	00905f02 	addseq	r5, r0, r2, lsl #30
 a64:	91020000 	mrsls	r0, (UNDEF: 2)
 a68:	5f702664 	svcpl	0x00702664
 a6c:	60020079 	andvs	r0, r2, r9, ror r0
 a70:	00000090 	muleq	r0, r0, r0
 a74:	00609102 	rsbeq	r9, r0, r2, lsl #2
 a78:	2a000000 	bcs	a80 <startup-0x1ffff580>
 a7c:	00000506 	andeq	r0, r0, r6, lsl #10
 a80:	00905202 	addseq	r5, r0, r2, lsl #4
 a84:	03e00000 	mvneq	r0, #0
 a88:	00342000 	eorseq	r2, r4, r0
 a8c:	9c010000 	stcls	0, cr0, [r1], {-0}
 a90:	00000abd 			; <UNDEFINED> instruction: 0x00000abd
 a94:	02006f24 	andeq	r6, r0, #36, 30	; 0x90
 a98:	0002c252 	andeq	ip, r2, r2, asr r2
 a9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 aa0:	0001ae23 	andeq	sl, r1, r3, lsr #28
 aa4:	90520200 	subsls	r0, r2, r0, lsl #4
 aa8:	02000000 	andeq	r0, r0, #0
 aac:	74266891 	strtvc	r6, [r6], #-2193	; 0xfffff76f
 ab0:	0200706d 	andeq	r7, r0, #109	; 0x6d
 ab4:	00009053 	andeq	r9, r0, r3, asr r0
 ab8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 abc:	01472a00 	cmpeq	r7, r0, lsl #20
 ac0:	4c020000 	stcmi	0, cr0, [r2], {-0}
 ac4:	00000090 	muleq	r0, r0, r0
 ac8:	200003ac 	andcs	r0, r0, ip, lsr #7
 acc:	00000034 	andeq	r0, r0, r4, lsr r0
 ad0:	0aff9c01 	beq	fffe7adc <racket_2+0xdffe69b8>
 ad4:	6f240000 	svcvs	0x00240000
 ad8:	c24c0200 	subgt	r0, ip, #0, 4
 adc:	02000002 	andeq	r0, r0, #2
 ae0:	04236c91 	strteq	r6, [r3], #-3217	; 0xfffff36f
 ae4:	02000004 	andeq	r0, r0, #4
 ae8:	0000904c 	andeq	r9, r0, ip, asr #32
 aec:	68910200 	ldmvs	r1, {r9}
 af0:	706d7426 	rsbvc	r7, sp, r6, lsr #8
 af4:	904d0200 	subls	r0, sp, r0, lsl #4
 af8:	02000000 	andeq	r0, r0, #0
 afc:	20007491 	mulcs	r0, r1, r4
 b00:	00000528 	andeq	r0, r0, r8, lsr #10
 b04:	03102602 	tsteq	r0, #2097152	; 0x200000
 b08:	009c2000 	addseq	r2, ip, r0
 b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
 b10:	00000b54 	andeq	r0, r0, r4, asr fp
 b14:	02006f24 	andeq	r6, r0, #36, 30	; 0x90
 b18:	0002c226 	andeq	ip, r2, r6, lsr #4
 b1c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b20:	00001123 	andeq	r1, r0, r3, lsr #2
 b24:	ad260200 	sfmge	f0, 4, [r6, #-0]
 b28:	02000001 	andeq	r0, r0, #1
 b2c:	22237091 	eorcs	r7, r3, #145	; 0x91
 b30:	02000000 	andeq	r0, r0, #0
 b34:	0001ad26 	andeq	sl, r1, r6, lsr #26
 b38:	6c910200 	lfmvs	f0, 4, [r1], {0}
 b3c:	0003241a 	andeq	r2, r3, sl, lsl r4
 b40:	00002e20 	andeq	r2, r0, r0, lsr #28
 b44:	010e2b00 	tsteq	lr, r0, lsl #22
 b48:	2b020000 	blcs	80b50 <startup-0x1ff7f4b0>
 b4c:	00000090 	muleq	r0, r0, r0
 b50:	00000018 	andeq	r0, r0, r8, lsl r0
 b54:	00040e20 	andeq	r0, r4, r0, lsr #28
 b58:	b0200200 	eorlt	r0, r0, r0, lsl #4
 b5c:	60200002 	eorvs	r0, r0, r2
 b60:	01000000 	mrseq	r0, (UNDEF: 0)
 b64:	000b8c9c 	muleq	fp, ip, ip
 b68:	006f2400 	rsbeq	r2, pc, r0, lsl #8
 b6c:	02c22002 	sbceq	r2, r2, #2
 b70:	91020000 	mrsls	r0, (UNDEF: 2)
 b74:	02b81a6c 	adcseq	r1, r8, #108, 20	; 0x6c000
 b78:	00502000 	subseq	r2, r0, r0
 b7c:	69260000 	stmdbvs	r6!, {}	; <UNPREDICTABLE>
 b80:	90210200 	eorls	r0, r1, r0, lsl #4
 b84:	02000000 	andeq	r0, r0, #0
 b88:	00007491 	muleq	r0, r1, r4
 b8c:	0004d320 	andeq	sp, r4, r0, lsr #6
 b90:	501a0200 	andspl	r0, sl, r0, lsl #4
 b94:	60200002 	eorvs	r0, r0, r2
 b98:	01000000 	mrseq	r0, (UNDEF: 0)
 b9c:	000bc49c 	muleq	fp, ip, r4
 ba0:	006f2400 	rsbeq	r2, pc, r0, lsl #8
 ba4:	02c21a02 	sbceq	r1, r2, #8192	; 0x2000
 ba8:	91020000 	mrsls	r0, (UNDEF: 2)
 bac:	02581a6c 	subseq	r1, r8, #108, 20	; 0x6c000
 bb0:	00502000 	subseq	r2, r0, r0
 bb4:	69260000 	stmdbvs	r6!, {}	; <UNPREDICTABLE>
 bb8:	901b0200 	andsls	r0, fp, r0, lsl #4
 bbc:	02000000 	andeq	r0, r0, #0
 bc0:	00007491 	muleq	r0, r1, r4
 bc4:	0001e728 	andeq	lr, r1, r8, lsr #14
 bc8:	38160200 	ldmdacc	r6, {r9}
 bcc:	18200002 	stmdane	r0!, {r1}
 bd0:	01000000 	mrseq	r0, (UNDEF: 0)
 bd4:	000bf49c 	muleq	fp, ip, r4
 bd8:	006f2400 	rsbeq	r2, pc, r0, lsl #8
 bdc:	02c21602 	sbceq	r1, r2, #2097152	; 0x200000
 be0:	91020000 	mrsls	r0, (UNDEF: 2)
 be4:	00002374 	andeq	r2, r0, r4, ror r3
 be8:	16020000 	strne	r0, [r2], -r0
 bec:	00000090 	muleq	r0, r0, r0
 bf0:	00709102 	rsbseq	r9, r0, r2, lsl #2
 bf4:	00055628 	andeq	r5, r5, r8, lsr #12
 bf8:	20120200 	andscs	r0, r2, r0, lsl #4
 bfc:	18200002 	stmdane	r0!, {r1}
 c00:	01000000 	mrseq	r0, (UNDEF: 0)
 c04:	000c249c 	muleq	ip, ip, r4
 c08:	006f2400 	rsbeq	r2, pc, r0, lsl #8
 c0c:	02c21202 	sbceq	r1, r2, #536870912	; 0x20000000
 c10:	91020000 	mrsls	r0, (UNDEF: 2)
 c14:	03b92374 			; <UNDEFINED> instruction: 0x03b92374
 c18:	12020000 	andne	r0, r2, #0
 c1c:	00000090 	muleq	r0, r0, r0
 c20:	00709102 	rsbseq	r9, r0, r2, lsl #2
 c24:	0004bd2a 	andeq	fp, r4, sl, lsr #26
 c28:	90410100 	subls	r0, r1, r0, lsl #2
 c2c:	ec000000 	stc	0, cr0, [r0], {-0}
 c30:	34200001 	strtcc	r0, [r0], #-1
 c34:	01000000 	mrseq	r0, (UNDEF: 0)
 c38:	000c669c 	muleq	ip, ip, r6
 c3c:	006f2400 	rsbeq	r2, pc, r0, lsl #8
 c40:	01ad4101 			; <UNDEFINED> instruction: 0x01ad4101
 c44:	91020000 	mrsls	r0, (UNDEF: 2)
 c48:	01ae236c 			; <UNDEFINED> instruction: 0x01ae236c
 c4c:	41010000 	mrsmi	r0, (UNDEF: 1)
 c50:	00000090 	muleq	r0, r0, r0
 c54:	26689102 	strbtcs	r9, [r8], -r2, lsl #2
 c58:	00706d74 	rsbseq	r6, r0, r4, ror sp
 c5c:	00904201 	addseq	r4, r0, r1, lsl #4
 c60:	91020000 	mrsls	r0, (UNDEF: 2)
 c64:	df2a0074 	svcle	0x002a0074
 c68:	01000004 	tsteq	r0, r4
 c6c:	0000903b 	andeq	r9, r0, fp, lsr r0
 c70:	0001b800 	andeq	fp, r1, r0, lsl #16
 c74:	00003420 	andeq	r3, r0, r0, lsr #8
 c78:	a89c0100 	ldmge	ip, {r8}
 c7c:	2400000c 	strcs	r0, [r0], #-12
 c80:	3b01006f 	blcc	40e44 <startup-0x1ffbf1bc>
 c84:	000001ad 	andeq	r0, r0, sp, lsr #3
 c88:	236c9102 	cmncs	ip, #-2147483648	; 0x80000000
 c8c:	00000404 	andeq	r0, r0, r4, lsl #8
 c90:	00903b01 	addseq	r3, r0, r1, lsl #22
 c94:	91020000 	mrsls	r0, (UNDEF: 2)
 c98:	6d742668 	ldclvs	6, cr2, [r4, #-416]!	; 0xfffffe60
 c9c:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
 ca0:	00000090 	muleq	r0, r0, r0
 ca4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 ca8:	00019020 	andeq	r9, r1, r0, lsr #32
 cac:	e81f0100 	ldmda	pc, {r8}	; <UNPREDICTABLE>
 cb0:	d0200000 	eorle	r0, r0, r0
 cb4:	01000000 	mrseq	r0, (UNDEF: 0)
 cb8:	000cca9c 	muleq	ip, ip, sl
 cbc:	006f2400 	rsbeq	r2, pc, r0, lsl #8
 cc0:	01ad1f01 			; <UNDEFINED> instruction: 0x01ad1f01
 cc4:	91020000 	mrsls	r0, (UNDEF: 2)
 cc8:	14200074 	strtne	r0, [r0], #-116	; 0xffffff8c
 ccc:	01000002 	tsteq	r0, r2
 cd0:	00008819 	andeq	r8, r0, r9, lsl r8
 cd4:	00006020 	andeq	r6, r0, r0, lsr #32
 cd8:	029c0100 	addseq	r0, ip, #0, 2
 cdc:	2400000d 	strcs	r0, [r0], #-13
 ce0:	1901006f 	stmdbne	r1, {r0, r1, r2, r3, r5, r6}
 ce4:	000001ad 	andeq	r0, r0, sp, lsr #3
 ce8:	1a6c9102 	bne	1b250f8 <startup-0x1e4daf08>
 cec:	20000090 	mulcs	r0, r0, r0
 cf0:	00000050 	andeq	r0, r0, r0, asr r0
 cf4:	01006926 	tsteq	r0, r6, lsr #18
 cf8:	0000901a 	andeq	r9, r0, sl, lsl r0
 cfc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 d00:	0b200000 	bleq	800d08 <startup-0x1f7ff2f8>
 d04:	01000003 	tsteq	r0, r3
 d08:	00002813 	andeq	r2, r0, r3, lsl r8
 d0c:	00006020 	andeq	r6, r0, r0, lsr #32
 d10:	3a9c0100 	bcc	fe701118 <racket_2+0xde6ffff4>
 d14:	2400000d 	strcs	r0, [r0], #-13
 d18:	1301006f 	movwne	r0, #4207	; 0x106f
 d1c:	000001ad 	andeq	r0, r0, sp, lsr #3
 d20:	1a6c9102 	bne	1b25130 <startup-0x1e4daed0>
 d24:	20000030 	andcs	r0, r0, r0, lsr r0
 d28:	00000050 	andeq	r0, r0, r0, asr r0
 d2c:	01006926 	tsteq	r0, r6, lsr #18
 d30:	00009014 	andeq	r9, r0, r4, lsl r0
 d34:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 d38:	3b2c0000 	blcc	b00d40 <startup-0x1f4ff2c0>
 d3c:	01000004 	tsteq	r0, r4
 d40:	0000100f 	andeq	r1, r0, pc
 d44:	00001820 	andeq	r1, r0, r0, lsr #16
 d48:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 d4c:	0f01006f 	svceq	0x0001006f
 d50:	000001ad 	andeq	r0, r0, sp, lsr #3
 d54:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
 d58:	00000000 	andeq	r0, r0, r0
 d5c:	00900f01 	addseq	r0, r0, r1, lsl #30
 d60:	91020000 	mrsls	r0, (UNDEF: 2)
 d64:	Address 0x00000d64 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	01130200 	tsteq	r3, r0, lsl #4
  14:	0b0b0e03 	bleq	2c3828 <startup-0x1fd3c7d8>
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001301 	andeq	r1, r0, r1, lsl #6
  20:	03000d03 	movweq	r0, #3331	; 0xd03
  24:	3b0b3a08 	blcc	2ce84c <startup-0x1fd317b4>
  28:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  2c:	0400000b 	streq	r0, [r0], #-11
  30:	0b0b0024 	bleq	2c00c8 <startup-0x1fd3ff38>
  34:	0e030b3e 	vmoveq.16	d3[0], r0
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	2701150d 	strcs	r1, [r1, -sp, lsl #10]
  90:	01134919 	tsteq	r3, r9, lsl r9
  94:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  98:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  a4:	00001802 	andeq	r1, r0, r2, lsl #16
  a8:	0300340f 	movweq	r3, #1039	; 0x40f
  ac:	3b0b3a0e 	blcc	2ce8ec <startup-0x1fd31714>
  b0:	3f134905 	svccc	0x00134905
  b4:	00180219 	andseq	r0, r8, r9, lsl r2
  b8:	00341000 	eorseq	r1, r4, r0
  bc:	0b3a0e03 	bleq	e838d0 <startup-0x1f17c730>
  c0:	1349053b 	movtne	r0, #38203	; 0x953b
  c4:	00001802 	andeq	r1, r0, r2, lsl #16
  c8:	3f012e11 	svccc	0x00012e11
  cc:	3a0e0319 	bcc	380d38 <startup-0x1fc7f2c8>
  d0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  d4:	11134919 	tstne	r3, r9, lsl r9
  d8:	40061201 	andmi	r1, r6, r1, lsl #4
  dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  e0:	00001301 	andeq	r1, r0, r1, lsl #6
  e4:	03003412 	movweq	r3, #1042	; 0x412
  e8:	3b0b3a08 	blcc	2ce910 <startup-0x1fd316f0>
  ec:	02134905 	andseq	r4, r3, #81920	; 0x14000
  f0:	13000018 	movwne	r0, #24
  f4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  f8:	0b3a0e03 	bleq	e8390c <startup-0x1f17c6f4>
  fc:	0111053b 	tsteq	r1, fp, lsr r5
 100:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 104:	00194296 	mulseq	r9, r6, r2
 108:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 10c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 110:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 114:	01111927 	tsteq	r1, r7, lsr #18
 118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 11c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 120:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 124:	08030005 	stmdaeq	r3, {r0, r2}
 128:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 12c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 130:	0b160000 	bleq	580138 <startup-0x1fa7fec8>
 134:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 138:	00130106 	andseq	r0, r3, r6, lsl #2
 13c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 148:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 14c:	00001301 	andeq	r1, r0, r1, lsl #6
 150:	00001818 	andeq	r1, r0, r8, lsl r8
 154:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
 158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 15c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 160:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 164:	0b1a0000 	bleq	68016c <startup-0x1f97fe94>
 168:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 16c:	1b000006 	blne	18c <startup-0x1ffffe74>
 170:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 174:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 178:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 17c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 180:	03193f01 	tsteq	r9, #1, 30
 184:	3b0b3a0e 	blcc	2ce9c4 <startup-0x1fd3163c>
 188:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 18c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 190:	97184006 	ldrls	r4, [r8, -r6]
 194:	13011942 	movwne	r1, #6466	; 0x1942
 198:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 19c:	03193f01 	tsteq	r9, #1, 30
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	11192705 	tstne	r9, r5, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b0:	00001301 	andeq	r1, r0, r1, lsl #6
 1b4:	3f002e1e 	svccc	0x00002e1e
 1b8:	3a0e0319 	bcc	380e24 <startup-0x1fc7f1dc>
 1bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 1c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c4:	96184006 	ldrls	r4, [r8], -r6
 1c8:	00001942 	andeq	r1, r0, r2, asr #18
 1cc:	03012e1f 	movweq	r2, #7711	; 0x1e1f
 1d0:	3b0b3a0e 	blcc	2cea10 <startup-0x1fd315f0>
 1d4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 1d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1dc:	96184006 	ldrls	r4, [r8], -r6
 1e0:	13011942 	movwne	r1, #6466	; 0x1942
 1e4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 1e8:	03193f01 	tsteq	r9, #1, 30
 1ec:	3b0b3a0e 	blcc	2cea2c <startup-0x1fd315d4>
 1f0:	1119270b 	tstne	r9, fp, lsl #14
 1f4:	40061201 	andmi	r1, r6, r1, lsl #4
 1f8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1fc:	00001301 	andeq	r1, r0, r1, lsl #6
 200:	3f002e21 	svccc	0x00002e21
 204:	3a0e0319 	bcc	380e70 <startup-0x1fc7f190>
 208:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 20c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 210:	96184006 	ldrls	r4, [r8], -r6
 214:	00001942 	andeq	r1, r0, r2, asr #18
 218:	03012e22 	movweq	r2, #7714	; 0x1e22
 21c:	3b0b3a0e 	blcc	2cea5c <startup-0x1fd315a4>
 220:	1119270b 	tstne	r9, fp, lsl #14
 224:	40061201 	andmi	r1, r6, r1, lsl #4
 228:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 22c:	00001301 	andeq	r1, r0, r1, lsl #6
 230:	03000523 	movweq	r0, #1315	; 0x523
 234:	3b0b3a0e 	blcc	2cea74 <startup-0x1fd3158c>
 238:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 23c:	24000018 	strcs	r0, [r0], #-24	; 0xffffffe8
 240:	08030005 	stmdaeq	r3, {r0, r2}
 244:	0b3b0b3a 	bleq	ec2f34 <startup-0x1f13d0cc>
 248:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 24c:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 250:	3a0e0301 	bcc	380e5c <startup-0x1fc7f1a4>
 254:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 258:	11134919 	tstne	r3, r9, lsl r9
 25c:	40061201 	andmi	r1, r6, r1, lsl #4
 260:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 264:	00001301 	andeq	r1, r0, r1, lsl #6
 268:	03003426 	movweq	r3, #1062	; 0x426
 26c:	3b0b3a08 	blcc	2cea94 <startup-0x1fd3156c>
 270:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 274:	27000018 	smladcs	r0, r8, r0, r0
 278:	0e03012e 	adfeqsp	f0, f3, #0.5
 27c:	0b3b0b3a 	bleq	ec2f6c <startup-0x1f13d094>
 280:	01111927 	tsteq	r1, r7, lsr #18
 284:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 288:	01194297 			; <UNDEFINED> instruction: 0x01194297
 28c:	28000013 	stmdacs	r0, {r0, r1, r4}
 290:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 294:	0b3a0e03 	bleq	e83aa8 <startup-0x1f17c558>
 298:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 29c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2a4:	00130119 	andseq	r0, r3, r9, lsl r1
 2a8:	002e2900 	eoreq	r2, lr, r0, lsl #18
 2ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b0:	0b3b0b3a 	bleq	ec2fa0 <startup-0x1f13d060>
 2b4:	01111927 	tsteq	r1, r7, lsr #18
 2b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2bc:	00194297 	mulseq	r9, r7, r2
 2c0:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 2c4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c8:	0b3b0b3a 	bleq	ec2fb8 <startup-0x1f13d048>
 2cc:	13491927 	movtne	r1, #39207	; 0x9927
 2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2d8:	00130119 	andseq	r0, r3, r9, lsl r1
 2dc:	012e2b00 			; <UNDEFINED> instruction: 0x012e2b00
 2e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 2ec:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
 2f0:	03193f01 	tsteq	r9, #1, 30
 2f4:	3b0b3a0e 	blcc	2ceb34 <startup-0x1fd314cc>
 2f8:	1119270b 	tstne	r9, fp, lsl #14
 2fc:	40061201 	andmi	r1, r6, r1, lsl #4
 300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 304:	Address 0x00000304 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001020 	andeq	r1, r0, r0, lsr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20001030 	andcs	r1, r0, r0, lsr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000336 	andeq	r0, r0, r6, lsr r3
   4:	00800002 	addeq	r0, r0, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c63696e 			; <UNDEFINED> instruction: 0x6c63696e
  28:	41442f61 	cmpmi	r4, r1, ror #30
  2c:	37313054 			; <UNDEFINED> instruction: 0x37313054
  30:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  34:	6f4d2f31 	svcvs	0x004d2f31
  38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  44:	6f702f72 	svcvs	0x00702f72
  48:	775f676e 	ldrbvc	r6, [pc, -lr, ror #14]
  4c:	696b726f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  50:	0000676e 	andeq	r6, r0, lr, ror #14
  54:	6b636172 	blvs	18d8624 <startup-0x1e7279dc>
  58:	682e7465 	stmdavs	lr!, {r0, r2, r5, r6, sl, ip, sp, lr}
  5c:	00000100 	andeq	r0, r0, r0, lsl #2
  60:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  64:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  68:	0100682e 	tsteq	r0, lr, lsr #16
  6c:	74730000 	ldrbtvc	r0, [r3], #-0
  70:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  74:	00632e70 	rsbeq	r2, r3, r0, ror lr
  78:	67000001 	strvs	r0, [r0, -r1]
  7c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  80:	2e797274 	mrccs	2, 3, r7, cr9, cr4, {3}
  84:	00010068 	andeq	r0, r1, r8, rrx
  88:	05000000 	streq	r0, [r0, #-0]
  8c:	00001002 	andeq	r1, r0, r2
  90:	010e0320 	tsteq	lr, r0, lsr #6
  94:	4b4c3d59 	blmi	130f600 <startup-0x1ecf0a00>
  98:	03040200 	movweq	r0, #16896	; 0x4200
  9c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  a0:	00ab0803 	adceq	r0, fp, r3, lsl #16
  a4:	06010402 	streq	r0, [r1], -r2, lsl #8
  a8:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
  ac:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  b0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  b4:	ab080304 	blge	200ccc <startup-0x1fdff334>
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
  c0:	754b4b4d 	strbvc	r4, [fp, #-2893]	; 0xfffff4b3
  c4:	85594b76 	ldrbhi	r4, [r9, #-2934]	; 0xfffff48a
  c8:	4b775983 	blmi	1dd66dc <startup-0x1e229924>
  cc:	59838559 	stmibpl	r3, {r0, r3, r4, r6, r8, sl, pc}
  d0:	594c4b76 	stmdbpl	ip, {r1, r2, r4, r5, r6, r8, r9, fp, lr}^
  d4:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
  d8:	00660602 	rsbeq	r0, r6, r2, lsl #12
  dc:	3c030402 	cfstrscc	mvf0, [r3], {2}
  e0:	4c212f06 	stcmi	15, cr2, [r1], #-24	; 0xffffffe8
  e4:	02005959 	andeq	r5, r0, #1458176	; 0x164000
  e8:	66060204 	strvs	r0, [r6], -r4, lsl #4
  ec:	03040200 	movweq	r0, #16896	; 0x4200
  f0:	212f063c 			; <UNDEFINED> instruction: 0x212f063c
  f4:	4d030204 	sfmmi	f0, 4, [r3, #-16]
  f8:	4c3d594a 			; <UNDEFINED> instruction: 0x4c3d594a
  fc:	4b4c3d59 	blmi	130f668 <startup-0x1ecf0998>
 100:	03040200 	movweq	r0, #16896	; 0x4200
 104:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 108:	00ab0803 	adceq	r0, fp, r3, lsl #16
 10c:	06010402 	streq	r0, [r1], -r2, lsl #8
 110:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 114:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 118:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 11c:	ab080304 	blge	200d34 <startup-0x1fdff2cc>
 120:	01040200 	mrseq	r0, R12_usr
 124:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 128:	004d674d 	subeq	r6, sp, sp, asr #14
 12c:	06010402 	streq	r0, [r1], -r2, lsl #8
 130:	03910690 	orrseq	r0, r1, #144, 12	; 0x9000000
 134:	76755814 			; <UNDEFINED> instruction: 0x76755814
 138:	5b83674b 	blpl	fe0d9e6c <racket_2+0xde0d8d48>
 13c:	59594c4b 	ldmdbpl	r9, {r0, r1, r3, r6, sl, fp, lr}^
 140:	02040200 	andeq	r0, r4, #0, 4
 144:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 148:	063c0304 	ldrteq	r0, [ip], -r4, lsl #6
 14c:	594c212f 	stmdbpl	ip, {r0, r1, r2, r3, r5, r8, sp}^
 150:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 154:	00660602 	rsbeq	r0, r6, r2, lsl #12
 158:	3c030402 	cfstrscc	mvf0, [r3], {2}
 15c:	4d212f06 	stcmi	15, cr2, [r1, #-24]!	; 0xffffffe8
 160:	c93d3d59 	ldmdbgt	sp!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 164:	00cac9ca 	sbceq	ip, sl, sl, asr #19
 168:	06010402 	streq	r0, [r1], -r2, lsl #8
 16c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 170:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 174:	03060204 	movweq	r0, #25092	; 0x6204
 178:	02002e79 	andeq	r2, r0, #1936	; 0x790
 17c:	3c060104 	stfccs	f0, [r6], {4}
 180:	02040200 	andeq	r0, r4, #0, 4
 184:	02006506 	andeq	r6, r0, #25165824	; 0x1800000
 188:	3c060104 	stfccs	f0, [r6], {4}
 18c:	660c0306 	strvs	r0, [ip], -r6, lsl #6
 190:	03030421 	movweq	r0, #13345	; 0x3421
 194:	3f2f4a57 	svccc	0x002f4a57
 198:	3f3d3d3d 	svccc	0x003d3d3d
 19c:	084b3f4d 	stmdaeq	fp, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}^
 1a0:	3d3d2f77 	ldccc	15, cr2, [sp, #-476]!	; 0xfffffe24
 1a4:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 1a8:	20060104 	andcs	r0, r6, r4, lsl #2
 1ac:	a13d6706 	teqge	sp, r6, lsl #14
 1b0:	3f2f2f2f 	svccc	0x002f2f2f
 1b4:	2009034f 	andcs	r0, r9, pc, asr #6
 1b8:	3d224f4d 	stccc	15, cr4, [r2, #-308]!	; 0xfffffecc
 1bc:	4e443859 	mcrmi	8, 2, r3, cr4, cr9, {2}
 1c0:	6768e567 	strbvs	lr, [r8, -r7, ror #10]!
 1c4:	7a6769d7 	bvc	19da928 <startup-0x1e6256d8>
 1c8:	50207a03 	eorpl	r7, r0, r3, lsl #20
 1cc:	75754b1b 	ldrbvc	r4, [r5, #-2843]!	; 0xfffff4e5
 1d0:	3d3f4d4c 	ldccc	13, cr4, [pc, #-304]!	; a8 <startup-0x1fffff58>
 1d4:	323d3d3d 	eorscc	r3, sp, #3904	; 0xf40
 1d8:	4b752f3d 	blmi	1d4bed4 <startup-0x1e2b412c>
 1dc:	2423293d 	strtcs	r2, [r3], #-2365	; 0xfffff6c3
 1e0:	68cb3d3d 	stmiavs	fp, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
 1e4:	3d3d5a3d 	vldmdbcc	sp!, {s10-s70}
 1e8:	592f3d2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 1ec:	3d5a3e3d 	ldclcc	14, cr3, [sl, #-244]	; 0xffffff0c
 1f0:	303d5a30 	eorscc	r5, sp, r0, lsr sl
 1f4:	4b91cb3d 	blmi	fe472ef0 <racket_2+0xde471dcc>
 1f8:	2f3d2f59 	svccs	0x003d2f59
 1fc:	303d5a3d 	eorscc	r5, sp, sp, lsr sl
 200:	3d313d5a 	ldccc	13, cr3, [r1, #-360]!	; 0xfffffe98
 204:	91773d3d 	cmnls	r7, sp, lsr sp
 208:	4c833d3d 	stcmi	13, cr3, [r3], {61}	; 0x3d
 20c:	3d3d3d91 	ldccc	13, cr3, [sp, #-580]!	; 0xfffffdbc
 210:	3d2f4d83 	stccc	13, cr4, [pc, #-524]!	; c <startup-0x1ffffff4>
 214:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 218:	4b4b4b4b 	blmi	12d2f4c <startup-0x1ed2d0b4>
 21c:	3e3f3d4b 	cdpcc	13, 3, cr3, cr15, cr11, {2}
 220:	004b9f4c 	subeq	r9, fp, ip, asr #30
 224:	4c030402 	cfstrsmi	mvf0, [r3], {2}
 228:	03040200 	movweq	r0, #16896	; 0x4200
 22c:	04020048 	streq	r0, [r2], #-72	; 0xffffffb8
 230:	00580601 	subseq	r0, r8, r1, lsl #12
 234:	06020402 	streq	r0, [r2], -r2, lsl #8
 238:	04020046 	streq	r0, [r2], #-70	; 0xffffffba
 23c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 240:	4d4a0903 	vstrmi.16	s1, [sl, #-6]	; <UNPREDICTABLE>
 244:	4d675967 			; <UNDEFINED> instruction: 0x4d675967
 248:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 24c:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 250:	1308754d 	movwne	r7, #34125	; 0x854d
 254:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 258:	5b595959 	blpl	16567c4 <startup-0x1e9a983c>
 25c:	4b3d773d 	blmi	f5df58 <startup-0x1f0a20a8>
 260:	d7c9764c 	strble	r7, [r9, ip, asr #12]
 264:	0200c99f 	andeq	ip, r0, #2605056	; 0x27c000
 268:	3c060104 	stfccs	f0, [r6], {4}
 26c:	a09fad06 	addsge	sl, pc, r6, lsl #26
 270:	03586003 	cmpeq	r8, #3
 274:	68862021 	stmvs	r6, {r0, r5, sp}
 278:	6959bb59 	ldmdbvs	r9, {r0, r3, r4, r6, r8, r9, fp, ip, sp, pc}^
 27c:	13085968 	movwne	r5, #35176	; 0x8968
 280:	3d677759 	stclcc	7, cr7, [r7, #-356]!	; 0xfffffe9c
 284:	692f3d4b 	stmdbvs	pc!, {r0, r1, r3, r6, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 288:	4e593d67 	cdpmi	13, 5, cr3, cr9, cr7, {3}
 28c:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 290:	2f3d3e4d 	svccs	0x003d3e4d
 294:	2f3d4b2f 	svccs	0x003d4b2f
 298:	3d3d3e69 	ldccc	14, cr3, [sp, #-420]!	; 0xfffffe5c
 29c:	2f3d593d 	svccs	0x003d593d
 2a0:	02002fa1 	andeq	r2, r0, #644	; 0x284
 2a4:	20060104 	andcs	r0, r6, r4, lsl #2
 2a8:	3f3d8306 	svccc	0x003d8306
 2ac:	3e592f67 	cdpcc	15, 5, cr2, cr9, cr7, {3}
 2b0:	3d2f2f4d 	stccc	15, cr2, [pc, #-308]!	; 184 <startup-0x1ffffe7c>
 2b4:	3d3d2f3d 	ldccc	15, cr2, [sp, #-244]!	; 0xffffff0c
 2b8:	2f3d3d2f 	svccs	0x003d3d2f
 2bc:	913f3d3d 	teqls	pc, sp, lsr sp	; <UNPREDICTABLE>
 2c0:	69bd4b30 	ldmibvs	sp!, {r4, r5, r8, r9, fp, lr}
 2c4:	67594e9f 			; <UNDEFINED> instruction: 0x67594e9f
 2c8:	594b4d59 	stmdbpl	fp, {r0, r3, r4, r6, r8, sl, fp, lr}^
 2cc:	2f2fd783 	svccs	0x002fd783
 2d0:	4d222f2f 	stcmi	15, cr2, [r2, #-188]!	; 0xffffff44
 2d4:	673e7559 			; <UNDEFINED> instruction: 0x673e7559
 2d8:	02003e67 	andeq	r3, r0, #1648	; 0x670
 2dc:	7a030204 	bvc	c0af4 <startup-0x1ff3f50c>
 2e0:	04020090 	streq	r0, [r2], #-144	; 0xffffff70
 2e4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2e8:	003c0903 	eorseq	r0, ip, r3, lsl #18
 2ec:	21010402 	tstcs	r1, r2, lsl #8
 2f0:	67914b76 			; <UNDEFINED> instruction: 0x67914b76
 2f4:	911b344b 	tstls	fp, fp, asr #8
 2f8:	92304b67 	eorsls	r4, r0, #105472	; 0x19c00
 2fc:	3d3d594b 			; <UNDEFINED> instruction: 0x3d3d594b
 300:	4b314c59 	blmi	c5346c <startup-0x1f3acb94>
 304:	3d3d3d91 	ldccc	13, cr3, [sp, #-580]!	; 0xfffffdbc
 308:	00c90394 	smulleq	r0, r9, r4, r3
 30c:	2f2f3f90 	svccs	0x002f3f90
 310:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
 314:	674b3330 	smlaldxvs	r3, fp, r0, r3
 318:	c9915a59 	ldmibgt	r1, {r0, r3, r4, r6, r9, fp, ip, lr}
 31c:	03837583 	orreq	r7, r3, #549453824	; 0x20c00000
 320:	0b027476 	bleq	9d500 <startup-0x1ff62b00>
 324:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
 328:	02050003 	andeq	r0, r5, #3
 32c:	20000000 	andcs	r0, r0, r0
 330:	13013403 	movwne	r3, #5123	; 0x1403
 334:	0003025e 	andeq	r0, r3, lr, asr r2
 338:	Address 0x00000338 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	74007964 	strvc	r7, [r0], #-2404	; 0xfffff69c
   8:	676e6f50 			; <UNDEFINED> instruction: 0x676e6f50
   c:	6c6c6142 	stfvse	f6, [ip], #-264	; 0xfffffef8
  10:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
  14:	70005274 	andvc	r5, r0, r4, ror r2
  18:	0078736f 	rsbseq	r7, r8, pc, ror #6
  1c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  20:	6972006c 	ldmdbvs	r2!, {r2, r3, r5, r6}^
  24:	52746867 	rsbspl	r6, r4, #6750208	; 0x670000
  28:	41525000 	cmpmi	r2, r0
  2c:	54454b43 	strbpl	r4, [r5], #-2883	; 0xfffff4bd
  30:	61726700 	cmnvs	r2, r0, lsl #14
  34:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  38:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  3c:	61446574 	hvcvs	18004	; 0x4654
  40:	47006174 	smlsdxmi	r0, r4, r1, r6
  44:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  48:	36203939 			; <UNDEFINED> instruction: 0x36203939
  4c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
  50:	31303220 	teqcc	r0, r0, lsr #4
  54:	31323037 	teqcc	r2, r7, lsr r0
  58:	72282035 	eorvc	r2, r8, #53	; 0x35
  5c:	61656c65 	cmnvs	r5, r5, ror #24
  60:	20296573 	eorcs	r6, r9, r3, ror r5
  64:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  68:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
  6c:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  70:	2d362d64 	ldccs	13, cr2, [r6, #-400]!	; 0xfffffe70
  74:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  78:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  7c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  80:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  84:	35353432 	ldrcc	r3, [r5, #-1074]!	; 0xfffffbce
  88:	205d3231 	subscs	r3, sp, r1, lsr r2
  8c:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  90:	20626d75 	rsbcs	r6, r2, r5, ror sp
  94:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  98:	613d6863 	teqvs	sp, r3, ror #16
  9c:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  a0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  a4:	6f6c666d 	svcvs	0x006c666d
  a8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  ac:	733d6962 	teqvc	sp, #1605632	; 0x188000
  b0:	2074666f 	rsbscs	r6, r4, pc, ror #12
  b4:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
  b8:	20626d75 	rsbcs	r6, r2, r5, ror sp
  bc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  c0:	613d6863 	teqvs	sp, r3, ror #16
  c4:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  c8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  cc:	4f2d2067 	svcmi	0x002d2067
  d0:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  d4:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  d8:	62003939 	andvs	r3, r0, #933888	; 0xe4000
  dc:	006c6c61 	rsbeq	r6, ip, r1, ror #24
  e0:	6f654774 	svcvs	0x00654774
  e4:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  e8:	69730079 	ldmdbvs	r3!, {r0, r3, r4, r5, r6}^
  ec:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
  f0:	70006570 	andvc	r6, r0, r0, ror r5
  f4:	63735f32 	cmnvs	r3, #50, 30	; 0xc8
  f8:	0065726f 	rsbeq	r7, r5, pc, ror #4
  fc:	6b636172 	blvs	18d86cc <startup-0x1e727934>
 100:	315f7465 	cmpcc	pc, r5, ror #8
 104:	63617200 	cmnvs	r1, #0, 4
 108:	5f74656b 	svcpl	0x0074656b
 10c:	6f630032 	svcvs	0x00630032
 110:	64696c6c 	strbtvs	r6, [r9], #-3180	; 0xfffff394
 114:	616d0065 	cmnvs	sp, r5, rrx
 118:	6f006e69 	svcvs	0x00006e69
 11c:	64617475 	strbtvs	r7, [r1], #-1141	; 0xfffffb8b
 120:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 124:	65686300 	strbvs	r6, [r8, #-768]!	; 0xfffffd00
 128:	61566b63 	cmpvs	r6, r3, ror #22
 12c:	7365756c 	cmnvc	r5, #108, 10	; 0x1b000000
 130:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 134:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 7a <startup-0x1fffff86>	; <UNPREDICTABLE>
 138:	6f726b69 	svcvs	0x00726b69
 13c:	45475000 	strbmi	r5, [r7, #-0]
 140:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 144:	70005952 	andvc	r5, r0, r2, asr r9
 148:	785f736f 	ldmdavc	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 14c:	6e6f705f 	mcrvs	0, 3, r7, cr15, cr15, {2}
 150:	6c616267 	sfmvs	f6, 2, [r1], #-412	; 0xfffffe64
 154:	6e695f6c 	cdpvs	15, 6, cr5, cr9, cr12, {3}
 158:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 15c:	69007364 	stmdbvs	r0, {r2, r5, r6, r8, r9, ip, sp, lr}
 160:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 164:	61726700 	cmnvs	r2, r0, lsl #14
 168:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 16c:	6165725f 	cmnvs	r5, pc, asr r2
 170:	4f500064 	svcmi	0x00500064
 174:	00544e49 	subseq	r4, r4, r9, asr #28
 178:	6d746962 			; <UNDEFINED> instruction: 0x6d746962
 17c:	006b7361 	rsbeq	r7, fp, r1, ror #6
 180:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 184:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 188:	35327961 	ldrcc	r7, [r2, #-2401]!	; 0xfffff69f
 18c:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 190:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 194:	6361725f 	cmnvs	r1, #-268435451	; 0xf0000005
 198:	0074656b 	rsbseq	r6, r4, fp, ror #10
 19c:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 1a0:	72696400 	rsbvc	r6, r9, #0, 8
 1a4:	74730079 	ldrbtvc	r0, [r3], #-121	; 0xffffff87
 1a8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1ac:	6f700070 	svcvs	0x00700070
 1b0:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
 1b4:	00796e6f 	rsbseq	r6, r9, pc, ror #28
 1b8:	70617267 	rsbvc	r7, r1, r7, ror #4
 1bc:	5f636968 	svcpl	0x00636968
 1c0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 1c4:	7a696c61 	bvc	1a5b350 <startup-0x1e5a4cb0>
 1c8:	656b0065 	strbvs	r0, [fp, #-101]!	; 0xffffff9b
 1cc:	73006279 	movwvc	r6, #633	; 0x279
 1d0:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 1d4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1d8:	7300795f 	movwvc	r7, #2399	; 0x95f
 1dc:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 1e0:	7a697300 	bvc	1a5cde8 <startup-0x1e5a3218>
 1e4:	73007965 	movwvc	r7, #2405	; 0x965
 1e8:	6f5f7465 	svcvs	0x005f7465
 1ec:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1f0:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 1f4:	5f646565 	svcpl	0x00646565
 1f8:	72670079 	rsbvc	r0, r7, #121	; 0x79
 1fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 200:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 204:	00657469 	rsbeq	r7, r5, r9, ror #8
 208:	616c6564 	cmnvs	ip, r4, ror #10
 20c:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 210:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 214:	61656c63 	cmnvs	r5, r3, ror #24
 218:	61725f72 	cmnvs	r2, r2, ror pc
 21c:	74656b63 	strbtvc	r6, [r5], #-2915	; 0xfffff49d
 220:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 224:	73610073 	cmnvc	r1, #115	; 0x73
 228:	5f696963 	svcpl	0x00696963
 22c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 230:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 234:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 238:	6e007261 	cdpvs	2, 0, cr7, cr0, cr1, {3}
 23c:	6f706d75 	svcvs	0x00706d75
 240:	73746e69 	cmnvc	r4, #1680	; 0x690
 244:	736e7500 	cmnvc	lr, #0, 10
 248:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 24c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 250:	67007261 	strvs	r7, [r0, -r1, ror #4]
 254:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 258:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 25c:	5f6c7274 	svcpl	0x006c7274
 260:	5f746962 	svcpl	0x00746962
 264:	61656c63 	cmnvs	r5, r3, ror #24
 268:	63610072 	cmnvs	r1, #114	; 0x72
 26c:	61766974 	cmnvs	r6, r4, ror r9
 270:	6f526574 	svcvs	0x00526574
 274:	72670077 	rsbvc	r0, r7, #119	; 0x77
 278:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 27c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 280:	43657469 	cmnmi	r5, #1761607680	; 0x69000000
 284:	616d6d6f 	cmnvs	sp, pc, ror #26
 288:	7300646e 	movwvc	r6, #1134	; 0x46e
 28c:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 290:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 294:	7400785f 	strvc	r7, [r0], #-2143	; 0xfffff7a1
 298:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 29c:	6f700074 	svcvs	0x00700074
 2a0:	5f785f73 	svcpl	0x00785f73
 2a4:	6f626e69 	svcvs	0x00626e69
 2a8:	73646e75 	cmnvc	r4, #1872	; 0x750
 2ac:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 2b0:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 2b4:	736e7500 	cmnvc	lr, #0, 10
 2b8:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2bc:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 2c0:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 2c4:	5f79616c 	svcpl	0x0079616c
 2c8:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 2cc:	6f630073 	svcvs	0x00630073
 2d0:	6156736c 	cmpvs	r6, ip, ror #6
 2d4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 2d8:	735f3170 	cmpvc	pc, #112, 2
 2dc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xfffff09d
 2e0:	65686300 	strbvs	r6, [r8, #-768]!	; 0xfffffd00
 2e4:	6f466b63 	svcvs	0x00466b63
 2e8:	616f4772 	smcvs	62578	; 0xf472
 2ec:	7400736c 	strvc	r7, [r0], #-876	; 0xfffffc94
 2f0:	6b636152 	blvs	18d8840 <startup-0x1e7277c0>
 2f4:	61007465 	tstvs	r0, r5, ror #8
 2f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 2fc:	746f675f 	strbtvc	r6, [pc], #-1887	; 304 <startup-0x1ffffcfc>
 300:	0079786f 	rsbseq	r7, r9, pc, ror #16
 304:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 308:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
 30c:	5f776172 	svcpl	0x00776172
 310:	6b636172 	blvs	18d88e0 <startup-0x1e727720>
 314:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
 318:	5f74696e 	svcpl	0x0074696e
 31c:	00707061 	rsbseq	r7, r0, r1, rrx
 320:	70736964 	rsbsvc	r6, r3, r4, ror #18
 324:	5f79616c 	svcpl	0x0079616c
 328:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 32c:	61726700 	cmnvs	r2, r0, lsl #14
 330:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 334:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 338:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 33c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 340:	73610074 	cmnvc	r1, #116	; 0x74
 344:	5f696963 	svcpl	0x00696963
 348:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 34c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 350:	70007261 	andvc	r7, r0, r1, ror #4
 354:	795f736f 	ldmdbvc	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 358:	626e695f 	rsbvs	r6, lr, #1556480	; 0x17c000
 35c:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 360:	65720073 	ldrbvs	r0, [r2, #-115]!	; 0xffffff8d
 364:	42746573 	rsbsmi	r6, r4, #482344960	; 0x1cc00000
 368:	506c6c61 	rsbpl	r6, ip, r1, ror #24
 36c:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
 370:	006e6f69 	rsbeq	r6, lr, r9, ror #30
 374:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 378:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 37c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 380:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 384:	77007465 	strvc	r7, [r0, -r5, ror #8]
 388:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 38c:	726f6353 	rsbvc	r6, pc, #1275068417	; 0x4c000001
 390:	73610065 	cmnvc	r1, #101	; 0x65
 394:	5f696963 	svcpl	0x00696963
 398:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 39c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 3a0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1d8 <startup-0x1ffffe28>
 3a4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3a8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 3ac:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 3b0:	5f657469 	svcpl	0x00657469
 3b4:	61746164 	cmnvs	r4, r4, ror #2
 3b8:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 3bc:	00786465 	rsbseq	r6, r8, r5, ror #8
 3c0:	70617267 	rsbvc	r7, r1, r7, ror #4
 3c4:	5f636968 	svcpl	0x00636968
 3c8:	61656c63 	cmnvs	r5, r3, ror #24
 3cc:	72635372 	rsbvc	r5, r3, #-939524095	; 0xc8000001
 3d0:	006e6565 	rsbeq	r6, lr, r5, ror #10
 3d4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 3d8:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 3dc:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 3e0:	72006465 	andvc	r6, r0, #1694498816	; 0x65000000
 3e4:	5f746365 	svcpl	0x00746365
 3e8:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 254 <startup-0x1ffffdac>
 3ec:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 3f0:	61726700 	cmnvs	r2, r0, lsl #14
 3f4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3f8:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 3fc:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 400:	00796461 	rsbseq	r6, r9, r1, ror #8
 404:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 408:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 40c:	6c630078 	stclvs	0, cr0, [r3], #-480	; 0xfffffe20
 410:	5f726165 	svcpl	0x00726165
 414:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 418:	62007463 	andvs	r7, r0, #1660944384	; 0x63000000
 41c:	5f6c6c61 	svcpl	0x006c6c61
 420:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 28c <startup-0x1ffffd74>
 424:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 428:	6c657300 	stclvs	3, cr7, [r5], #-0
 42c:	5f746365 	svcpl	0x00746365
 430:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 434:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 438:	73007265 	movwvc	r7, #613	; 0x265
 43c:	725f7465 	subsvc	r7, pc, #1694498816	; 0x65000000
 440:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
 444:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 448:	00646565 	rsbeq	r6, r4, r5, ror #10
 44c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 450:	54646e61 	strbtpl	r6, [r4], #-3681	; 0xfffff19f
 454:	6972576f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
 458:	43006574 	movwmi	r6, #1396	; 0x574
 45c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 460:	2f737265 	svccs	0x00737265
 464:	6c63696e 			; <UNDEFINED> instruction: 0x6c63696e
 468:	41442f61 	cmpmi	r4, r1, ror #30
 46c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 470:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 474:	6f4d2f31 	svcvs	0x004d2f31
 478:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 47c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 480:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 484:	6f702f72 	svcvs	0x00702f72
 488:	775f676e 	ldrbvc	r6, [pc, -lr, ror #14]
 48c:	696b726f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 490:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
 494:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 498:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 49c:	616e6900 	cmnvs	lr, r0, lsl #18
 4a0:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 4a4:	73610073 	cmnvc	r1, #115	; 0x73
 4a8:	5f696963 	svcpl	0x00696963
 4ac:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4b0:	6f635f65 	svcvs	0x00635f65
 4b4:	6f72746e 	svcvs	0x0072746e
 4b8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4bc:	736f7000 	cmnvc	pc, #0
 4c0:	725f795f 	subsvc	r7, pc, #1556480	; 0x17c000
 4c4:	656b6361 	strbvs	r6, [fp, #-865]!	; 0xfffffc9f
 4c8:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
 4cc:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 4d0:	64007364 	strvs	r7, [r0], #-868	; 0xfffffc9c
 4d4:	5f776172 	svcpl	0x00776172
 4d8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 4dc:	70007463 	andvc	r7, r0, r3, ror #8
 4e0:	785f736f 	ldmdavc	pc, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 4e4:	6361725f 	cmnvs	r1, #-268435451	; 0xf0000005
 4e8:	5f74656b 	svcpl	0x0074656b
 4ec:	6f626e69 	svcvs	0x00626e69
 4f0:	73646e75 	cmnvc	r4, #1872	; 0x750
 4f4:	63736100 	cmnvs	r3, #0, 2
 4f8:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 4fc:	5f746961 	svcpl	0x00746961
 500:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 504:	6f700079 	svcvs	0x00700079
 508:	5f795f73 	svcpl	0x00795f73
 50c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
 510:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 514:	626e695f 	rsbvs	r6, lr, #1556480	; 0x17c000
 518:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 51c:	50500073 	subspl	r0, r0, r3, ror r0
 520:	42474e4f 	submi	r4, r7, #1264	; 0x4f0
 524:	004c4c41 	subeq	r4, ip, r1, asr #24
 528:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 52c:	6a626f5f 	bvs	189c2b0 <startup-0x1e763d50>
 530:	00746365 	rsbseq	r6, r4, r5, ror #6
 534:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 538:	63736100 	cmnvs	r3, #0, 2
 53c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 540:	5f646165 	svcpl	0x00646165
 544:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 548:	61007375 	tstvs	r0, r5, ror r3
 54c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 550:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 554:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 558:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 55c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 560:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 564:	785f6465 	ldmdavc	pc, {r0, r2, r5, r6, sl, sp, lr}^	; <UNPREDICTABLE>
 568:	63736100 	cmnvs	r3, #0, 2
 56c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 570:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 574:	646d635f 	strbtvs	r6, [sp], #-863	; 0xfffffca1
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000018 	andeq	r0, r0, r8, lsl r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	100e4101 	andne	r4, lr, r1, lsl #2
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000028 	andcs	r0, r0, r8, lsr #32
  3c:	00000060 	andeq	r0, r0, r0, rrx
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000088 	andcs	r0, r0, r8, lsl #1
  5c:	00000060 	andeq	r0, r0, r0, rrx
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	180e4101 	stmdane	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000e8 	andcs	r0, r0, r8, ror #1
  7c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
  9c:	00000034 	andeq	r0, r0, r4, lsr r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	200001ec 	andcs	r0, r0, ip, ror #3
  bc:	00000034 	andeq	r0, r0, r4, lsr r0
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	180e4101 	stmdane	lr, {r0, r8, lr}
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	20000220 	andcs	r0, r0, r0, lsr #4
  dc:	00000018 	andeq	r0, r0, r8, lsl r0
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	20000238 	andcs	r0, r0, r8, lsr r2
  fc:	00000018 	andeq	r0, r0, r8, lsl r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	20000250 	andcs	r0, r0, r0, asr r2
 11c:	00000060 	andeq	r0, r0, r0, rrx
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	180e4101 	stmdane	lr, {r0, r8, lr}
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	200002b0 			; <UNDEFINED> instruction: 0x200002b0
 13c:	00000060 	andeq	r0, r0, r0, rrx
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	180e4101 	stmdane	lr, {r0, r8, lr}
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000310 	andcs	r0, r0, r0, lsl r3
 15c:	0000009c 	muleq	r0, ip, r0
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	180e4101 	stmdane	lr, {r0, r8, lr}
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	200003ac 	andcs	r0, r0, ip, lsr #7
 17c:	00000034 	andeq	r0, r0, r4, lsr r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003e0 	andcs	r0, r0, r0, ror #7
 19c:	00000034 	andeq	r0, r0, r4, lsr r0
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000414 	andcs	r0, r0, r4, lsl r4
 1bc:	000000c0 	andeq	r0, r0, r0, asr #1
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	280e4101 	stmdacs	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000000c 	andeq	r0, r0, ip
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000000 	andcs	r0, r0, r0
 1dc:	0000000c 	andeq	r0, r0, ip
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	200004d4 	ldrdcs	r0, [r0], -r4
 1ec:	00000068 	andeq	r0, r0, r8, rrx
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1fc:	00000018 	andeq	r0, r0, r8, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	2000053c 	andcs	r0, r0, ip, lsr r5
 208:	00000044 	andeq	r0, r0, r4, asr #32
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 218:	00000018 	andeq	r0, r0, r8, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000580 	andcs	r0, r0, r0, lsl #11
 224:	00000012 	andeq	r0, r0, r2, lsl r0
 228:	40080e41 	andmi	r0, r8, r1, asr #28
 22c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 230:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	20000592 	mulcs	r0, r2, r5
 240:	00000012 	andeq	r0, r0, r2, lsl r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	100e4101 	andne	r4, lr, r1, lsl #2
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000000 	andeq	r0, r0, r0
 25c:	200005a4 	andcs	r0, r0, r4, lsr #11
 260:	0000002e 	andeq	r0, r0, lr, lsr #32
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	100e4101 	andne	r4, lr, r1, lsl #2
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000000 	andeq	r0, r0, r0
 27c:	200005d2 	ldrdcs	r0, [r0], -r2
 280:	00000036 	andeq	r0, r0, r6, lsr r0
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	100e4101 	andne	r4, lr, r1, lsl #2
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000000 	andeq	r0, r0, r0
 29c:	20000608 	andcs	r0, r0, r8, lsl #12
 2a0:	00000034 	andeq	r0, r0, r4, lsr r0
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	100e4101 	andne	r4, lr, r1, lsl #2
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	2000063c 	andcs	r0, r0, ip, lsr r6
 2c0:	0000005a 	andeq	r0, r0, sl, asr r0
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	100e4101 	andne	r4, lr, r1, lsl #2
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	20000696 	mulcs	r0, r6, r6
 2e0:	00000076 	andeq	r0, r0, r6, ror r0
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	2000070c 	andcs	r0, r0, ip, lsl #14
 300:	00000094 	muleq	r0, r4, r0
 304:	40080e41 	andmi	r0, r8, r1, asr #28
 308:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 30c:	180e4101 	stmdane	lr, {r0, r8, lr}
 310:	00070d41 	andeq	r0, r7, r1, asr #26
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000000 	andeq	r0, r0, r0
 31c:	200007a0 	andcs	r0, r0, r0, lsr #15
 320:	00000080 	andeq	r0, r0, r0, lsl #1
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	100e4101 	andne	r4, lr, r1, lsl #2
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000000 	andeq	r0, r0, r0
 33c:	20000820 	andcs	r0, r0, r0, lsr #16
 340:	00000036 	andeq	r0, r0, r6, lsr r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	100e4101 	andne	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	20000856 	andcs	r0, r0, r6, asr r8
 360:	0000003c 	andeq	r0, r0, ip, lsr r0
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	00000018 	andeq	r0, r0, r8, lsl r0
 378:	00000000 	andeq	r0, r0, r0
 37c:	20000892 	mulcs	r0, r2, r8
 380:	00000056 	andeq	r0, r0, r6, asr r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 390:	0000001c 	andeq	r0, r0, ip, lsl r0
 394:	00000000 	andeq	r0, r0, r0
 398:	200008e8 	andcs	r0, r0, r8, ror #17
 39c:	00000066 	andeq	r0, r0, r6, rrx
 3a0:	40080e41 	andmi	r0, r8, r1, asr #28
 3a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a8:	100e4101 	andne	r4, lr, r1, lsl #2
 3ac:	00070d41 	andeq	r0, r7, r1, asr #26
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	00000000 	andeq	r0, r0, r0
 3b8:	2000094e 	andcs	r0, r0, lr, asr #18
 3bc:	0000002a 	andeq	r0, r0, sl, lsr #32
 3c0:	40080e41 	andmi	r0, r8, r1, asr #28
 3c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3c8:	100e4101 	andne	r4, lr, r1, lsl #2
 3cc:	00070d41 	andeq	r0, r7, r1, asr #26
 3d0:	00000020 	andeq	r0, r0, r0, lsr #32
 3d4:	00000000 	andeq	r0, r0, r0
 3d8:	20000978 	andcs	r0, r0, r8, ror r9
 3dc:	00000198 	muleq	r0, r8, r1
 3e0:	400c0e41 	andmi	r0, ip, r1, asr #28
 3e4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 3e8:	018e4002 	orreq	r4, lr, r2
 3ec:	41300e41 	teqmi	r0, r1, asr #28
 3f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	20000b10 	andcs	r0, r0, r0, lsl fp
 400:	00000044 	andeq	r0, r0, r4, asr #32
 404:	40080e41 	andmi	r0, r8, r1, asr #28
 408:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 40c:	180e4101 	stmdane	lr, {r0, r8, lr}
 410:	00070d41 	andeq	r0, r7, r1, asr #26
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	20000b54 	andcs	r0, r0, r4, asr fp
 420:	00000050 	andeq	r0, r0, r0, asr r0
 424:	40080e41 	andmi	r0, r8, r1, asr #28
 428:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 42c:	180e4101 	stmdane	lr, {r0, r8, lr}
 430:	00070d41 	andeq	r0, r7, r1, asr #26
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	00000000 	andeq	r0, r0, r0
 43c:	20000ba4 	andcs	r0, r0, r4, lsr #23
 440:	00000030 	andeq	r0, r0, r0, lsr r0
 444:	40080e41 	andmi	r0, r8, r1, asr #28
 448:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 44c:	100e4101 	andne	r4, lr, r1, lsl #2
 450:	00070d41 	andeq	r0, r7, r1, asr #26
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	00000000 	andeq	r0, r0, r0
 45c:	20000bd4 	ldrdcs	r0, [r0], -r4
 460:	00000024 	andeq	r0, r0, r4, lsr #32
 464:	40080e41 	andmi	r0, r8, r1, asr #28
 468:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 46c:	100e4101 	andne	r4, lr, r1, lsl #2
 470:	00070d41 	andeq	r0, r7, r1, asr #26
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	20000bf8 	strdcs	r0, [r0], -r8
 480:	0000002a 	andeq	r0, r0, sl, lsr #32
 484:	40080e41 	andmi	r0, r8, r1, asr #28
 488:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 48c:	100e4101 	andne	r4, lr, r1, lsl #2
 490:	00070d41 	andeq	r0, r7, r1, asr #26
 494:	0000001c 	andeq	r0, r0, ip, lsl r0
 498:	00000000 	andeq	r0, r0, r0
 49c:	20000c22 	andcs	r0, r0, r2, lsr #24
 4a0:	00000032 	andeq	r0, r0, r2, lsr r0
 4a4:	40080e41 	andmi	r0, r8, r1, asr #28
 4a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4ac:	100e4101 	andne	r4, lr, r1, lsl #2
 4b0:	00070d41 	andeq	r0, r7, r1, asr #26
 4b4:	00000020 	andeq	r0, r0, r0, lsr #32
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	20000c54 	andcs	r0, r0, r4, asr ip
 4c0:	00000040 	andeq	r0, r0, r0, asr #32
 4c4:	400c0e41 	andmi	r0, ip, r1, asr #28
 4c8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4cc:	018e4002 	orreq	r4, lr, r2
 4d0:	41180e41 	tstmi	r8, r1, asr #28
 4d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 4d8:	00000018 	andeq	r0, r0, r8, lsl r0
 4dc:	00000000 	andeq	r0, r0, r0
 4e0:	20000c94 	mulcs	r0, r4, ip
 4e4:	00000022 	andeq	r0, r0, r2, lsr #32
 4e8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f8:	00000000 	andeq	r0, r0, r0
 4fc:	20000cb6 			; <UNDEFINED> instruction: 0x20000cb6
 500:	00000028 	andeq	r0, r0, r8, lsr #32
 504:	40080e41 	andmi	r0, r8, r1, asr #28
 508:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 50c:	100e4101 	andne	r4, lr, r1, lsl #2
 510:	00070d41 	andeq	r0, r7, r1, asr #26
 514:	00000018 	andeq	r0, r0, r8, lsl r0
 518:	00000000 	andeq	r0, r0, r0
 51c:	20000cde 	ldrdcs	r0, [r0], -lr
 520:	0000004a 	andeq	r0, r0, sl, asr #32
 524:	40080e41 	andmi	r0, r8, r1, asr #28
 528:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 52c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
 534:	00000000 	andeq	r0, r0, r0
 538:	20000d28 	andcs	r0, r0, r8, lsr #26
 53c:	0000005e 	andeq	r0, r0, lr, asr r0
 540:	40080e41 	andmi	r0, r8, r1, asr #28
 544:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 548:	180e4101 	stmdane	lr, {r0, r8, lr}
 54c:	00070d41 	andeq	r0, r7, r1, asr #26
 550:	0000001c 	andeq	r0, r0, ip, lsl r0
 554:	00000000 	andeq	r0, r0, r0
 558:	20000d86 	andcs	r0, r0, r6, lsl #27
 55c:	00000028 	andeq	r0, r0, r8, lsr #32
 560:	40080e41 	andmi	r0, r8, r1, asr #28
 564:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 568:	180e4101 	stmdane	lr, {r0, r8, lr}
 56c:	00070d41 	andeq	r0, r7, r1, asr #26
 570:	0000001c 	andeq	r0, r0, ip, lsl r0
 574:	00000000 	andeq	r0, r0, r0
 578:	20000dae 	andcs	r0, r0, lr, lsr #27
 57c:	00000058 	andeq	r0, r0, r8, asr r0
 580:	40080e41 	andmi	r0, r8, r1, asr #28
 584:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 588:	180e4101 	stmdane	lr, {r0, r8, lr}
 58c:	00070d41 	andeq	r0, r7, r1, asr #26
 590:	00000020 	andeq	r0, r0, r0, lsr #32
 594:	00000000 	andeq	r0, r0, r0
 598:	20000e06 	andcs	r0, r0, r6, lsl #28
 59c:	0000006a 	andeq	r0, r0, sl, rrx
 5a0:	400c0e41 	andmi	r0, ip, r1, asr #28
 5a4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 5a8:	018e4002 	orreq	r4, lr, r2
 5ac:	41300e41 	teqmi	r0, r1, asr #28
 5b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 5b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b8:	00000000 	andeq	r0, r0, r0
 5bc:	20000e70 	andcs	r0, r0, r0, ror lr
 5c0:	00000070 	andeq	r0, r0, r0, ror r0
 5c4:	40080e41 	andmi	r0, r8, r1, asr #28
 5c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5cc:	100e4101 	andne	r4, lr, r1, lsl #2
 5d0:	00070d41 	andeq	r0, r7, r1, asr #26
 5d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	20000ee0 	andcs	r0, r0, r0, ror #29
 5e0:	00000030 	andeq	r0, r0, r0, lsr r0
 5e4:	40080e41 	andmi	r0, r8, r1, asr #28
 5e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5ec:	100e4101 	andne	r4, lr, r1, lsl #2
 5f0:	00070d41 	andeq	r0, r7, r1, asr #26
 5f4:	00000018 	andeq	r0, r0, r8, lsl r0
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	20000f10 	andcs	r0, r0, r0, lsl pc
 600:	00000054 	andeq	r0, r0, r4, asr r0
 604:	40080e41 	andmi	r0, r8, r1, asr #28
 608:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 60c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 610:	00000020 	andeq	r0, r0, r0, lsr #32
 614:	00000000 	andeq	r0, r0, r0
 618:	20000f64 	andcs	r0, r0, r4, ror #30
 61c:	000000cc 	andeq	r0, r0, ip, asr #1
 620:	400c0e41 	andmi	r0, ip, r1, asr #28
 624:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 628:	018e4002 	orreq	r4, lr, r2
 62c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 630:	0000070d 	andeq	r0, r0, sp, lsl #14
