
./Debug/keypad.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f8ce 	bl	200001a4 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <app_init>:

void app_init ( void )
{
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x55005555;
20000014:	4b08      	ldr	r3, [pc, #32]	; (20000038 <app_init+0x28>)
20000016:	4a09      	ldr	r2, [pc, #36]	; (2000003c <app_init+0x2c>)
20000018:	601a      	str	r2, [r3, #0]
	/*sätter våra in och ut portar*/
	*GPIO_OTYPER = 0x70;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <app_init+0x30>)
2000001c:	2270      	movs	r2, #112	; 0x70
2000001e:	801a      	strh	r2, [r3, #0]
	*GPIO_PUPDR = 0x0AA;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <app_init+0x34>)
20000022:	22aa      	movs	r2, #170	; 0xaa
20000024:	601a      	str	r2, [r3, #0]
	*GPIO_ODR_HIGH = *GPIO_ODR_HIGH & 0x00FF;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <app_init+0x38>)
20000028:	4a07      	ldr	r2, [pc, #28]	; (20000048 <app_init+0x38>)
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	b2d2      	uxtb	r2, r2
2000002e:	701a      	strb	r2, [r3, #0]
}
20000030:	46c0      	nop			; (mov r8, r8)
20000032:	46bd      	mov	sp, r7
20000034:	bd80      	pop	{r7, pc}
20000036:	46c0      	nop			; (mov r8, r8)
20000038:	40020c00 	andmi	r0, r2, r0, lsl #24
2000003c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000040:	40020c04 	andmi	r0, r2, r4, lsl #24
20000044:	40020c0c 	andmi	r0, r2, ip, lsl #24
20000048:	40020c15 	andmi	r0, r2, r5, lsl ip

2000004c <activateRow>:

void activateRow ( unsigned int row )
{
2000004c:	b580      	push	{r7, lr}
2000004e:	b082      	sub	sp, #8
20000050:	af00      	add	r7, sp, #0
20000052:	6078      	str	r0, [r7, #4]
	/*ativerar raden för den nedtryckta tangented och man borde deaktivera de andra*/
	switch ( row )
20000054:	687b      	ldr	r3, [r7, #4]
20000056:	2b04      	cmp	r3, #4
20000058:	d819      	bhi.n	2000008e <activateRow+0x42>
2000005a:	687b      	ldr	r3, [r7, #4]
2000005c:	009a      	lsls	r2, r3, #2
2000005e:	4b0e      	ldr	r3, [pc, #56]	; (20000098 <activateRow+0x4c>)
20000060:	18d3      	adds	r3, r2, r3
20000062:	681b      	ldr	r3, [r3, #0]
20000064:	469f      	mov	pc, r3
	{
	case 1: *GPIO_ODR_HIGH = 0x10; break;
20000066:	4b0d      	ldr	r3, [pc, #52]	; (2000009c <activateRow+0x50>)
20000068:	2210      	movs	r2, #16
2000006a:	701a      	strb	r2, [r3, #0]
2000006c:	e00f      	b.n	2000008e <activateRow+0x42>
	case 2: *GPIO_ODR_HIGH = 0x20; break;
2000006e:	4b0b      	ldr	r3, [pc, #44]	; (2000009c <activateRow+0x50>)
20000070:	2220      	movs	r2, #32
20000072:	701a      	strb	r2, [r3, #0]
20000074:	e00b      	b.n	2000008e <activateRow+0x42>
	case 3: *GPIO_ODR_HIGH = 0x40; break;
20000076:	4b09      	ldr	r3, [pc, #36]	; (2000009c <activateRow+0x50>)
20000078:	2240      	movs	r2, #64	; 0x40
2000007a:	701a      	strb	r2, [r3, #0]
2000007c:	e007      	b.n	2000008e <activateRow+0x42>
	case 4: *GPIO_ODR_HIGH = 0x80; break;
2000007e:	4b07      	ldr	r3, [pc, #28]	; (2000009c <activateRow+0x50>)
20000080:	2280      	movs	r2, #128	; 0x80
20000082:	701a      	strb	r2, [r3, #0]
20000084:	e003      	b.n	2000008e <activateRow+0x42>
	case 0: *GPIO_ODR_HIGH = 0x00; break;
20000086:	4b05      	ldr	r3, [pc, #20]	; (2000009c <activateRow+0x50>)
20000088:	2200      	movs	r2, #0
2000008a:	701a      	strb	r2, [r3, #0]
2000008c:	46c0      	nop			; (mov r8, r8)
	}
}
2000008e:	46c0      	nop			; (mov r8, r8)
20000090:	46bd      	mov	sp, r7
20000092:	b002      	add	sp, #8
20000094:	bd80      	pop	{r7, pc}
20000096:	46c0      	nop			; (mov r8, r8)
20000098:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
2000009c:	40020c15 	andmi	r0, r2, r5, lsl ip

200000a0 <out7seg>:

void out7seg( unsigned char c ) /*c skall tolkas som tangentkod*/
{
200000a0:	b590      	push	{r4, r7, lr}
200000a2:	b087      	sub	sp, #28
200000a4:	af00      	add	r7, sp, #0
200000a6:	0002      	movs	r2, r0
200000a8:	1dfb      	adds	r3, r7, #7
200000aa:	701a      	strb	r2, [r3, #0]
	unsigned char segCode[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0xF7, 0xFF, 0xB9, 0xBF, 0xF9, 0xF1};
200000ac:	2308      	movs	r3, #8
200000ae:	18fb      	adds	r3, r7, r3
200000b0:	4a0b      	ldr	r2, [pc, #44]	; (200000e0 <out7seg+0x40>)
200000b2:	ca13      	ldmia	r2!, {r0, r1, r4}
200000b4:	c313      	stmia	r3!, {r0, r1, r4}
200000b6:	6812      	ldr	r2, [r2, #0]
200000b8:	601a      	str	r2, [r3, #0]
	if ( c == 0xFF)
200000ba:	1dfb      	adds	r3, r7, #7
200000bc:	781b      	ldrb	r3, [r3, #0]
200000be:	2bff      	cmp	r3, #255	; 0xff
200000c0:	d103      	bne.n	200000ca <out7seg+0x2a>
	{
		*GPIO_ODR_LOW = 0x00; /*sätter värde 0 på 7segmentssaken, släcker alla dioder */
200000c2:	4b08      	ldr	r3, [pc, #32]	; (200000e4 <out7seg+0x44>)
200000c4:	2200      	movs	r2, #0
200000c6:	701a      	strb	r2, [r3, #0]
	} 
	else
	{
		*GPIO_ODR_LOW = segCode[c]; /*sätter vad knapptrycket är på 7segmentsdisplayen.*/
	}	
}
200000c8:	e006      	b.n	200000d8 <out7seg+0x38>
		*GPIO_ODR_LOW = segCode[c]; /*sätter vad knapptrycket är på 7segmentsdisplayen.*/
200000ca:	4906      	ldr	r1, [pc, #24]	; (200000e4 <out7seg+0x44>)
200000cc:	1dfb      	adds	r3, r7, #7
200000ce:	781b      	ldrb	r3, [r3, #0]
200000d0:	2208      	movs	r2, #8
200000d2:	18ba      	adds	r2, r7, r2
200000d4:	5cd3      	ldrb	r3, [r2, r3]
200000d6:	700b      	strb	r3, [r1, #0]
}
200000d8:	46c0      	nop			; (mov r8, r8)
200000da:	46bd      	mov	sp, r7
200000dc:	b007      	add	sp, #28
200000de:	bd90      	pop	{r4, r7, pc}
200000e0:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
200000e4:	40020c14 	andmi	r0, r2, r4, lsl ip

200000e8 <getCol>:



int getCol ( void )
{
200000e8:	b580      	push	{r7, lr}
200000ea:	b082      	sub	sp, #8
200000ec:	af00      	add	r7, sp, #0
	/*om någon tangent i aktiverad rad är nedtryckt så skall dess kolumn nummer returneras. Annars returneras 0*/
	unsigned char c;
	c = *GPIO_IDR_HIGH;
200000ee:	4a12      	ldr	r2, [pc, #72]	; (20000138 <getCol+0x50>)
200000f0:	1dfb      	adds	r3, r7, #7
200000f2:	7812      	ldrb	r2, [r2, #0]
200000f4:	701a      	strb	r2, [r3, #0]
	if ( c & 0x8 ) return 4;
200000f6:	1dfb      	adds	r3, r7, #7
200000f8:	781b      	ldrb	r3, [r3, #0]
200000fa:	2208      	movs	r2, #8
200000fc:	4013      	ands	r3, r2
200000fe:	d001      	beq.n	20000104 <getCol+0x1c>
20000100:	2304      	movs	r3, #4
20000102:	e015      	b.n	20000130 <getCol+0x48>
	if ( c & 0x4 ) return 3;
20000104:	1dfb      	adds	r3, r7, #7
20000106:	781b      	ldrb	r3, [r3, #0]
20000108:	2204      	movs	r2, #4
2000010a:	4013      	ands	r3, r2
2000010c:	d001      	beq.n	20000112 <getCol+0x2a>
2000010e:	2303      	movs	r3, #3
20000110:	e00e      	b.n	20000130 <getCol+0x48>
	if ( c & 0x2 ) return 2;
20000112:	1dfb      	adds	r3, r7, #7
20000114:	781b      	ldrb	r3, [r3, #0]
20000116:	2202      	movs	r2, #2
20000118:	4013      	ands	r3, r2
2000011a:	d001      	beq.n	20000120 <getCol+0x38>
2000011c:	2302      	movs	r3, #2
2000011e:	e007      	b.n	20000130 <getCol+0x48>
	if ( c & 0x1 ) return 1;
20000120:	1dfb      	adds	r3, r7, #7
20000122:	781b      	ldrb	r3, [r3, #0]
20000124:	2201      	movs	r2, #1
20000126:	4013      	ands	r3, r2
20000128:	d001      	beq.n	2000012e <getCol+0x46>
2000012a:	2301      	movs	r3, #1
2000012c:	e000      	b.n	20000130 <getCol+0x48>
	return 0;
2000012e:	2300      	movs	r3, #0
}
20000130:	0018      	movs	r0, r3
20000132:	46bd      	mov	sp, r7
20000134:	b002      	add	sp, #8
20000136:	bd80      	pop	{r7, pc}
20000138:	40020c11 	andmi	r0, r2, r1, lsl ip

2000013c <keyb>:
unsigned char keyb ( void ) 
{
2000013c:	b590      	push	{r4, r7, lr}
2000013e:	b087      	sub	sp, #28
20000140:	af00      	add	r7, sp, #0
	unsigned char key[]={1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000142:	003b      	movs	r3, r7
20000144:	4a16      	ldr	r2, [pc, #88]	; (200001a0 <keyb+0x64>)
20000146:	ca13      	ldmia	r2!, {r0, r1, r4}
20000148:	c313      	stmia	r3!, {r0, r1, r4}
2000014a:	6812      	ldr	r2, [r2, #0]
2000014c:	601a      	str	r2, [r3, #0]
	int row, col;
	for (row=1; row<=4; row++){
2000014e:	2301      	movs	r3, #1
20000150:	617b      	str	r3, [r7, #20]
20000152:	e019      	b.n	20000188 <keyb+0x4c>
		activateRow( row );
20000154:	697b      	ldr	r3, [r7, #20]
20000156:	0018      	movs	r0, r3
20000158:	f7ff ff78 	bl	2000004c <activateRow>
		if( ( col = getCol() ) ) /* om col blir tilldelat nol kommer inte ifsatsen att köras*/
2000015c:	f7ff ffc4 	bl	200000e8 <getCol>
20000160:	0003      	movs	r3, r0
20000162:	613b      	str	r3, [r7, #16]
20000164:	693b      	ldr	r3, [r7, #16]
20000166:	2b00      	cmp	r3, #0
20000168:	d00b      	beq.n	20000182 <keyb+0x46>
		{
			activateRow( 0 ); /*sätter raden til 0 så att den lir nolstäld och att avläsning efter åt inte blir fel. Row och col har redan fått värden s¨å de ör chill*/
2000016a:	2000      	movs	r0, #0
2000016c:	f7ff ff6e 	bl	2000004c <activateRow>
			return key[ 4*(row-1)+(col-1) ];
20000170:	697b      	ldr	r3, [r7, #20]
20000172:	3b01      	subs	r3, #1
20000174:	009a      	lsls	r2, r3, #2
20000176:	693b      	ldr	r3, [r7, #16]
20000178:	3b01      	subs	r3, #1
2000017a:	18d3      	adds	r3, r2, r3
2000017c:	003a      	movs	r2, r7
2000017e:	5cd3      	ldrb	r3, [r2, r3]
20000180:	e009      	b.n	20000196 <keyb+0x5a>
	for (row=1; row<=4; row++){
20000182:	697b      	ldr	r3, [r7, #20]
20000184:	3301      	adds	r3, #1
20000186:	617b      	str	r3, [r7, #20]
20000188:	697b      	ldr	r3, [r7, #20]
2000018a:	2b04      	cmp	r3, #4
2000018c:	dde2      	ble.n	20000154 <keyb+0x18>
		}
	}
	activateRow ( 0 );
2000018e:	2000      	movs	r0, #0
20000190:	f7ff ff5c 	bl	2000004c <activateRow>
	return 0xFF;
20000194:	23ff      	movs	r3, #255	; 0xff
}
20000196:	0018      	movs	r0, r3
20000198:	46bd      	mov	sp, r7
2000019a:	b007      	add	sp, #28
2000019c:	bd90      	pop	{r4, r7, pc}
2000019e:	46c0      	nop			; (mov r8, r8)
200001a0:	200001e0 	andcs	r0, r0, r0, ror #3

200001a4 <main>:

void main(void)
{
200001a4:	b580      	push	{r7, lr}
200001a6:	af00      	add	r7, sp, #0
	app_init();
200001a8:	f7ff ff32 	bl	20000010 <app_init>
	while(1){
		out7seg( keyb() );
200001ac:	f7ff ffc6 	bl	2000013c <keyb>
200001b0:	0003      	movs	r3, r0
200001b2:	0018      	movs	r0, r3
200001b4:	f7ff ff74 	bl	200000a0 <out7seg>
200001b8:	e7f8      	b.n	200001ac <main+0x8>
200001ba:	46c0      	nop			; (mov r8, r8)
200001bc:	20000086 	andcs	r0, r0, r6, lsl #1
200001c0:	20000066 	andcs	r0, r0, r6, rrx
200001c4:	2000006e 	andcs	r0, r0, lr, rrx
200001c8:	20000076 	andcs	r0, r0, r6, ror r0
200001cc:	2000007e 	andcs	r0, r0, lr, ror r0
200001d0:	4f5b063f 	svcmi	0x005b063f
200001d4:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
200001d8:	fff7677f 			; <UNDEFINED> instruction: 0xfff7677f
200001dc:	f1f9bfb9 			; <UNDEFINED> instruction: 0xf1f9bfb9
200001e0:	0a030201 	beq	200c09ec <main+0xc0848>
200001e4:	0b060504 	bleq	201815fc <main+0x181458>
200001e8:	0c090807 	stceq	8, cr0, [r9], {7}
200001ec:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200001bc <main+0x18>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000013b 	andeq	r0, r0, fp, lsr r1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000007c 	andeq	r0, r0, ip, ror r0
  10:	0000380c 	andeq	r3, r0, ip, lsl #16
	...
  20:	01140200 	tsteq	r4, r0, lsl #4
  24:	5a010000 	bpl	4002c <startup-0x1ffbffd4>
  28:	200001a4 	andcs	r0, r0, r4, lsr #3
  2c:	00000016 	andeq	r0, r0, r6, lsl r0
  30:	07039c01 	streq	r9, [r3, -r1, lsl #24]
  34:	01000000 	mrseq	r0, (UNDEF: 0)
  38:	0000764a 	andeq	r7, r0, sl, asr #12
  3c:	00013c00 	andeq	r3, r1, r0, lsl #24
  40:	00006820 	andeq	r6, r0, r0, lsr #16
  44:	769c0100 	ldrvc	r0, [ip], r0, lsl #2
  48:	04000000 	streq	r0, [r0], #-0
  4c:	0079656b 	rsbseq	r6, r9, fp, ror #10
  50:	007d4c01 	rsbseq	r4, sp, r1, lsl #24
  54:	91020000 	mrsls	r0, (UNDEF: 2)
  58:	6f720458 	svcvs	0x00720458
  5c:	4d010077 	stcmi	0, cr0, [r1, #-476]	; 0xfffffe24
  60:	00000094 	muleq	r0, r4, r0
  64:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
  68:	006c6f63 	rsbeq	r6, ip, r3, ror #30
  6c:	00944d01 	addseq	r4, r4, r1, lsl #26
  70:	91020000 	mrsls	r0, (UNDEF: 2)
  74:	01050068 	tsteq	r5, r8, rrx
  78:	00001908 	andeq	r1, r0, r8, lsl #18
  7c:	00760600 	rsbseq	r0, r6, r0, lsl #12
  80:	008d0000 	addeq	r0, sp, r0
  84:	8d070000 	stchi	0, cr0, [r7, #-0]
  88:	0f000000 	svceq	0x00000000
  8c:	07040500 	streq	r0, [r4, -r0, lsl #10]
  90:	0000002f 	andeq	r0, r0, pc, lsr #32
  94:	69050408 	stmdbvs	r5, {r3, sl}
  98:	0900746e 	stmdbeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00943f01 	addseq	r3, r4, r1, lsl #30
  a4:	00e80000 	rsceq	r0, r8, r0
  a8:	00542000 	subseq	r2, r4, r0
  ac:	9c010000 	stcls	0, cr0, [r1], {-0}
  b0:	000000c1 	andeq	r0, r0, r1, asr #1
  b4:	01006304 	tsteq	r0, r4, lsl #6
  b8:	00007642 	andeq	r7, r0, r2, asr #12
  bc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
  c0:	00270a00 	eoreq	r0, r7, r0, lsl #20
  c4:	30010000 	andcc	r0, r1, r0
  c8:	200000a0 	andcs	r0, r0, r0, lsr #1
  cc:	00000048 	andeq	r0, r0, r8, asr #32
  d0:	00f19c01 	rscseq	r9, r1, r1, lsl #24
  d4:	630b0000 	movwvs	r0, #45056	; 0xb000
  d8:	76300100 	ldrtvc	r0, [r0], -r0, lsl #2
  dc:	02000000 	andeq	r0, r0, #0
  e0:	190c5f91 	stmdbne	ip, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
  e4:	01000001 	tsteq	r0, r1
  e8:	00007d32 	andeq	r7, r0, r2, lsr sp
  ec:	60910200 	addsvs	r0, r1, r0, lsl #4
  f0:	01210a00 			; <UNDEFINED> instruction: 0x01210a00
  f4:	23010000 	movwcs	r0, #4096	; 0x1000
  f8:	2000004c 	andcs	r0, r0, ip, asr #32
  fc:	00000054 	andeq	r0, r0, r4, asr r0
 100:	01159c01 	tsteq	r5, r1, lsl #24
 104:	720b0000 	andvc	r0, fp, #0
 108:	0100776f 	tsteq	r0, pc, ror #14
 10c:	00011523 	andeq	r1, r1, r3, lsr #10
 110:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 114:	07040500 	streq	r0, [r4, -r0, lsl #10]
 118:	0000000c 	andeq	r0, r0, ip
 11c:	00012d0d 	andeq	r2, r1, sp, lsl #26
 120:	101a0100 	andsne	r0, sl, r0, lsl #2
 124:	3c200000 	stccc	0, cr0, [r0], #-0
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	00740d9c 			; <UNDEFINED> instruction: 0x00740d9c
 130:	10010000 	andne	r0, r1, r0
 134:	20000000 	andcs	r0, r0, r0
 138:	0000000c 	andeq	r0, r0, ip
 13c:	Address 0x0000013c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	002e0200 	eoreq	r0, lr, r0, lsl #4
  14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	01111927 	tsteq	r1, r7, lsr #18
  20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  24:	00194296 	mulseq	r9, r6, r2
  28:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	13491927 	movtne	r1, #39207	; 0x9927
  38:	06120111 			; <UNDEFINED> instruction: 0x06120111
  3c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  40:	00130119 	andseq	r0, r3, r9, lsl r1
  44:	00340400 	eorseq	r0, r4, r0, lsl #8
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  50:	00001802 	andeq	r1, r0, r2, lsl #16
  54:	0b002405 	bleq	9070 <startup-0x1fff6f90>
  58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  5c:	0600000e 	streq	r0, [r0], -lr
  60:	13490101 	movtne	r0, #37121	; 0x9101
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49002107 	stmdbmi	r0, {r0, r1, r2, r8, sp}
  6c:	000b2f13 	andeq	r2, fp, r3, lsl pc
  70:	00240800 	eoreq	r0, r4, r0, lsl #16
  74:	0b3e0b0b 	bleq	f82ca8 <startup-0x1f07d358>
  78:	00000803 	andeq	r0, r0, r3, lsl #16
  7c:	3f012e09 	svccc	0x00012e09
  80:	3a0e0319 	bcc	380cec <startup-0x1fc7f314>
  84:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  88:	11134919 	tstne	r3, r9, lsl r9
  8c:	40061201 	andmi	r1, r6, r1, lsl #4
  90:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	3f012e0a 	svccc	0x00012e0a
  9c:	3a0e0319 	bcc	380d08 <startup-0x1fc7f2f8>
  a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  a8:	97184006 	ldrls	r4, [r8, -r6]
  ac:	13011942 	movwne	r1, #6466	; 0x1942
  b0:	050b0000 	streq	r0, [fp, #-0]
  b4:	3a080300 	bcc	200cbc <startup-0x1fdff344>
  b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  bc:	00180213 	andseq	r0, r8, r3, lsl r2
  c0:	00340c00 	eorseq	r0, r4, r0, lsl #24
  c4:	0b3a0e03 	bleq	e838d8 <startup-0x1f17c728>
  c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  cc:	00001802 	andeq	r1, r0, r2, lsl #16
  d0:	3f002e0d 	svccc	0x00002e0d
  d4:	3a0e0319 	bcc	380d40 <startup-0x1fc7f2c0>
  d8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  dc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  e0:	97184006 	ldrls	r4, [r8, -r6]
  e4:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000001aa 	andeq	r0, r0, sl, lsr #3
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200001ba 			; <UNDEFINED> instruction: 0x200001ba
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000d1 	ldrdeq	r0, [r0], -r1
   4:	00520002 	subseq	r0, r2, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c63696e 			; <UNDEFINED> instruction: 0x6c63696e
  28:	41442f61 	cmpmi	r4, r1, ror #30
  2c:	37313054 			; <UNDEFINED> instruction: 0x37313054
  30:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  34:	6f4d2f31 	svcvs	0x004d2f31
  38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  44:	656b2f72 	strbvs	r2, [fp, #-3954]!	; 0xfffff08e
  48:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
  4c:	74730000 	ldrbtvc	r0, [r3], #-0
  50:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  54:	00632e70 	rsbeq	r2, r3, r0, ror lr
  58:	00000001 	andeq	r0, r0, r1
  5c:	00020500 	andeq	r0, r2, r0, lsl #10
  60:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  64:	5e130110 	mrcpl	1, 0, r0, cr3, cr0, {0}
  68:	01000302 	tsteq	r0, r2, lsl #6
  6c:	02050001 	andeq	r0, r5, #1
  70:	20000010 	andcs	r0, r0, r0, lsl r0
  74:	2f011a03 	svccs	0x00011a03
  78:	593d3d3e 	ldmdbpl	sp!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  7c:	4b924cd9 	blmi	fe4933e8 <main+0xde493244>
  80:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
  84:	4c756793 	ldclmi	7, cr6, [r5], #-588	; 0xfffffdb4
  88:	87761e42 	ldrbhi	r1, [r6, -r2, asr #28]!
  8c:	02004b3f 	andeq	r4, r0, #64512	; 0xfc00
  90:	58060104 	stmdapl	r6, {r2, r8}
  94:	02002f06 	andeq	r2, r0, #6, 30
  98:	58060104 	stmdapl	r6, {r2, r8}
  9c:	02002f06 	andeq	r2, r0, #6, 30
  a0:	58060104 	stmdapl	r6, {r2, r8}
  a4:	02002f06 	andeq	r2, r0, #6, 30
  a8:	58060104 	stmdapl	r6, {r2, r8}
  ac:	68212f06 	stmdavs	r1!, {r1, r2, r8, r9, sl, fp, sp}
  b0:	4b3d683d 	blmi	f5a1ac <startup-0x1f0a5e54>
  b4:	02003d76 	andeq	r3, r0, #7552	; 0x1d80
  b8:	008b0204 	addeq	r0, fp, r4, lsl #4
  bc:	06010402 	streq	r0, [r1], -r2, lsl #8
  c0:	3d44063c 	stclcc	6, cr0, [r4, #-240]	; 0xffffff10
  c4:	01040200 	mrseq	r0, R12_usr
  c8:	002f7721 	eoreq	r7, pc, r1, lsr #14
  cc:	30010402 	andcc	r0, r1, r2, lsl #8
  d0:	01000702 	tsteq	r0, r2, lsl #14
  d4:	Address 0x000000d4 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	43746567 	cmnmi	r4, #432013312	; 0x19c00000
   4:	6b006c6f 	blvs	1b1c8 <startup-0x1ffe4e38>
   8:	00627965 	rsbeq	r7, r2, r5, ror #18
   c:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  10:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  14:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  18:	736e7500 	cmnvc	lr, #0, 10
  1c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  20:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
  24:	6f007261 	svcvs	0x00007261
  28:	73377475 	teqvc	r7, #1962934272	; 0x75000000
  2c:	73006765 	movwvc	r6, #1893	; 0x765
  30:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
  34:	00657079 	rsbeq	r7, r5, r9, ror r0
  38:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff5fd <main+0xdffff459>
  3c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  40:	63696e2f 	cmnvs	r9, #752	; 0x2f0
  44:	442f616c 	strtmi	r6, [pc], #-364	; 4c <startup-0x1fffffb4>
  48:	31305441 	teqcc	r0, r1, asr #8
  4c:	614c2f37 	cmpvs	ip, r7, lsr pc
  50:	4d2f3162 	stfmis	f3, [pc, #-392]!	; fffffed0 <main+0xdffffd2c>
  54:	616c706f 	cmnvs	ip, pc, rrx
  58:	61726f62 	cmnvs	r2, r2, ror #30
  5c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  60:	6b2f7265 	blvs	bdc9fc <startup-0x1f423604>
  64:	61707965 	cmnvs	r0, r5, ror #18
  68:	74732f64 	ldrbtvc	r2, [r3], #-3940	; 0xfffff09c
  6c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  70:	00632e70 	rsbeq	r2, r3, r0, ror lr
  74:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  78:	00707574 	rsbseq	r7, r0, r4, ror r5
  7c:	20554e47 	subscs	r4, r5, r7, asr #28
  80:	20393943 	eorscs	r3, r9, r3, asr #18
  84:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  88:	30322031 	eorscc	r2, r2, r1, lsr r0
  8c:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  90:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  94:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  98:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  9c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  a0:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  a4:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  a8:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  ac:	6172622d 	cmnvs	r2, sp, lsr #4
  b0:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  b8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  bc:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  c0:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  c4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  c8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  cc:	616d2d20 	cmnvs	sp, r0, lsr #26
  d0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  d4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  d8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  dc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  e0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  e4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  e8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  ec:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  f0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  f4:	616d2d20 	cmnvs	sp, r0, lsr #26
  f8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  fc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 100:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 104:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 108:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 10c:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 110:	00393963 	eorseq	r3, r9, r3, ror #18
 114:	6e69616d 	powvsez	f6, f1, #5.0
 118:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
 11c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 120:	74636100 	strbtvc	r6, [r3], #-256	; 0xffffff00
 124:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 128:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 12c:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 130:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 134:	Address 0x00000134 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000003c 	andeq	r0, r0, ip, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000004c 	andcs	r0, r0, ip, asr #32
  48:	00000054 	andeq	r0, r0, r4, asr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	100e4101 	andne	r4, lr, r1, lsl #2
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000020 	andeq	r0, r0, r0, lsr #32
  60:	00000000 	andeq	r0, r0, r0
  64:	200000a0 	andcs	r0, r0, r0, lsr #1
  68:	00000048 	andeq	r0, r0, r8, asr #32
  6c:	400c0e41 	andmi	r0, ip, r1, asr #28
  70:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  74:	018e4002 	orreq	r4, lr, r2
  78:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  7c:	0000070d 	andeq	r0, r0, sp, lsl #14
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000e8 	andcs	r0, r0, r8, ror #1
  8c:	00000054 	andeq	r0, r0, r4, asr r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	100e4101 	andne	r4, lr, r1, lsl #2
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	00000020 	andeq	r0, r0, r0, lsr #32
  a4:	00000000 	andeq	r0, r0, r0
  a8:	2000013c 	andcs	r0, r0, ip, lsr r1
  ac:	00000068 	andeq	r0, r0, r8, rrx
  b0:	400c0e41 	andmi	r0, ip, r1, asr #28
  b4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  b8:	018e4002 	orreq	r4, lr, r2
  bc:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  c0:	0000070d 	andeq	r0, r0, sp, lsl #14
  c4:	00000018 	andeq	r0, r0, r8, lsl r0
  c8:	00000000 	andeq	r0, r0, r0
  cc:	200001a4 	andcs	r0, r0, r4, lsr #3
  d0:	00000016 	andeq	r0, r0, r6, lsl r0
  d4:	40080e41 	andmi	r0, r8, r1, asr #28
  d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
