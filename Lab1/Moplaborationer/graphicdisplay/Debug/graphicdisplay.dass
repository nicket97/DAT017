
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f822 	bl	2000004c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
void init_app(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *GPIOE_MODER = 0x55555555;
20000014:	4b08      	ldr	r3, [pc, #32]	; (20000038 <init_app+0x28>)
20000016:	4a09      	ldr	r2, [pc, #36]	; (2000003c <init_app+0x2c>)
20000018:	601a      	str	r2, [r3, #0]
	/*sätter våra in och ut portar*/
	*GPIOE_OTYPER = 0x70;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <init_app+0x30>)
2000001c:	2270      	movs	r2, #112	; 0x70
2000001e:	801a      	strh	r2, [r3, #0]
	*GPIOE_PUPDR = 0x0AA;
20000020:	4b08      	ldr	r3, [pc, #32]	; (20000044 <init_app+0x34>)
20000022:	22aa      	movs	r2, #170	; 0xaa
20000024:	601a      	str	r2, [r3, #0]
	*GPIOE_ODR_HIGH = *GPIOE_ODR_HIGH & 0x00FF;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <init_app+0x38>)
20000028:	4a07      	ldr	r2, [pc, #28]	; (20000048 <init_app+0x38>)
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	b2d2      	uxtb	r2, r2
2000002e:	701a      	strb	r2, [r3, #0]
    }
20000030:	46c0      	nop			; (mov r8, r8)
20000032:	46bd      	mov	sp, r7
20000034:	bd80      	pop	{r7, pc}
20000036:	46c0      	nop			; (mov r8, r8)
20000038:	40021000 	andmi	r1, r2, r0
2000003c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000040:	40021004 	andmi	r1, r2, r4
20000044:	4002100c 	andmi	r1, r2, ip
20000048:	40021015 	andmi	r1, r2, r5, lsl r0

2000004c <main>:
void main(void)
{
2000004c:	b580      	push	{r7, lr}
2000004e:	b084      	sub	sp, #16
20000050:	af00      	add	r7, sp, #0
   init_app();
20000052:	f7ff ffdd 	bl	20000010 <init_app>
    graphic_initialize();
20000056:	f000 f920 	bl	2000029a <graphic_initialize>
    graphic_clear_screen();// simulator onely
2000005a:	f000 fa5c 	bl	20000516 <graphic_clear_screen>
for(int i = 0; i < 128; i++){
2000005e:	2300      	movs	r3, #0
20000060:	60fb      	str	r3, [r7, #12]
20000062:	e008      	b.n	20000076 <main+0x2a>
    pixel(i,10,1);
20000064:	68fb      	ldr	r3, [r7, #12]
20000066:	2201      	movs	r2, #1
20000068:	210a      	movs	r1, #10
2000006a:	0018      	movs	r0, r3
2000006c:	f000 fa86 	bl	2000057c <pixel>
for(int i = 0; i < 128; i++){
20000070:	68fb      	ldr	r3, [r7, #12]
20000072:	3301      	adds	r3, #1
20000074:	60fb      	str	r3, [r7, #12]
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	2b7f      	cmp	r3, #127	; 0x7f
2000007a:	ddf3      	ble.n	20000064 <main+0x18>
    }
for(int i = 0; i < 64; i++){
2000007c:	2300      	movs	r3, #0
2000007e:	60bb      	str	r3, [r7, #8]
20000080:	e008      	b.n	20000094 <main+0x48>
    pixel(10,i,1);
20000082:	68bb      	ldr	r3, [r7, #8]
20000084:	2201      	movs	r2, #1
20000086:	0019      	movs	r1, r3
20000088:	200a      	movs	r0, #10
2000008a:	f000 fa77 	bl	2000057c <pixel>
for(int i = 0; i < 64; i++){
2000008e:	68bb      	ldr	r3, [r7, #8]
20000090:	3301      	adds	r3, #1
20000092:	60bb      	str	r3, [r7, #8]
20000094:	68bb      	ldr	r3, [r7, #8]
20000096:	2b3f      	cmp	r3, #63	; 0x3f
20000098:	ddf3      	ble.n	20000082 <main+0x36>
    }
delay_milli(500);
2000009a:	23fa      	movs	r3, #250	; 0xfa
2000009c:	005b      	lsls	r3, r3, #1
2000009e:	0018      	movs	r0, r3
200000a0:	f000 f84d 	bl	2000013e <delay_milli>
for(int i = 0; i < 128; i++){
200000a4:	2300      	movs	r3, #0
200000a6:	607b      	str	r3, [r7, #4]
200000a8:	e008      	b.n	200000bc <main+0x70>
    pixel(i,10,0);
200000aa:	687b      	ldr	r3, [r7, #4]
200000ac:	2200      	movs	r2, #0
200000ae:	210a      	movs	r1, #10
200000b0:	0018      	movs	r0, r3
200000b2:	f000 fa63 	bl	2000057c <pixel>
for(int i = 0; i < 128; i++){
200000b6:	687b      	ldr	r3, [r7, #4]
200000b8:	3301      	adds	r3, #1
200000ba:	607b      	str	r3, [r7, #4]
200000bc:	687b      	ldr	r3, [r7, #4]
200000be:	2b7f      	cmp	r3, #127	; 0x7f
200000c0:	ddf3      	ble.n	200000aa <main+0x5e>
    }
for(int i = 0; i < 64; i++){
200000c2:	2300      	movs	r3, #0
200000c4:	603b      	str	r3, [r7, #0]
200000c6:	e008      	b.n	200000da <main+0x8e>
    pixel(10,i,0);
200000c8:	683b      	ldr	r3, [r7, #0]
200000ca:	2200      	movs	r2, #0
200000cc:	0019      	movs	r1, r3
200000ce:	200a      	movs	r0, #10
200000d0:	f000 fa54 	bl	2000057c <pixel>
for(int i = 0; i < 64; i++){
200000d4:	683b      	ldr	r3, [r7, #0]
200000d6:	3301      	adds	r3, #1
200000d8:	603b      	str	r3, [r7, #0]
200000da:	683b      	ldr	r3, [r7, #0]
200000dc:	2b3f      	cmp	r3, #63	; 0x3f
200000de:	ddf3      	ble.n	200000c8 <main+0x7c>
    }
    
}
200000e0:	46c0      	nop			; (mov r8, r8)
200000e2:	46bd      	mov	sp, r7
200000e4:	b004      	add	sp, #16
200000e6:	bd80      	pop	{r7, pc}

200000e8 <delay_250ns>:

void delay_250ns(void)
{
200000e8:	b580      	push	{r7, lr}
200000ea:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
200000ec:	4b0c      	ldr	r3, [pc, #48]	; (20000120 <delay_250ns+0x38>)
200000ee:	2200      	movs	r2, #0
200000f0:	601a      	str	r2, [r3, #0]
    *STK_LOAD = (168/4)-1;   // minst 500 ns
200000f2:	4b0c      	ldr	r3, [pc, #48]	; (20000124 <delay_250ns+0x3c>)
200000f4:	2229      	movs	r2, #41	; 0x29
200000f6:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200000f8:	4b0b      	ldr	r3, [pc, #44]	; (20000128 <delay_250ns+0x40>)
200000fa:	2200      	movs	r2, #0
200000fc:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
200000fe:	4b08      	ldr	r3, [pc, #32]	; (20000120 <delay_250ns+0x38>)
20000100:	2205      	movs	r2, #5
20000102:	601a      	str	r2, [r3, #0]
    while((* STK_CTRL & 0x10000) == 0) ;
20000104:	46c0      	nop			; (mov r8, r8)
20000106:	4b06      	ldr	r3, [pc, #24]	; (20000120 <delay_250ns+0x38>)
20000108:	681a      	ldr	r2, [r3, #0]
2000010a:	2380      	movs	r3, #128	; 0x80
2000010c:	025b      	lsls	r3, r3, #9
2000010e:	4013      	ands	r3, r2
20000110:	d0f9      	beq.n	20000106 <delay_250ns+0x1e>
    *STK_CTRL = 0;
20000112:	4b03      	ldr	r3, [pc, #12]	; (20000120 <delay_250ns+0x38>)
20000114:	2200      	movs	r2, #0
20000116:	601a      	str	r2, [r3, #0]
}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	46bd      	mov	sp, r7
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	e000e010 	and	lr, r0, r0, lsl r0
20000124:	e000e014 	and	lr, r0, r4, lsl r0
20000128:	e000e018 	and	lr, r0, r8, lsl r0

2000012c <delay_mikro>:


void delay_mikro(unsigned int us)
{
2000012c:	b580      	push	{r7, lr}
2000012e:	b082      	sub	sp, #8
20000130:	af00      	add	r7, sp, #0
20000132:	6078      	str	r0, [r7, #4]
#ifdef   SIMULATOR
    us = us / 1000;
    us++;
#endif
    while(us < 0){
20000134:	46c0      	nop			; (mov r8, r8)
            delay_250ns();
            delay_250ns();
            us--;
        }
    }
}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	46bd      	mov	sp, r7
2000013a:	b002      	add	sp, #8
2000013c:	bd80      	pop	{r7, pc}

2000013e <delay_milli>:

void delay_milli(unsigned ms)
{
2000013e:	b580      	push	{r7, lr}
20000140:	b082      	sub	sp, #8
20000142:	af00      	add	r7, sp, #0
20000144:	6078      	str	r0, [r7, #4]

    ms = ms/1000;// simulator onely
20000146:	687a      	ldr	r2, [r7, #4]
20000148:	23fa      	movs	r3, #250	; 0xfa
2000014a:	0099      	lsls	r1, r3, #2
2000014c:	0010      	movs	r0, r2
2000014e:	f000 fae5 	bl	2000071c <__udivsi3>
20000152:	0003      	movs	r3, r0
20000154:	607b      	str	r3, [r7, #4]
    ms++;//simulator
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	3301      	adds	r3, #1
2000015a:	607b      	str	r3, [r7, #4]

    while(ms > 0){
2000015c:	e007      	b.n	2000016e <delay_milli+0x30>
        {
            delay_mikro(1000);
2000015e:	23fa      	movs	r3, #250	; 0xfa
20000160:	009b      	lsls	r3, r3, #2
20000162:	0018      	movs	r0, r3
20000164:	f7ff ffe2 	bl	2000012c <delay_mikro>
            ms--;
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	3b01      	subs	r3, #1
2000016c:	607b      	str	r3, [r7, #4]
    while(ms > 0){
2000016e:	687b      	ldr	r3, [r7, #4]
20000170:	2b00      	cmp	r3, #0
20000172:	d1f4      	bne.n	2000015e <delay_milli+0x20>
            
        }
    }
}
20000174:	46c0      	nop			; (mov r8, r8)
20000176:	46bd      	mov	sp, r7
20000178:	b002      	add	sp, #8
2000017a:	bd80      	pop	{r7, pc}

2000017c <delay_500ns>:
void delay_500ns(void){
2000017c:	b580      	push	{r7, lr}
2000017e:	af00      	add	r7, sp, #0
    delay_250ns();
20000180:	f7ff ffb2 	bl	200000e8 <delay_250ns>
    delay_250ns();
20000184:	f7ff ffb0 	bl	200000e8 <delay_250ns>
    }
20000188:	46c0      	nop			; (mov r8, r8)
2000018a:	46bd      	mov	sp, r7
2000018c:	bd80      	pop	{r7, pc}

2000018e <graphic_ctrl_bit_set>:
static void graphic_ctrl_bit_set(uint8_t x) {
2000018e:	b580      	push	{r7, lr}
20000190:	b084      	sub	sp, #16
20000192:	af00      	add	r7, sp, #0
20000194:	0002      	movs	r2, r0
20000196:	1dfb      	adds	r3, r7, #7
20000198:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = *GPIOE_ODR_LOW;
2000019a:	4a12      	ldr	r2, [pc, #72]	; (200001e4 <graphic_ctrl_bit_set+0x56>)
2000019c:	230f      	movs	r3, #15
2000019e:	18fb      	adds	r3, r7, r3
200001a0:	7812      	ldrb	r2, [r2, #0]
200001a2:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
200001a4:	230f      	movs	r3, #15
200001a6:	18fb      	adds	r3, r7, r3
200001a8:	220f      	movs	r2, #15
200001aa:	18ba      	adds	r2, r7, r2
200001ac:	7812      	ldrb	r2, [r2, #0]
200001ae:	2104      	movs	r1, #4
200001b0:	438a      	bics	r2, r1
200001b2:	701a      	strb	r2, [r3, #0]
c |= (~B_SELECT & x);
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
200001b8:	b25b      	sxtb	r3, r3
200001ba:	2204      	movs	r2, #4
200001bc:	4393      	bics	r3, r2
200001be:	b25a      	sxtb	r2, r3
200001c0:	230f      	movs	r3, #15
200001c2:	18fb      	adds	r3, r7, r3
200001c4:	781b      	ldrb	r3, [r3, #0]
200001c6:	b25b      	sxtb	r3, r3
200001c8:	4313      	orrs	r3, r2
200001ca:	b25a      	sxtb	r2, r3
200001cc:	230f      	movs	r3, #15
200001ce:	18fb      	adds	r3, r7, r3
200001d0:	701a      	strb	r2, [r3, #0]
*GPIOE_ODR_LOW = c;
200001d2:	4a04      	ldr	r2, [pc, #16]	; (200001e4 <graphic_ctrl_bit_set+0x56>)
200001d4:	230f      	movs	r3, #15
200001d6:	18fb      	adds	r3, r7, r3
200001d8:	781b      	ldrb	r3, [r3, #0]
200001da:	7013      	strb	r3, [r2, #0]
}
200001dc:	46c0      	nop			; (mov r8, r8)
200001de:	46bd      	mov	sp, r7
200001e0:	b004      	add	sp, #16
200001e2:	bd80      	pop	{r7, pc}
200001e4:	40021014 	andmi	r1, r2, r4, lsl r0

200001e8 <graphic_ctrl_bit_clear>:
static void graphic_ctrl_bit_clear(uint8_t x) {
200001e8:	b580      	push	{r7, lr}
200001ea:	b084      	sub	sp, #16
200001ec:	af00      	add	r7, sp, #0
200001ee:	0002      	movs	r2, r0
200001f0:	1dfb      	adds	r3, r7, #7
200001f2:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = *GPIOE_ODR_LOW;
200001f4:	4a11      	ldr	r2, [pc, #68]	; (2000023c <graphic_ctrl_bit_clear+0x54>)
200001f6:	230f      	movs	r3, #15
200001f8:	18fb      	adds	r3, r7, r3
200001fa:	7812      	ldrb	r2, [r2, #0]
200001fc:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
200001fe:	230f      	movs	r3, #15
20000200:	18fb      	adds	r3, r7, r3
20000202:	220f      	movs	r2, #15
20000204:	18ba      	adds	r2, r7, r2
20000206:	7812      	ldrb	r2, [r2, #0]
20000208:	2104      	movs	r1, #4
2000020a:	438a      	bics	r2, r1
2000020c:	701a      	strb	r2, [r3, #0]
c &= ~x;
2000020e:	1dfb      	adds	r3, r7, #7
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	b25b      	sxtb	r3, r3
20000214:	43db      	mvns	r3, r3
20000216:	b25b      	sxtb	r3, r3
20000218:	220f      	movs	r2, #15
2000021a:	18ba      	adds	r2, r7, r2
2000021c:	7812      	ldrb	r2, [r2, #0]
2000021e:	b252      	sxtb	r2, r2
20000220:	4013      	ands	r3, r2
20000222:	b25a      	sxtb	r2, r3
20000224:	230f      	movs	r3, #15
20000226:	18fb      	adds	r3, r7, r3
20000228:	701a      	strb	r2, [r3, #0]
*GPIOE_ODR_LOW = c;
2000022a:	4a04      	ldr	r2, [pc, #16]	; (2000023c <graphic_ctrl_bit_clear+0x54>)
2000022c:	230f      	movs	r3, #15
2000022e:	18fb      	adds	r3, r7, r3
20000230:	781b      	ldrb	r3, [r3, #0]
20000232:	7013      	strb	r3, [r2, #0]
}
20000234:	46c0      	nop			; (mov r8, r8)
20000236:	46bd      	mov	sp, r7
20000238:	b004      	add	sp, #16
2000023a:	bd80      	pop	{r7, pc}
2000023c:	40021014 	andmi	r1, r2, r4, lsl r0

20000240 <select_controller>:
static void select_controller(uint8_t controller){
20000240:	b580      	push	{r7, lr}
20000242:	b082      	sub	sp, #8
20000244:	af00      	add	r7, sp, #0
20000246:	0002      	movs	r2, r0
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	701a      	strb	r2, [r3, #0]
    switch(controller){
2000024c:	1dfb      	adds	r3, r7, #7
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	2b08      	cmp	r3, #8
20000252:	d00c      	beq.n	2000026e <select_controller+0x2e>
20000254:	dc02      	bgt.n	2000025c <select_controller+0x1c>
20000256:	2b00      	cmp	r3, #0
20000258:	d005      	beq.n	20000266 <select_controller+0x26>
    break;
    case B_CS1|B_CS2 :
    graphic_ctrl_bit_set(B_CS1|B_CS2);
    break;
}
}
2000025a:	e01a      	b.n	20000292 <select_controller+0x52>
    switch(controller){
2000025c:	2b10      	cmp	r3, #16
2000025e:	d00d      	beq.n	2000027c <select_controller+0x3c>
20000260:	2b18      	cmp	r3, #24
20000262:	d012      	beq.n	2000028a <select_controller+0x4a>
}
20000264:	e015      	b.n	20000292 <select_controller+0x52>
    graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000266:	2018      	movs	r0, #24
20000268:	f7ff ffbe 	bl	200001e8 <graphic_ctrl_bit_clear>
    break;
2000026c:	e011      	b.n	20000292 <select_controller+0x52>
    graphic_ctrl_bit_set(B_CS1);
2000026e:	2008      	movs	r0, #8
20000270:	f7ff ff8d 	bl	2000018e <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_CS2);
20000274:	2010      	movs	r0, #16
20000276:	f7ff ffb7 	bl	200001e8 <graphic_ctrl_bit_clear>
    break;
2000027a:	e00a      	b.n	20000292 <select_controller+0x52>
    graphic_ctrl_bit_set(B_CS2);
2000027c:	2010      	movs	r0, #16
2000027e:	f7ff ff86 	bl	2000018e <graphic_ctrl_bit_set>
    graphic_ctrl_bit_clear(B_CS1);
20000282:	2008      	movs	r0, #8
20000284:	f7ff ffb0 	bl	200001e8 <graphic_ctrl_bit_clear>
    break;
20000288:	e003      	b.n	20000292 <select_controller+0x52>
    graphic_ctrl_bit_set(B_CS1|B_CS2);
2000028a:	2018      	movs	r0, #24
2000028c:	f7ff ff7f 	bl	2000018e <graphic_ctrl_bit_set>
    break;
20000290:	46c0      	nop			; (mov r8, r8)
}
20000292:	46c0      	nop			; (mov r8, r8)
20000294:	46bd      	mov	sp, r7
20000296:	b002      	add	sp, #8
20000298:	bd80      	pop	{r7, pc}

2000029a <graphic_initialize>:
void graphic_initialize(void) {
2000029a:	b580      	push	{r7, lr}
2000029c:	af00      	add	r7, sp, #0
graphic_ctrl_bit_set(B_E);
2000029e:	2040      	movs	r0, #64	; 0x40
200002a0:	f7ff ff75 	bl	2000018e <graphic_ctrl_bit_set>
delay_mikro(10);
200002a4:	200a      	movs	r0, #10
200002a6:	f7ff ff41 	bl	2000012c <delay_mikro>
graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200002aa:	2078      	movs	r0, #120	; 0x78
200002ac:	f7ff ff9c 	bl	200001e8 <graphic_ctrl_bit_clear>
delay_milli(30);
200002b0:	201e      	movs	r0, #30
200002b2:	f7ff ff44 	bl	2000013e <delay_milli>
graphic_ctrl_bit_set(B_RST);
200002b6:	2020      	movs	r0, #32
200002b8:	f7ff ff69 	bl	2000018e <graphic_ctrl_bit_set>
delay_milli(100);
200002bc:	2064      	movs	r0, #100	; 0x64
200002be:	f7ff ff3e 	bl	2000013e <delay_milli>
graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200002c2:	2118      	movs	r1, #24
200002c4:	203e      	movs	r0, #62	; 0x3e
200002c6:	f000 f8e3 	bl	20000490 <graphic_write_command>
graphic_write_command(LCD_ON, B_CS1|B_CS2);
200002ca:	2118      	movs	r1, #24
200002cc:	203f      	movs	r0, #63	; 0x3f
200002ce:	f000 f8df 	bl	20000490 <graphic_write_command>
graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200002d2:	2118      	movs	r1, #24
200002d4:	20c0      	movs	r0, #192	; 0xc0
200002d6:	f000 f8db 	bl	20000490 <graphic_write_command>
graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200002da:	2118      	movs	r1, #24
200002dc:	2040      	movs	r0, #64	; 0x40
200002de:	f000 f8d7 	bl	20000490 <graphic_write_command>
graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
200002e2:	2118      	movs	r1, #24
200002e4:	20b8      	movs	r0, #184	; 0xb8
200002e6:	f000 f8d3 	bl	20000490 <graphic_write_command>
select_controller(0);
200002ea:	2000      	movs	r0, #0
200002ec:	f7ff ffa8 	bl	20000240 <select_controller>
}
200002f0:	46c0      	nop			; (mov r8, r8)
200002f2:	46bd      	mov	sp, r7
200002f4:	bd80      	pop	{r7, pc}

200002f6 <graphic_wait_ready>:
static void graphic_wait_ready(void) {
200002f6:	b580      	push	{r7, lr}
200002f8:	b082      	sub	sp, #8
200002fa:	af00      	add	r7, sp, #0
uint8_t c;
graphic_ctrl_bit_clear(B_E);
200002fc:	2040      	movs	r0, #64	; 0x40
200002fe:	f7ff ff73 	bl	200001e8 <graphic_ctrl_bit_clear>
// 15-8 inputs, 7-0 outputs
*GPIOE_MODER = 0x00005555;
20000302:	4b14      	ldr	r3, [pc, #80]	; (20000354 <graphic_wait_ready+0x5e>)
20000304:	4a14      	ldr	r2, [pc, #80]	; (20000358 <graphic_wait_ready+0x62>)
20000306:	601a      	str	r2, [r3, #0]
graphic_ctrl_bit_clear(B_RS);
20000308:	2001      	movs	r0, #1
2000030a:	f7ff ff6d 	bl	200001e8 <graphic_ctrl_bit_clear>
graphic_ctrl_bit_set(B_RW);
2000030e:	2002      	movs	r0, #2
20000310:	f7ff ff3d 	bl	2000018e <graphic_ctrl_bit_set>
delay_500ns();
20000314:	f7ff ff32 	bl	2000017c <delay_500ns>
while(1) {
graphic_ctrl_bit_set(B_E);
20000318:	2040      	movs	r0, #64	; 0x40
2000031a:	f7ff ff38 	bl	2000018e <graphic_ctrl_bit_set>
delay_500ns();
2000031e:	f7ff ff2d 	bl	2000017c <delay_500ns>
c = *GPIOE_IDR_HIGH & LCD_BUSY;
20000322:	4b0e      	ldr	r3, [pc, #56]	; (2000035c <graphic_wait_ready+0x66>)
20000324:	781b      	ldrb	r3, [r3, #0]
20000326:	b2da      	uxtb	r2, r3
20000328:	1dfb      	adds	r3, r7, #7
2000032a:	217f      	movs	r1, #127	; 0x7f
2000032c:	438a      	bics	r2, r1
2000032e:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff ff59 	bl	200001e8 <graphic_ctrl_bit_clear>
delay_500ns();
20000336:	f7ff ff21 	bl	2000017c <delay_500ns>
if( c == 0 ) break;
2000033a:	1dfb      	adds	r3, r7, #7
2000033c:	781b      	ldrb	r3, [r3, #0]
2000033e:	2b00      	cmp	r3, #0
20000340:	d000      	beq.n	20000344 <graphic_wait_ready+0x4e>
graphic_ctrl_bit_set(B_E);
20000342:	e7e9      	b.n	20000318 <graphic_wait_ready+0x22>
if( c == 0 ) break;
20000344:	46c0      	nop			; (mov r8, r8)
}
*GPIOE_MODER = 0x55555555; // 15-0 outputs
20000346:	4b03      	ldr	r3, [pc, #12]	; (20000354 <graphic_wait_ready+0x5e>)
20000348:	4a05      	ldr	r2, [pc, #20]	; (20000360 <graphic_wait_ready+0x6a>)
2000034a:	601a      	str	r2, [r3, #0]
}
2000034c:	46c0      	nop			; (mov r8, r8)
2000034e:	46bd      	mov	sp, r7
20000350:	b002      	add	sp, #8
20000352:	bd80      	pop	{r7, pc}
20000354:	40021000 	andmi	r1, r2, r0
20000358:	00005555 	andeq	r5, r0, r5, asr r5
2000035c:	40021011 	andmi	r1, r2, r1, lsl r0
20000360:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000364 <graphic_read>:
static uint8_t graphic_read(uint8_t controller) {
20000364:	b580      	push	{r7, lr}
20000366:	b084      	sub	sp, #16
20000368:	af00      	add	r7, sp, #0
2000036a:	0002      	movs	r2, r0
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	701a      	strb	r2, [r3, #0]
uint8_t c;
graphic_ctrl_bit_clear(B_E);
20000370:	2040      	movs	r0, #64	; 0x40
20000372:	f7ff ff39 	bl	200001e8 <graphic_ctrl_bit_clear>
*GPIOE_MODER = 0x00005555; // 15-8 inputs, 7-0 outputs
20000376:	4b1c      	ldr	r3, [pc, #112]	; (200003e8 <graphic_read+0x84>)
20000378:	4a1c      	ldr	r2, [pc, #112]	; (200003ec <graphic_read+0x88>)
2000037a:	601a      	str	r2, [r3, #0]
graphic_ctrl_bit_set(B_RS|B_RW);
2000037c:	2003      	movs	r0, #3
2000037e:	f7ff ff06 	bl	2000018e <graphic_ctrl_bit_set>
select_controller(controller);
20000382:	1dfb      	adds	r3, r7, #7
20000384:	781b      	ldrb	r3, [r3, #0]
20000386:	0018      	movs	r0, r3
20000388:	f7ff ff5a 	bl	20000240 <select_controller>
delay_500ns();
2000038c:	f7ff fef6 	bl	2000017c <delay_500ns>
graphic_ctrl_bit_set(B_E);
20000390:	2040      	movs	r0, #64	; 0x40
20000392:	f7ff fefc 	bl	2000018e <graphic_ctrl_bit_set>
delay_500ns();
20000396:	f7ff fef1 	bl	2000017c <delay_500ns>
c = *GPIOE_IDR_HIGH;
2000039a:	4a15      	ldr	r2, [pc, #84]	; (200003f0 <graphic_read+0x8c>)
2000039c:	230f      	movs	r3, #15
2000039e:	18fb      	adds	r3, r7, r3
200003a0:	7812      	ldrb	r2, [r2, #0]
200003a2:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
200003a4:	2040      	movs	r0, #64	; 0x40
200003a6:	f7ff ff1f 	bl	200001e8 <graphic_ctrl_bit_clear>
*GPIOE_MODER = 0x55555555; // 15-0 outputs
200003aa:	4b0f      	ldr	r3, [pc, #60]	; (200003e8 <graphic_read+0x84>)
200003ac:	4a11      	ldr	r2, [pc, #68]	; (200003f4 <graphic_read+0x90>)
200003ae:	601a      	str	r2, [r3, #0]
if( controller & B_CS1 ) {
200003b0:	1dfb      	adds	r3, r7, #7
200003b2:	781b      	ldrb	r3, [r3, #0]
200003b4:	2208      	movs	r2, #8
200003b6:	4013      	ands	r3, r2
200003b8:	d004      	beq.n	200003c4 <graphic_read+0x60>
select_controller(B_CS1);
200003ba:	2008      	movs	r0, #8
200003bc:	f7ff ff40 	bl	20000240 <select_controller>
graphic_wait_ready();
200003c0:	f7ff ff99 	bl	200002f6 <graphic_wait_ready>
}
if( controller & B_CS2 ) {
200003c4:	1dfb      	adds	r3, r7, #7
200003c6:	781b      	ldrb	r3, [r3, #0]
200003c8:	2210      	movs	r2, #16
200003ca:	4013      	ands	r3, r2
200003cc:	d004      	beq.n	200003d8 <graphic_read+0x74>
select_controller(B_CS2);
200003ce:	2010      	movs	r0, #16
200003d0:	f7ff ff36 	bl	20000240 <select_controller>
graphic_wait_ready();
200003d4:	f7ff ff8f 	bl	200002f6 <graphic_wait_ready>
}
return c;
200003d8:	230f      	movs	r3, #15
200003da:	18fb      	adds	r3, r7, r3
200003dc:	781b      	ldrb	r3, [r3, #0]
}
200003de:	0018      	movs	r0, r3
200003e0:	46bd      	mov	sp, r7
200003e2:	b004      	add	sp, #16
200003e4:	bd80      	pop	{r7, pc}
200003e6:	46c0      	nop			; (mov r8, r8)
200003e8:	40021000 	andmi	r1, r2, r0
200003ec:	00005555 	andeq	r5, r0, r5, asr r5
200003f0:	40021011 	andmi	r1, r2, r1, lsl r0
200003f4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003f8 <graphic_read_data>:
static uint8_t graphic_read_data(uint8_t controller) {
200003f8:	b580      	push	{r7, lr}
200003fa:	b082      	sub	sp, #8
200003fc:	af00      	add	r7, sp, #0
200003fe:	0002      	movs	r2, r0
20000400:	1dfb      	adds	r3, r7, #7
20000402:	701a      	strb	r2, [r3, #0]
graphic_read(controller);
20000404:	1dfb      	adds	r3, r7, #7
20000406:	781b      	ldrb	r3, [r3, #0]
20000408:	0018      	movs	r0, r3
2000040a:	f7ff ffab 	bl	20000364 <graphic_read>
return graphic_read(controller);
2000040e:	1dfb      	adds	r3, r7, #7
20000410:	781b      	ldrb	r3, [r3, #0]
20000412:	0018      	movs	r0, r3
20000414:	f7ff ffa6 	bl	20000364 <graphic_read>
20000418:	0003      	movs	r3, r0
}
2000041a:	0018      	movs	r0, r3
2000041c:	46bd      	mov	sp, r7
2000041e:	b002      	add	sp, #8
20000420:	bd80      	pop	{r7, pc}

20000422 <graphic_write>:
static void graphic_write(uint8_t value, uint8_t controller) {
20000422:	b580      	push	{r7, lr}
20000424:	b082      	sub	sp, #8
20000426:	af00      	add	r7, sp, #0
20000428:	0002      	movs	r2, r0
2000042a:	1dfb      	adds	r3, r7, #7
2000042c:	701a      	strb	r2, [r3, #0]
2000042e:	1dbb      	adds	r3, r7, #6
20000430:	1c0a      	adds	r2, r1, #0
20000432:	701a      	strb	r2, [r3, #0]
*GPIOE_ODR_HIGH = value;
20000434:	4a15      	ldr	r2, [pc, #84]	; (2000048c <graphic_write+0x6a>)
20000436:	1dfb      	adds	r3, r7, #7
20000438:	781b      	ldrb	r3, [r3, #0]
2000043a:	7013      	strb	r3, [r2, #0]
select_controller(controller);
2000043c:	1dbb      	adds	r3, r7, #6
2000043e:	781b      	ldrb	r3, [r3, #0]
20000440:	0018      	movs	r0, r3
20000442:	f7ff fefd 	bl	20000240 <select_controller>
delay_500ns();
20000446:	f7ff fe99 	bl	2000017c <delay_500ns>
graphic_ctrl_bit_set(B_E);
2000044a:	2040      	movs	r0, #64	; 0x40
2000044c:	f7ff fe9f 	bl	2000018e <graphic_ctrl_bit_set>
delay_500ns();
20000450:	f7ff fe94 	bl	2000017c <delay_500ns>
graphic_ctrl_bit_clear( B_E );
20000454:	2040      	movs	r0, #64	; 0x40
20000456:	f7ff fec7 	bl	200001e8 <graphic_ctrl_bit_clear>
if(controller & B_CS1) {
2000045a:	1dbb      	adds	r3, r7, #6
2000045c:	781b      	ldrb	r3, [r3, #0]
2000045e:	2208      	movs	r2, #8
20000460:	4013      	ands	r3, r2
20000462:	d004      	beq.n	2000046e <graphic_write+0x4c>
select_controller( B_CS1);
20000464:	2008      	movs	r0, #8
20000466:	f7ff feeb 	bl	20000240 <select_controller>
graphic_wait_ready();
2000046a:	f7ff ff44 	bl	200002f6 <graphic_wait_ready>
}
if(controller & B_CS2) {
2000046e:	1dbb      	adds	r3, r7, #6
20000470:	781b      	ldrb	r3, [r3, #0]
20000472:	2210      	movs	r2, #16
20000474:	4013      	ands	r3, r2
20000476:	d004      	beq.n	20000482 <graphic_write+0x60>
select_controller( B_CS2);
20000478:	2010      	movs	r0, #16
2000047a:	f7ff fee1 	bl	20000240 <select_controller>
graphic_wait_ready();
2000047e:	f7ff ff3a 	bl	200002f6 <graphic_wait_ready>
}
}
20000482:	46c0      	nop			; (mov r8, r8)
20000484:	46bd      	mov	sp, r7
20000486:	b002      	add	sp, #8
20000488:	bd80      	pop	{r7, pc}
2000048a:	46c0      	nop			; (mov r8, r8)
2000048c:	40021015 	andmi	r1, r2, r5, lsl r0

20000490 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller) {
20000490:	b580      	push	{r7, lr}
20000492:	b082      	sub	sp, #8
20000494:	af00      	add	r7, sp, #0
20000496:	0002      	movs	r2, r0
20000498:	1dfb      	adds	r3, r7, #7
2000049a:	701a      	strb	r2, [r3, #0]
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	1c0a      	adds	r2, r1, #0
200004a0:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
200004a2:	2040      	movs	r0, #64	; 0x40
200004a4:	f7ff fea0 	bl	200001e8 <graphic_ctrl_bit_clear>
select_controller(controller);
200004a8:	1dbb      	adds	r3, r7, #6
200004aa:	781b      	ldrb	r3, [r3, #0]
200004ac:	0018      	movs	r0, r3
200004ae:	f7ff fec7 	bl	20000240 <select_controller>
graphic_ctrl_bit_clear(B_RS|B_RW);
200004b2:	2003      	movs	r0, #3
200004b4:	f7ff fe98 	bl	200001e8 <graphic_ctrl_bit_clear>
graphic_write(command, controller);
200004b8:	1dbb      	adds	r3, r7, #6
200004ba:	781a      	ldrb	r2, [r3, #0]
200004bc:	1dfb      	adds	r3, r7, #7
200004be:	781b      	ldrb	r3, [r3, #0]
200004c0:	0011      	movs	r1, r2
200004c2:	0018      	movs	r0, r3
200004c4:	f7ff ffad 	bl	20000422 <graphic_write>
}
200004c8:	46c0      	nop			; (mov r8, r8)
200004ca:	46bd      	mov	sp, r7
200004cc:	b002      	add	sp, #8
200004ce:	bd80      	pop	{r7, pc}

200004d0 <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller) {
200004d0:	b580      	push	{r7, lr}
200004d2:	b082      	sub	sp, #8
200004d4:	af00      	add	r7, sp, #0
200004d6:	0002      	movs	r2, r0
200004d8:	1dfb      	adds	r3, r7, #7
200004da:	701a      	strb	r2, [r3, #0]
200004dc:	1dbb      	adds	r3, r7, #6
200004de:	1c0a      	adds	r2, r1, #0
200004e0:	701a      	strb	r2, [r3, #0]
graphic_ctrl_bit_clear(B_E);
200004e2:	2040      	movs	r0, #64	; 0x40
200004e4:	f7ff fe80 	bl	200001e8 <graphic_ctrl_bit_clear>
select_controller(controller);
200004e8:	1dbb      	adds	r3, r7, #6
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	0018      	movs	r0, r3
200004ee:	f7ff fea7 	bl	20000240 <select_controller>
graphic_ctrl_bit_set(B_RS);
200004f2:	2001      	movs	r0, #1
200004f4:	f7ff fe4b 	bl	2000018e <graphic_ctrl_bit_set>
graphic_ctrl_bit_clear(B_RW);
200004f8:	2002      	movs	r0, #2
200004fa:	f7ff fe75 	bl	200001e8 <graphic_ctrl_bit_clear>
graphic_write(data, controller);
200004fe:	1dbb      	adds	r3, r7, #6
20000500:	781a      	ldrb	r2, [r3, #0]
20000502:	1dfb      	adds	r3, r7, #7
20000504:	781b      	ldrb	r3, [r3, #0]
20000506:	0011      	movs	r1, r2
20000508:	0018      	movs	r0, r3
2000050a:	f7ff ff8a 	bl	20000422 <graphic_write>
}
2000050e:	46c0      	nop			; (mov r8, r8)
20000510:	46bd      	mov	sp, r7
20000512:	b002      	add	sp, #8
20000514:	bd80      	pop	{r7, pc}

20000516 <graphic_clear_screen>:
void graphic_clear_screen(void) {
20000516:	b580      	push	{r7, lr}
20000518:	b082      	sub	sp, #8
2000051a:	af00      	add	r7, sp, #0
uint8_t i, j;
for(j = 0; j < 8; j++) {
2000051c:	1dbb      	adds	r3, r7, #6
2000051e:	2200      	movs	r2, #0
20000520:	701a      	strb	r2, [r3, #0]
20000522:	e023      	b.n	2000056c <graphic_clear_screen+0x56>
graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
20000524:	1dbb      	adds	r3, r7, #6
20000526:	781b      	ldrb	r3, [r3, #0]
20000528:	2248      	movs	r2, #72	; 0x48
2000052a:	4252      	negs	r2, r2
2000052c:	4313      	orrs	r3, r2
2000052e:	b2db      	uxtb	r3, r3
20000530:	2118      	movs	r1, #24
20000532:	0018      	movs	r0, r3
20000534:	f7ff ffac 	bl	20000490 <graphic_write_command>
graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000538:	2118      	movs	r1, #24
2000053a:	2040      	movs	r0, #64	; 0x40
2000053c:	f7ff ffa8 	bl	20000490 <graphic_write_command>
for(i = 0; i <= 63; i++){
20000540:	1dfb      	adds	r3, r7, #7
20000542:	2200      	movs	r2, #0
20000544:	701a      	strb	r2, [r3, #0]
20000546:	e008      	b.n	2000055a <graphic_clear_screen+0x44>
graphic_write_data(0, B_CS1|B_CS2);
20000548:	2118      	movs	r1, #24
2000054a:	2000      	movs	r0, #0
2000054c:	f7ff ffc0 	bl	200004d0 <graphic_write_data>
for(i = 0; i <= 63; i++){
20000550:	1dfb      	adds	r3, r7, #7
20000552:	781a      	ldrb	r2, [r3, #0]
20000554:	1dfb      	adds	r3, r7, #7
20000556:	3201      	adds	r2, #1
20000558:	701a      	strb	r2, [r3, #0]
2000055a:	1dfb      	adds	r3, r7, #7
2000055c:	781b      	ldrb	r3, [r3, #0]
2000055e:	2b3f      	cmp	r3, #63	; 0x3f
20000560:	d9f2      	bls.n	20000548 <graphic_clear_screen+0x32>
for(j = 0; j < 8; j++) {
20000562:	1dbb      	adds	r3, r7, #6
20000564:	781a      	ldrb	r2, [r3, #0]
20000566:	1dbb      	adds	r3, r7, #6
20000568:	3201      	adds	r2, #1
2000056a:	701a      	strb	r2, [r3, #0]
2000056c:	1dbb      	adds	r3, r7, #6
2000056e:	781b      	ldrb	r3, [r3, #0]
20000570:	2b07      	cmp	r3, #7
20000572:	d9d7      	bls.n	20000524 <graphic_clear_screen+0xe>
}
}
}
20000574:	46c0      	nop			; (mov r8, r8)
20000576:	46bd      	mov	sp, r7
20000578:	b002      	add	sp, #8
2000057a:	bd80      	pop	{r7, pc}

2000057c <pixel>:
void pixel(int x, int y, int set) {
2000057c:	b590      	push	{r4, r7, lr}
2000057e:	b089      	sub	sp, #36	; 0x24
20000580:	af00      	add	r7, sp, #0
20000582:	60f8      	str	r0, [r7, #12]
20000584:	60b9      	str	r1, [r7, #8]
20000586:	607a      	str	r2, [r7, #4]
uint8_t mask, c, controller;
int index;
if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	2b00      	cmp	r3, #0
2000058c:	dc00      	bgt.n	20000590 <pixel+0x14>
2000058e:	e0bc      	b.n	2000070a <pixel+0x18e>
20000590:	68bb      	ldr	r3, [r7, #8]
20000592:	2b00      	cmp	r3, #0
20000594:	dc00      	bgt.n	20000598 <pixel+0x1c>
20000596:	e0b8      	b.n	2000070a <pixel+0x18e>
20000598:	68fb      	ldr	r3, [r7, #12]
2000059a:	2b80      	cmp	r3, #128	; 0x80
2000059c:	dd00      	ble.n	200005a0 <pixel+0x24>
2000059e:	e0b4      	b.n	2000070a <pixel+0x18e>
200005a0:	68bb      	ldr	r3, [r7, #8]
200005a2:	2b40      	cmp	r3, #64	; 0x40
200005a4:	dd00      	ble.n	200005a8 <pixel+0x2c>
200005a6:	e0b0      	b.n	2000070a <pixel+0x18e>
index = (y-1)/8;
200005a8:	68bb      	ldr	r3, [r7, #8]
200005aa:	3b01      	subs	r3, #1
200005ac:	2b00      	cmp	r3, #0
200005ae:	da00      	bge.n	200005b2 <pixel+0x36>
200005b0:	3307      	adds	r3, #7
200005b2:	10db      	asrs	r3, r3, #3
200005b4:	61bb      	str	r3, [r7, #24]
switch( (y-1)%8 ) {
200005b6:	68bb      	ldr	r3, [r7, #8]
200005b8:	3b01      	subs	r3, #1
200005ba:	4a56      	ldr	r2, [pc, #344]	; (20000714 <pixel+0x198>)
200005bc:	4013      	ands	r3, r2
200005be:	d504      	bpl.n	200005ca <pixel+0x4e>
200005c0:	3b01      	subs	r3, #1
200005c2:	2208      	movs	r2, #8
200005c4:	4252      	negs	r2, r2
200005c6:	4313      	orrs	r3, r2
200005c8:	3301      	adds	r3, #1
200005ca:	2b07      	cmp	r3, #7
200005cc:	d82c      	bhi.n	20000628 <pixel+0xac>
200005ce:	009a      	lsls	r2, r3, #2
200005d0:	4b51      	ldr	r3, [pc, #324]	; (20000718 <pixel+0x19c>)
200005d2:	18d3      	adds	r3, r2, r3
200005d4:	681b      	ldr	r3, [r3, #0]
200005d6:	469f      	mov	pc, r3
case 0: mask = 1; break;
200005d8:	231f      	movs	r3, #31
200005da:	18fb      	adds	r3, r7, r3
200005dc:	2201      	movs	r2, #1
200005de:	701a      	strb	r2, [r3, #0]
200005e0:	e022      	b.n	20000628 <pixel+0xac>
case 1: mask = 2; break;
200005e2:	231f      	movs	r3, #31
200005e4:	18fb      	adds	r3, r7, r3
200005e6:	2202      	movs	r2, #2
200005e8:	701a      	strb	r2, [r3, #0]
200005ea:	e01d      	b.n	20000628 <pixel+0xac>
case 2: mask = 4; break;
200005ec:	231f      	movs	r3, #31
200005ee:	18fb      	adds	r3, r7, r3
200005f0:	2204      	movs	r2, #4
200005f2:	701a      	strb	r2, [r3, #0]
200005f4:	e018      	b.n	20000628 <pixel+0xac>
case 3: mask = 8; break;
200005f6:	231f      	movs	r3, #31
200005f8:	18fb      	adds	r3, r7, r3
200005fa:	2208      	movs	r2, #8
200005fc:	701a      	strb	r2, [r3, #0]
200005fe:	e013      	b.n	20000628 <pixel+0xac>
case 4: mask = 0x10; break;
20000600:	231f      	movs	r3, #31
20000602:	18fb      	adds	r3, r7, r3
20000604:	2210      	movs	r2, #16
20000606:	701a      	strb	r2, [r3, #0]
20000608:	e00e      	b.n	20000628 <pixel+0xac>
case 5: mask = 0x20; break;
2000060a:	231f      	movs	r3, #31
2000060c:	18fb      	adds	r3, r7, r3
2000060e:	2220      	movs	r2, #32
20000610:	701a      	strb	r2, [r3, #0]
20000612:	e009      	b.n	20000628 <pixel+0xac>
case 6: mask = 0x40; break;
20000614:	231f      	movs	r3, #31
20000616:	18fb      	adds	r3, r7, r3
20000618:	2240      	movs	r2, #64	; 0x40
2000061a:	701a      	strb	r2, [r3, #0]
2000061c:	e004      	b.n	20000628 <pixel+0xac>
case 7: mask = 0x80; break;
2000061e:	231f      	movs	r3, #31
20000620:	18fb      	adds	r3, r7, r3
20000622:	2280      	movs	r2, #128	; 0x80
20000624:	701a      	strb	r2, [r3, #0]
20000626:	46c0      	nop			; (mov r8, r8)
}
if(set == 0)
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	2b00      	cmp	r3, #0
2000062c:	d106      	bne.n	2000063c <pixel+0xc0>
mask = ~mask;
2000062e:	231f      	movs	r3, #31
20000630:	18fb      	adds	r3, r7, r3
20000632:	221f      	movs	r2, #31
20000634:	18ba      	adds	r2, r7, r2
20000636:	7812      	ldrb	r2, [r2, #0]
20000638:	43d2      	mvns	r2, r2
2000063a:	701a      	strb	r2, [r3, #0]
if(x > 64){
2000063c:	68fb      	ldr	r3, [r7, #12]
2000063e:	2b40      	cmp	r3, #64	; 0x40
20000640:	dd07      	ble.n	20000652 <pixel+0xd6>
controller = B_CS2;
20000642:	231e      	movs	r3, #30
20000644:	18fb      	adds	r3, r7, r3
20000646:	2210      	movs	r2, #16
20000648:	701a      	strb	r2, [r3, #0]
x = x - 65;
2000064a:	68fb      	ldr	r3, [r7, #12]
2000064c:	3b41      	subs	r3, #65	; 0x41
2000064e:	60fb      	str	r3, [r7, #12]
20000650:	e006      	b.n	20000660 <pixel+0xe4>
} else {
controller = B_CS1;
20000652:	231e      	movs	r3, #30
20000654:	18fb      	adds	r3, r7, r3
20000656:	2208      	movs	r2, #8
20000658:	701a      	strb	r2, [r3, #0]
x = x-1;
2000065a:	68fb      	ldr	r3, [r7, #12]
2000065c:	3b01      	subs	r3, #1
2000065e:	60fb      	str	r3, [r7, #12]
}
graphic_write_command(LCD_SET_ADD | x, controller );
20000660:	68fb      	ldr	r3, [r7, #12]
20000662:	b25b      	sxtb	r3, r3
20000664:	2240      	movs	r2, #64	; 0x40
20000666:	4313      	orrs	r3, r2
20000668:	b25b      	sxtb	r3, r3
2000066a:	b2da      	uxtb	r2, r3
2000066c:	231e      	movs	r3, #30
2000066e:	18fb      	adds	r3, r7, r3
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	0019      	movs	r1, r3
20000674:	0010      	movs	r0, r2
20000676:	f7ff ff0b 	bl	20000490 <graphic_write_command>
graphic_write_command(LCD_SET_PAGE | index, controller );
2000067a:	69bb      	ldr	r3, [r7, #24]
2000067c:	b25b      	sxtb	r3, r3
2000067e:	2248      	movs	r2, #72	; 0x48
20000680:	4252      	negs	r2, r2
20000682:	4313      	orrs	r3, r2
20000684:	b25b      	sxtb	r3, r3
20000686:	b2da      	uxtb	r2, r3
20000688:	231e      	movs	r3, #30
2000068a:	18fb      	adds	r3, r7, r3
2000068c:	781b      	ldrb	r3, [r3, #0]
2000068e:	0019      	movs	r1, r3
20000690:	0010      	movs	r0, r2
20000692:	f7ff fefd 	bl	20000490 <graphic_write_command>
c = graphic_read_data(controller);
20000696:	2317      	movs	r3, #23
20000698:	18fc      	adds	r4, r7, r3
2000069a:	231e      	movs	r3, #30
2000069c:	18fb      	adds	r3, r7, r3
2000069e:	781b      	ldrb	r3, [r3, #0]
200006a0:	0018      	movs	r0, r3
200006a2:	f7ff fea9 	bl	200003f8 <graphic_read_data>
200006a6:	0003      	movs	r3, r0
200006a8:	7023      	strb	r3, [r4, #0]
graphic_write_command(LCD_SET_ADD | x, controller);
200006aa:	68fb      	ldr	r3, [r7, #12]
200006ac:	b25b      	sxtb	r3, r3
200006ae:	2240      	movs	r2, #64	; 0x40
200006b0:	4313      	orrs	r3, r2
200006b2:	b25b      	sxtb	r3, r3
200006b4:	b2da      	uxtb	r2, r3
200006b6:	231e      	movs	r3, #30
200006b8:	18fb      	adds	r3, r7, r3
200006ba:	781b      	ldrb	r3, [r3, #0]
200006bc:	0019      	movs	r1, r3
200006be:	0010      	movs	r0, r2
200006c0:	f7ff fee6 	bl	20000490 <graphic_write_command>
if(set)
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	2b00      	cmp	r3, #0
200006c8:	d00a      	beq.n	200006e0 <pixel+0x164>
mask = mask | c;
200006ca:	231f      	movs	r3, #31
200006cc:	18fb      	adds	r3, r7, r3
200006ce:	221f      	movs	r2, #31
200006d0:	18b9      	adds	r1, r7, r2
200006d2:	2217      	movs	r2, #23
200006d4:	18ba      	adds	r2, r7, r2
200006d6:	7809      	ldrb	r1, [r1, #0]
200006d8:	7812      	ldrb	r2, [r2, #0]
200006da:	430a      	orrs	r2, r1
200006dc:	701a      	strb	r2, [r3, #0]
200006de:	e009      	b.n	200006f4 <pixel+0x178>
else
mask = mask & c;
200006e0:	231f      	movs	r3, #31
200006e2:	18fb      	adds	r3, r7, r3
200006e4:	221f      	movs	r2, #31
200006e6:	18ba      	adds	r2, r7, r2
200006e8:	2117      	movs	r1, #23
200006ea:	1879      	adds	r1, r7, r1
200006ec:	7812      	ldrb	r2, [r2, #0]
200006ee:	7809      	ldrb	r1, [r1, #0]
200006f0:	400a      	ands	r2, r1
200006f2:	701a      	strb	r2, [r3, #0]
graphic_write_data(mask, controller);
200006f4:	231e      	movs	r3, #30
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	781a      	ldrb	r2, [r3, #0]
200006fa:	231f      	movs	r3, #31
200006fc:	18fb      	adds	r3, r7, r3
200006fe:	781b      	ldrb	r3, [r3, #0]
20000700:	0011      	movs	r1, r2
20000702:	0018      	movs	r0, r3
20000704:	f7ff fee4 	bl	200004d0 <graphic_write_data>
20000708:	e000      	b.n	2000070c <pixel+0x190>
if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
2000070a:	46c0      	nop			; (mov r8, r8)
}
2000070c:	46bd      	mov	sp, r7
2000070e:	b009      	add	sp, #36	; 0x24
20000710:	bd90      	pop	{r4, r7, pc}
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	80000007 	andhi	r0, r0, r7
20000718:	20000834 	andcs	r0, r0, r4, lsr r8

2000071c <__udivsi3>:
2000071c:	2200      	movs	r2, #0
2000071e:	0843      	lsrs	r3, r0, #1
20000720:	428b      	cmp	r3, r1
20000722:	d374      	bcc.n	2000080e <__udivsi3+0xf2>
20000724:	0903      	lsrs	r3, r0, #4
20000726:	428b      	cmp	r3, r1
20000728:	d35f      	bcc.n	200007ea <__udivsi3+0xce>
2000072a:	0a03      	lsrs	r3, r0, #8
2000072c:	428b      	cmp	r3, r1
2000072e:	d344      	bcc.n	200007ba <__udivsi3+0x9e>
20000730:	0b03      	lsrs	r3, r0, #12
20000732:	428b      	cmp	r3, r1
20000734:	d328      	bcc.n	20000788 <__udivsi3+0x6c>
20000736:	0c03      	lsrs	r3, r0, #16
20000738:	428b      	cmp	r3, r1
2000073a:	d30d      	bcc.n	20000758 <__udivsi3+0x3c>
2000073c:	22ff      	movs	r2, #255	; 0xff
2000073e:	0209      	lsls	r1, r1, #8
20000740:	ba12      	rev	r2, r2
20000742:	0c03      	lsrs	r3, r0, #16
20000744:	428b      	cmp	r3, r1
20000746:	d302      	bcc.n	2000074e <__udivsi3+0x32>
20000748:	1212      	asrs	r2, r2, #8
2000074a:	0209      	lsls	r1, r1, #8
2000074c:	d065      	beq.n	2000081a <__udivsi3+0xfe>
2000074e:	0b03      	lsrs	r3, r0, #12
20000750:	428b      	cmp	r3, r1
20000752:	d319      	bcc.n	20000788 <__udivsi3+0x6c>
20000754:	e000      	b.n	20000758 <__udivsi3+0x3c>
20000756:	0a09      	lsrs	r1, r1, #8
20000758:	0bc3      	lsrs	r3, r0, #15
2000075a:	428b      	cmp	r3, r1
2000075c:	d301      	bcc.n	20000762 <__udivsi3+0x46>
2000075e:	03cb      	lsls	r3, r1, #15
20000760:	1ac0      	subs	r0, r0, r3
20000762:	4152      	adcs	r2, r2
20000764:	0b83      	lsrs	r3, r0, #14
20000766:	428b      	cmp	r3, r1
20000768:	d301      	bcc.n	2000076e <__udivsi3+0x52>
2000076a:	038b      	lsls	r3, r1, #14
2000076c:	1ac0      	subs	r0, r0, r3
2000076e:	4152      	adcs	r2, r2
20000770:	0b43      	lsrs	r3, r0, #13
20000772:	428b      	cmp	r3, r1
20000774:	d301      	bcc.n	2000077a <__udivsi3+0x5e>
20000776:	034b      	lsls	r3, r1, #13
20000778:	1ac0      	subs	r0, r0, r3
2000077a:	4152      	adcs	r2, r2
2000077c:	0b03      	lsrs	r3, r0, #12
2000077e:	428b      	cmp	r3, r1
20000780:	d301      	bcc.n	20000786 <__udivsi3+0x6a>
20000782:	030b      	lsls	r3, r1, #12
20000784:	1ac0      	subs	r0, r0, r3
20000786:	4152      	adcs	r2, r2
20000788:	0ac3      	lsrs	r3, r0, #11
2000078a:	428b      	cmp	r3, r1
2000078c:	d301      	bcc.n	20000792 <__udivsi3+0x76>
2000078e:	02cb      	lsls	r3, r1, #11
20000790:	1ac0      	subs	r0, r0, r3
20000792:	4152      	adcs	r2, r2
20000794:	0a83      	lsrs	r3, r0, #10
20000796:	428b      	cmp	r3, r1
20000798:	d301      	bcc.n	2000079e <__udivsi3+0x82>
2000079a:	028b      	lsls	r3, r1, #10
2000079c:	1ac0      	subs	r0, r0, r3
2000079e:	4152      	adcs	r2, r2
200007a0:	0a43      	lsrs	r3, r0, #9
200007a2:	428b      	cmp	r3, r1
200007a4:	d301      	bcc.n	200007aa <__udivsi3+0x8e>
200007a6:	024b      	lsls	r3, r1, #9
200007a8:	1ac0      	subs	r0, r0, r3
200007aa:	4152      	adcs	r2, r2
200007ac:	0a03      	lsrs	r3, r0, #8
200007ae:	428b      	cmp	r3, r1
200007b0:	d301      	bcc.n	200007b6 <__udivsi3+0x9a>
200007b2:	020b      	lsls	r3, r1, #8
200007b4:	1ac0      	subs	r0, r0, r3
200007b6:	4152      	adcs	r2, r2
200007b8:	d2cd      	bcs.n	20000756 <__udivsi3+0x3a>
200007ba:	09c3      	lsrs	r3, r0, #7
200007bc:	428b      	cmp	r3, r1
200007be:	d301      	bcc.n	200007c4 <__udivsi3+0xa8>
200007c0:	01cb      	lsls	r3, r1, #7
200007c2:	1ac0      	subs	r0, r0, r3
200007c4:	4152      	adcs	r2, r2
200007c6:	0983      	lsrs	r3, r0, #6
200007c8:	428b      	cmp	r3, r1
200007ca:	d301      	bcc.n	200007d0 <__udivsi3+0xb4>
200007cc:	018b      	lsls	r3, r1, #6
200007ce:	1ac0      	subs	r0, r0, r3
200007d0:	4152      	adcs	r2, r2
200007d2:	0943      	lsrs	r3, r0, #5
200007d4:	428b      	cmp	r3, r1
200007d6:	d301      	bcc.n	200007dc <__udivsi3+0xc0>
200007d8:	014b      	lsls	r3, r1, #5
200007da:	1ac0      	subs	r0, r0, r3
200007dc:	4152      	adcs	r2, r2
200007de:	0903      	lsrs	r3, r0, #4
200007e0:	428b      	cmp	r3, r1
200007e2:	d301      	bcc.n	200007e8 <__udivsi3+0xcc>
200007e4:	010b      	lsls	r3, r1, #4
200007e6:	1ac0      	subs	r0, r0, r3
200007e8:	4152      	adcs	r2, r2
200007ea:	08c3      	lsrs	r3, r0, #3
200007ec:	428b      	cmp	r3, r1
200007ee:	d301      	bcc.n	200007f4 <__udivsi3+0xd8>
200007f0:	00cb      	lsls	r3, r1, #3
200007f2:	1ac0      	subs	r0, r0, r3
200007f4:	4152      	adcs	r2, r2
200007f6:	0883      	lsrs	r3, r0, #2
200007f8:	428b      	cmp	r3, r1
200007fa:	d301      	bcc.n	20000800 <__udivsi3+0xe4>
200007fc:	008b      	lsls	r3, r1, #2
200007fe:	1ac0      	subs	r0, r0, r3
20000800:	4152      	adcs	r2, r2
20000802:	0843      	lsrs	r3, r0, #1
20000804:	428b      	cmp	r3, r1
20000806:	d301      	bcc.n	2000080c <__udivsi3+0xf0>
20000808:	004b      	lsls	r3, r1, #1
2000080a:	1ac0      	subs	r0, r0, r3
2000080c:	4152      	adcs	r2, r2
2000080e:	1a41      	subs	r1, r0, r1
20000810:	d200      	bcs.n	20000814 <__udivsi3+0xf8>
20000812:	4601      	mov	r1, r0
20000814:	4152      	adcs	r2, r2
20000816:	4610      	mov	r0, r2
20000818:	4770      	bx	lr
2000081a:	e7ff      	b.n	2000081c <__udivsi3+0x100>
2000081c:	b501      	push	{r0, lr}
2000081e:	2000      	movs	r0, #0
20000820:	f000 f806 	bl	20000830 <__aeabi_idiv0>
20000824:	bd02      	pop	{r1, pc}
20000826:	46c0      	nop			; (mov r8, r8)

20000828 <__aeabi_uidivmod>:
20000828:	2900      	cmp	r1, #0
2000082a:	d0f7      	beq.n	2000081c <__udivsi3+0x100>
2000082c:	e776      	b.n	2000071c <__udivsi3>
2000082e:	4770      	bx	lr

20000830 <__aeabi_idiv0>:
20000830:	4770      	bx	lr
20000832:	46c0      	nop			; (mov r8, r8)
20000834:	200005d8 	ldrdcs	r0, [r0], -r8
20000838:	200005e2 	andcs	r0, r0, r2, ror #11
2000083c:	200005ec 	andcs	r0, r0, ip, ror #11
20000840:	200005f6 	strdcs	r0, [r0], -r6
20000844:	20000600 	andcs	r0, r0, r0, lsl #12
20000848:	2000060a 	andcs	r0, r0, sl, lsl #12
2000084c:	20000614 	andcs	r0, r0, r4, lsl r6
20000850:	2000061e 	andcs	r0, r0, lr, lsl r6

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000430 	andeq	r0, r0, r0, lsr r4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000c5 	andeq	r0, r0, r5, asr #1
  10:	0001d40c 	andeq	sp, r1, ip, lsl #8
	...
  20:	00af0200 	adceq	r0, pc, r0, lsl #4
  24:	05010000 	streq	r0, [r1, #-0]
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	b7080103 	strlt	r0, [r8, -r3, lsl #2]
  30:	04000000 	streq	r0, [r0], #-0
  34:	00000046 	andeq	r0, r0, r6, asr #32
  38:	7c010501 	cfstr32vc	mvfx0, [r1], {1}
  3c:	a0200005 	eorge	r0, r0, r5
  40:	01000001 	tsteq	r0, r1
  44:	0000ad9c 	muleq	r0, ip, sp
  48:	00780500 	rsbseq	r0, r8, r0, lsl #10
  4c:	ad010501 	cfstr32ge	mvfx0, [r1, #-4]
  50:	02000000 	andeq	r0, r0, #0
  54:	79055c91 	stmdbvc	r5, {r0, r4, r7, sl, fp, ip, lr}
  58:	01050100 	mrseq	r0, (UNDEF: 21)
  5c:	000000ad 	andeq	r0, r0, sp, lsr #1
  60:	05589102 	ldrbeq	r9, [r8, #-258]	; 0xfffffefe
  64:	00746573 	rsbseq	r6, r4, r3, ror r5
  68:	ad010501 	cfstr32ge	mvfx0, [r1, #-4]
  6c:	02000000 	andeq	r0, r0, #0
  70:	aa065491 	bge	1952bc <startup-0x1fe6ad44>
  74:	01000000 	mrseq	r0, (UNDEF: 0)
  78:	00210106 	eoreq	r0, r1, r6, lsl #2
  7c:	91020000 	mrsls	r0, (UNDEF: 2)
  80:	0063076f 	rsbeq	r0, r3, pc, ror #14
  84:	21010601 	tstcs	r1, r1, lsl #12
  88:	02000000 	andeq	r0, r0, #0
  8c:	72066791 	andvc	r6, r6, #38010880	; 0x2440000
  90:	01000001 	tsteq	r0, r1
  94:	00210106 	eoreq	r0, r1, r6, lsl #2
  98:	91020000 	mrsls	r0, (UNDEF: 2)
  9c:	017d066e 	cmneq	sp, lr, ror #12
  a0:	07010000 	streq	r0, [r1, -r0]
  a4:	0000ad01 	andeq	sl, r0, r1, lsl #26
  a8:	68910200 	ldmvs	r1, {r9}
  ac:	05040800 	streq	r0, [r4, #-2048]	; 0xfffff800
  b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
  b4:	0001b209 	andeq	fp, r1, r9, lsl #4
  b8:	16fb0100 	ldrbtne	r0, [fp], r0, lsl #2
  bc:	66200005 	strtvs	r0, [r0], -r5
  c0:	01000000 	mrseq	r0, (UNDEF: 0)
  c4:	0000e29c 	muleq	r0, ip, r2
  c8:	00690a00 	rsbeq	r0, r9, r0, lsl #20
  cc:	0021fc01 	eoreq	pc, r1, r1, lsl #24
  d0:	91020000 	mrsls	r0, (UNDEF: 2)
  d4:	006a0a77 	rsbeq	r0, sl, r7, ror sl
  d8:	0021fc01 	eoreq	pc, r1, r1, lsl #24
  dc:	91020000 	mrsls	r0, (UNDEF: 2)
  e0:	8e090076 	mcrhi	0, 0, r0, cr9, cr6, {3}
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	0004d0f4 	strdeq	sp, [r4], -r4
  ec:	00004620 	andeq	r4, r0, r0, lsr #12
  f0:	149c0100 	ldrne	r0, [ip], #256	; 0x100
  f4:	0b000001 	bleq	100 <startup-0x1fffff00>
  f8:	00000041 	andeq	r0, r0, r1, asr #32
  fc:	0021f401 	eoreq	pc, r1, r1, lsl #8
 100:	91020000 	mrsls	r0, (UNDEF: 2)
 104:	01720b77 	cmneq	r2, r7, ror fp
 108:	f4010000 	vst4.8	{d0-d3}, [r1], r0
 10c:	00000021 	andeq	r0, r0, r1, lsr #32
 110:	00769102 	rsbseq	r9, r6, r2, lsl #2
 114:	00001209 	andeq	r1, r0, r9, lsl #4
 118:	90ee0100 	rscls	r0, lr, r0, lsl #2
 11c:	40200004 	eormi	r0, r0, r4
 120:	01000000 	mrseq	r0, (UNDEF: 0)
 124:	0001469c 	muleq	r1, ip, r6
 128:	00200b00 	eoreq	r0, r0, r0, lsl #22
 12c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
 130:	00000021 	andeq	r0, r0, r1, lsr #32
 134:	0b779102 	bleq	1de4544 <startup-0x1e21babc>
 138:	00000172 	andeq	r0, r0, r2, ror r1
 13c:	0021ee01 	eoreq	lr, r1, r1, lsl #28
 140:	91020000 	mrsls	r0, (UNDEF: 2)
 144:	5d0c0076 	stcpl	0, cr0, [ip, #-472]	; 0xfffffe28
 148:	01000001 	tsteq	r0, r1
 14c:	000422de 	ldrdeq	r2, [r4], -lr
 150:	00006e20 	andeq	r6, r0, r0, lsr #28
 154:	789c0100 	ldmvc	ip, {r8}
 158:	0b000001 	bleq	164 <startup-0x1ffffe9c>
 15c:	0000000c 	andeq	r0, r0, ip
 160:	0021de01 	eoreq	sp, r1, r1, lsl #28
 164:	91020000 	mrsls	r0, (UNDEF: 2)
 168:	01720b77 	cmneq	r2, r7, ror fp
 16c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
 170:	00000021 	andeq	r0, r0, r1, lsr #32
 174:	00769102 	rsbseq	r9, r6, r2, lsl #2
 178:	0000340d 	andeq	r3, r0, sp, lsl #8
 17c:	21da0100 	bicscs	r0, sl, r0, lsl #2
 180:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 184:	2a200003 	bcs	800198 <startup-0x1f7ffe68>
 188:	01000000 	mrseq	r0, (UNDEF: 0)
 18c:	0001a09c 	muleq	r1, ip, r0
 190:	01720b00 	cmneq	r2, r0, lsl #22
 194:	da010000 	ble	4019c <startup-0x1ffbfe64>
 198:	00000021 	andeq	r0, r0, r1, lsr #32
 19c:	00779102 	rsbseq	r9, r7, r2, lsl #2
 1a0:	0001830d 	andeq	r8, r1, sp, lsl #6
 1a4:	21c40100 	biccs	r0, r4, r0, lsl #2
 1a8:	64000000 	strvs	r0, [r0], #-0
 1ac:	94200003 	strtls	r0, [r0], #-3
 1b0:	01000000 	mrseq	r0, (UNDEF: 0)
 1b4:	0001d49c 	muleq	r1, ip, r4
 1b8:	01720b00 	cmneq	r2, r0, lsl #22
 1bc:	c4010000 	strgt	r0, [r1], #-0
 1c0:	00000021 	andeq	r0, r0, r1, lsr #32
 1c4:	0a6f9102 	beq	1be45d4 <startup-0x1e41ba2c>
 1c8:	c5010063 	strgt	r0, [r1, #-99]	; 0xffffff9d
 1cc:	00000021 	andeq	r0, r0, r1, lsr #32
 1d0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 1d4:	00007b0c 	andeq	r7, r0, ip, lsl #22
 1d8:	f6b20100 			; <UNDEFINED> instruction: 0xf6b20100
 1dc:	6e200002 	cdpvs	0, 2, cr0, cr0, cr2, {0}
 1e0:	01000000 	mrseq	r0, (UNDEF: 0)
 1e4:	0001f69c 	muleq	r1, ip, r6
 1e8:	00630a00 	rsbeq	r0, r3, r0, lsl #20
 1ec:	0021b301 	eoreq	fp, r1, r1, lsl #6
 1f0:	91020000 	mrsls	r0, (UNDEF: 2)
 1f4:	18090077 	stmdane	r9, {r0, r1, r2, r4, r5, r6}
 1f8:	01000002 	tsteq	r0, r2
 1fc:	00029aa4 	andeq	r9, r2, r4, lsr #21
 200:	00005c20 	andeq	r5, r0, r0, lsr #24
 204:	199c0100 	ldmibne	ip, {r8}
 208:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 20c:	00000012 	andeq	r0, r0, r2, lsl r0
 210:	00adab01 	adceq	sl, sp, r1, lsl #22
 214:	000f0000 	andeq	r0, pc, r0
 218:	016b0c00 	cmneq	fp, r0, lsl #24
 21c:	92010000 	andls	r0, r1, #0
 220:	20000240 	andcs	r0, r0, r0, asr #4
 224:	0000005a 	andeq	r0, r0, sl, asr r0
 228:	023d9c01 	eorseq	r9, sp, #256	; 0x100
 22c:	720b0000 	andvc	r0, fp, #0
 230:	01000001 	tsteq	r0, r1
 234:	00002192 	muleq	r0, r2, r1
 238:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 23c:	004c1000 	subeq	r1, ip, r0
 240:	8b010000 	blhi	40248 <startup-0x1ffbfdb8>
 244:	200001e8 	andcs	r0, r0, r8, ror #3
 248:	00000058 	andeq	r0, r0, r8, asr r0
 24c:	026b9c01 	rsbeq	r9, fp, #256	; 0x100
 250:	78110000 	ldmdavc	r1, {}	; <UNPREDICTABLE>
 254:	218b0100 	orrcs	r0, fp, r0, lsl #2
 258:	02000000 	andeq	r0, r0, #0
 25c:	630a6f91 	movwvs	r6, #44945	; 0xaf91
 260:	218c0100 	orrcs	r0, ip, r0, lsl #2
 264:	02000000 	andeq	r0, r0, #0
 268:	10007791 	mulne	r0, r1, r7
 26c:	00000198 	muleq	r0, r8, r1
 270:	018e8401 	orreq	r8, lr, r1, lsl #8
 274:	005a2000 	subseq	r2, sl, r0
 278:	9c010000 	stcls	0, cr0, [r1], {-0}
 27c:	00000299 	muleq	r0, r9, r2
 280:	01007811 	tsteq	r0, r1, lsl r8
 284:	00002184 	andeq	r2, r0, r4, lsl #3
 288:	6f910200 	svcvs	0x00910200
 28c:	0100630a 	tsteq	r0, sl, lsl #6
 290:	00002185 	andeq	r2, r0, r5, lsl #3
 294:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 298:	006f1200 	rsbeq	r1, pc, r0, lsl #4
 29c:	80010000 	andhi	r0, r1, r0
 2a0:	2000017c 	andcs	r0, r0, ip, ror r1
 2a4:	00000012 	andeq	r0, r0, r2, lsl r0
 2a8:	00099c01 	andeq	r9, r9, r1, lsl #24
 2ac:	01000000 	mrseq	r0, (UNDEF: 0)
 2b0:	00013e72 	andeq	r3, r1, r2, ror lr
 2b4:	00003e20 	andeq	r3, r0, r0, lsr #28
 2b8:	cd9c0100 	ldfgts	f0, [ip]
 2bc:	11000002 	tstne	r0, r2
 2c0:	0100736d 	tsteq	r0, sp, ror #6
 2c4:	0002cd72 	andeq	ip, r2, r2, ror sp
 2c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2cc:	07040300 	streq	r0, [r4, -r0, lsl #6]
 2d0:	000001c7 	andeq	r0, r0, r7, asr #3
 2d4:	00002813 	andeq	r2, r0, r3, lsl r8
 2d8:	2c610100 	stfcse	f0, [r1], #-0
 2dc:	12200001 	eorne	r0, r0, #1
 2e0:	01000000 	mrseq	r0, (UNDEF: 0)
 2e4:	0002f79c 	muleq	r2, ip, r7
 2e8:	73751100 	cmnvc	r5, #0, 2
 2ec:	cd610100 	stfgte	f0, [r1, #-0]
 2f0:	02000002 	andeq	r0, r0, #2
 2f4:	14007491 	strne	r7, [r0], #-1169	; 0xfffffb6f
 2f8:	00000063 	andeq	r0, r0, r3, rrx
 2fc:	00e85601 	rsceq	r5, r8, r1, lsl #12
 300:	00442000 	subeq	r2, r4, r0
 304:	9c010000 	stcls	0, cr0, [r1], {-0}
 308:	0001ad09 	andeq	sl, r1, r9, lsl #26
 30c:	4c410100 	stfmie	f0, [r1], {-0}
 310:	9c200000 	stcls	0, cr0, [r0], #-0
 314:	01000000 	mrseq	r0, (UNDEF: 0)
 318:	0004119c 	muleq	r4, ip, r1
 31c:	02181500 	andseq	r1, r8, #0, 10
 320:	44010000 	strmi	r0, [r1], #-0
 324:	000000ad 	andeq	r0, r0, sp, lsr #1
 328:	0000032e 	andeq	r0, r0, lr, lsr #6
 32c:	b215000f 	andslt	r0, r5, #15
 330:	01000001 	tsteq	r0, r1
 334:	0000ad45 	andeq	sl, r0, r5, asr #26
 338:	00033f00 	andeq	r3, r3, r0, lsl #30
 33c:	15000f00 	strne	r0, [r0, #-3840]	; 0xfffff100
 340:	00000000 	andeq	r0, r0, r0
 344:	00ad4c01 	adceq	r4, sp, r1, lsl #24
 348:	03500000 	cmpeq	r0, #0
 34c:	000f0000 	andeq	r0, pc, r0
 350:	00005e16 	andeq	r5, r0, r6, lsl lr
 354:	00001e20 	andeq	r1, r0, r0, lsr #28
 358:	00038100 	andeq	r8, r3, r0, lsl #2
 35c:	00690a00 	rsbeq	r0, r9, r0, lsl #20
 360:	00ad4601 	adceq	r4, sp, r1, lsl #12
 364:	91020000 	mrsls	r0, (UNDEF: 2)
 368:	00641774 	rsbeq	r1, r4, r4, ror r7
 36c:	000c2000 	andeq	r2, ip, r0
 370:	460e0000 	strmi	r0, [lr], -r0
 374:	01000000 	mrseq	r0, (UNDEF: 0)
 378:	0000ad47 	andeq	sl, r0, r7, asr #26
 37c:	00000f00 	andeq	r0, r0, r0, lsl #30
 380:	007c1600 	rsbseq	r1, ip, r0, lsl #12
 384:	001e2000 	andseq	r2, lr, r0
 388:	03b20000 			; <UNDEFINED> instruction: 0x03b20000
 38c:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
 390:	ad490100 	stfgee	f0, [r9, #-0]
 394:	02000000 	andeq	r0, r0, #0
 398:	82177091 	andshi	r7, r7, #145	; 0x91
 39c:	0c200000 	stceq	0, cr0, [r0], #-0
 3a0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 3a4:	00000046 	andeq	r0, r0, r6, asr #32
 3a8:	00ad4701 	adceq	r4, sp, r1, lsl #14
 3ac:	000f0000 	andeq	r0, pc, r0
 3b0:	a4160000 	ldrge	r0, [r6], #-0
 3b4:	1e200000 	cdpne	0, 2, cr0, cr0, cr0, {0}
 3b8:	e3000000 	movw	r0, #0
 3bc:	0a000003 	beq	3d0 <startup-0x1ffffc30>
 3c0:	4d010069 	stcmi	0, cr0, [r1, #-420]	; 0xfffffe5c
 3c4:	000000ad 	andeq	r0, r0, sp, lsr #1
 3c8:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
 3cc:	200000aa 	andcs	r0, r0, sl, lsr #1
 3d0:	0000000c 	andeq	r0, r0, ip
 3d4:	0000460e 	andeq	r4, r0, lr, lsl #12
 3d8:	ad470100 	stfgee	f0, [r7, #-0]
 3dc:	0f000000 	svceq	0x00000000
 3e0:	17000000 	strne	r0, [r0, -r0]
 3e4:	200000c2 	andcs	r0, r0, r2, asr #1
 3e8:	0000001e 	andeq	r0, r0, lr, lsl r0
 3ec:	0100690a 	tsteq	r0, sl, lsl #18
 3f0:	0000ad50 	andeq	sl, r0, r0, asr sp
 3f4:	68910200 	ldmvs	r1, {r9}
 3f8:	0000c817 	andeq	ip, r0, r7, lsl r8
 3fc:	00000c20 	andeq	r0, r0, r0, lsr #24
 400:	00460e00 	subeq	r0, r6, r0, lsl #28
 404:	47010000 	strmi	r0, [r1, -r0]
 408:	000000ad 	andeq	r0, r0, sp, lsr #1
 40c:	0000000f 	andeq	r0, r0, pc
 410:	00a11400 	adceq	r1, r1, r0, lsl #8
 414:	3a010000 	bcc	4041c <startup-0x1ffbfbe4>
 418:	20000010 	andcs	r0, r0, r0, lsl r0
 41c:	0000003c 	andeq	r0, r0, ip, lsr r0
 420:	90149c01 	andsls	r9, r4, r1, lsl #24
 424:	01000001 	tsteq	r0, r1
 428:	00000031 	andeq	r0, r0, r1, lsr r0
 42c:	00000c20 	andeq	r0, r0, r0, lsr #24
 430:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	012e0400 			; <UNDEFINED> instruction: 0x012e0400
  2c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  34:	01111927 	tsteq	r1, r7, lsr #18
  38:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  3c:	01194296 			; <UNDEFINED> instruction: 0x01194296
  40:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
  44:	08030005 	stmdaeq	r3, {r0, r2}
  48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  4c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  50:	34060000 	strcc	r0, [r6], #-0
  54:	3a0e0300 	bcc	380c5c <startup-0x1fc7f3a4>
  58:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	00180213 	andseq	r0, r8, r3, lsl r2
  60:	00340700 	eorseq	r0, r4, r0, lsl #14
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	1349053b 	movtne	r0, #38203	; 0x953b
  6c:	00001802 	andeq	r1, r0, r2, lsl #16
  70:	0b002408 	bleq	9098 <startup-0x1fff6f68>
  74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  78:	09000008 	stmdbeq	r0, {r3}
  7c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  80:	0b3a0e03 	bleq	e83894 <startup-0x1f17c76c>
  84:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  88:	06120111 			; <UNDEFINED> instruction: 0x06120111
  8c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  90:	00130119 	andseq	r0, r3, r9, lsl r1
  94:	00340a00 	eorseq	r0, r4, r0, lsl #20
  98:	0b3a0803 	bleq	e820ac <startup-0x1f17df54>
  9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a0:	00001802 	andeq	r1, r0, r2, lsl #16
  a4:	0300050b 	movweq	r0, #1291	; 0x50b
  a8:	3b0b3a0e 	blcc	2ce8e8 <startup-0x1fd31718>
  ac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  b0:	0c000018 	stceq	0, cr0, [r0], {24}
  b4:	0e03012e 	adfeqsp	f0, f3, #0.5
  b8:	0b3b0b3a 	bleq	ec2da8 <startup-0x1f13d258>
  bc:	01111927 	tsteq	r1, r7, lsr #18
  c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
  c8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
  cc:	0e03012e 	adfeqsp	f0, f3, #0.5
  d0:	0b3b0b3a 	bleq	ec2dc0 <startup-0x1f13d240>
  d4:	13491927 	movtne	r1, #39207	; 0x9927
  d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
  dc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  e0:	00130119 	andseq	r0, r3, r9, lsl r1
  e4:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
  e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  ec:	0b3b0b3a 	bleq	ec2ddc <startup-0x1f13d224>
  f0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  f4:	180f0000 	stmdane	pc, {}	; <UNPREDICTABLE>
  f8:	10000000 	andne	r0, r0, r0
  fc:	0e03012e 	adfeqsp	f0, f3, #0.5
 100:	0b3b0b3a 	bleq	ec2df0 <startup-0x1f13d210>
 104:	01111927 	tsteq	r1, r7, lsr #18
 108:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 10c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 110:	11000013 	tstne	r0, r3, lsl r0
 114:	08030005 	stmdaeq	r3, {r0, r2}
 118:	0b3b0b3a 	bleq	ec2e08 <startup-0x1f13d1f8>
 11c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 120:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 124:	03193f00 	tsteq	r9, #0, 30
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	1119270b 	tstne	r9, fp, lsl #14
 130:	40061201 	andmi	r1, r6, r1, lsl #4
 134:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 138:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 13c:	03193f01 	tsteq	r9, #1, 30
 140:	3b0b3a0e 	blcc	2ce980 <startup-0x1fd31680>
 144:	1119270b 	tstne	r9, fp, lsl #14
 148:	40061201 	andmi	r1, r6, r1, lsl #4
 14c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 150:	00001301 	andeq	r1, r0, r1, lsl #6
 154:	3f002e14 	svccc	0x00002e14
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 160:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 164:	97184006 	ldrls	r4, [r8, -r6]
 168:	00001942 	andeq	r1, r0, r2, asr #18
 16c:	3f012e15 	svccc	0x00012e15
 170:	3a0e0319 	bcc	380ddc <startup-0x1fc7f224>
 174:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 178:	01193c13 	tsteq	r9, r3, lsl ip
 17c:	16000013 			; <UNDEFINED> instruction: 0x16000013
 180:	0111010b 	tsteq	r1, fp, lsl #2
 184:	13010612 	movwne	r0, #5650	; 0x1612
 188:	0b170000 	bleq	5c0190 <startup-0x1fa3fe70>
 18c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 190:	00000006 	andeq	r0, r0, r6

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000070c 	andeq	r0, r0, ip, lsl #14
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000071c 	andcs	r0, r0, ip, lsl r7
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
   4:	005a0002 	subseq	r0, sl, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6c63696e 			; <UNDEFINED> instruction: 0x6c63696e
  28:	41442f61 	cmpmi	r4, r1, ror #30
  2c:	37313054 			; <UNDEFINED> instruction: 0x37313054
  30:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  34:	6f4d2f31 	svcvs	0x004d2f31
  38:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
  3c:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
  40:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
  44:	72672f72 	rsbvc	r2, r7, #456	; 0x1c8
  48:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  4c:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  50:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  54:	74730000 	ldrbtvc	r0, [r3], #-0
  58:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
  60:	00000001 	andeq	r0, r0, r1
  64:	00020500 	andeq	r0, r2, r0, lsl #10
  68:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  6c:	5e130131 	mrcpl	1, 0, r0, cr3, cr1, {1}
  70:	01000302 	tsteq	r0, r2, lsl #6
  74:	02050001 	andeq	r0, r5, #1
  78:	20000010 	andcs	r0, r0, r0, lsl r0
  7c:	2f013903 	svccs	0x00013903
  80:	593d3d3e 	ldmdbpl	sp!, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  84:	2f2f3dd8 	svccs	0x002f3dd8
  88:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
  8c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  90:	00650304 	rsbeq	r0, r5, r4, lsl #6
  94:	06010402 	streq	r0, [r1], -r2, lsl #8
  98:	003f063c 	eorseq	r0, pc, ip, lsr r6	; <UNPREDICTABLE>
  9c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
  a0:	03040200 	movweq	r0, #16896	; 0x4200
  a4:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
  a8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
  ac:	0200593f 	andeq	r5, r0, #1032192	; 0xfc000
  b0:	003d0304 	eorseq	r0, sp, r4, lsl #6
  b4:	65030402 	strvs	r0, [r3, #-1026]	; 0xfffffbfe
  b8:	01040200 	mrseq	r0, R12_usr
  bc:	3f063c06 	svccc	0x00063c06
  c0:	03040200 	movweq	r0, #16896	; 0x4200
  c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
  c8:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
  cc:	3c060104 	stfccs	f0, [r6], {4}
  d0:	2f4d4006 	svccs	0x004d4006
  d4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  d8:	01040200 	mrseq	r0, R12_usr
  dc:	67062006 	strvs	r2, [r6, -r6]
  e0:	034fa23d 	movteq	sl, #62013	; 0xf23d
  e4:	4c4d2009 	mcrrmi	0, 0, r2, sp, cr9
  e8:	59223e83 	stmdbpl	r2!, {r0, r1, r7, r9, sl, fp, ip, sp}
  ec:	2f4b4339 	svccs	0x004b4339
  f0:	683d2f2f 	ldmdavs	sp!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
  f4:	59e58359 	stmibpl	r5!, {r0, r3, r4, r6, r8, r9, pc}^
  f8:	83596867 	cmphi	r9, #6750208	; 0x670000
  fc:	676759d7 			; <UNDEFINED> instruction: 0x676759d7
 100:	03741003 	cmneq	r4, #3
 104:	10032070 	andne	r2, r3, r0, ror r0
 108:	2072034a 	rsbscs	r0, r2, sl, asr #6
 10c:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 110:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 114:	2f4b223d 	svccs	0x004b223d
 118:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 11c:	4b4b3d3d 	blmi	12cf618 <startup-0x1ed309e8>
 120:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 124:	3d3e3e3d 	ldccc	14, cr3, [lr, #-244]!	; 0xffffff0c
 128:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
 12c:	2f3d752f 	svccs	0x003d752f
 130:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
 134:	3d3d68bb 	ldccc	8, cr6, [sp, #-748]!	; 0xfffffd14
 138:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 13c:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
 140:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 144:	c93d303d 	ldmdbgt	sp!, {r0, r2, r3, r4, r5, ip, sp}
 148:	4b675967 	blmi	19d66ec <startup-0x1e629914>
 14c:	2f594b91 	svccs	0x00594b91
 150:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 154:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 158:	3d917530 	cfldr32cc	mvfx7, [r1, #192]	; 0xc0
 15c:	4b833d59 	blmi	fe0cf6c8 <__aeabi_idiv0+0xde0cee98>
 160:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 164:	3e4b833d 	mcrcc	3, 2, r8, cr11, cr13, {1}
 168:	004b9f4b 	subeq	r9, fp, fp, asr #30
 16c:	4b030402 	blmi	c117c <startup-0x1ff3ee84>
 170:	03040200 	movweq	r0, #16896	; 0x4200
 174:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 178:	00580601 	subseq	r0, r8, r1, lsl #12
 17c:	06020402 	streq	r0, [r2], -r2, lsl #8
 180:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
 184:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 188:	00694b51 	rsbeq	r4, r9, r1, asr fp
 18c:	06010402 	streq	r0, [r1], -r2, lsl #8
 190:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 194:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 198:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
 19c:	1308754b 	movwne	r7, #34123	; 0x854b
 1a0:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 1a4:	5a595959 	bpl	1656710 <startup-0x1e9a98f0>
 1a8:	4b3d753d 	blmi	f5d6a4 <startup-0x1f0a295c>
 1ac:	c93e4b4c 	ldmdbgt	lr!, {r2, r3, r6, r8, r9, fp, lr}
 1b0:	3dc99fd7 	stclcc	15, cr9, [r9, #860]	; 0x35c
 1b4:	63039fae 	movwvs	r9, #16302	; 0x3fae
 1b8:	201e03ac 	andscs	r0, lr, ip, lsr #7
 1bc:	01000802 	tsteq	r0, r2, lsl #16
 1c0:	Address 0x000001c0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
  10:	72670065 	rsbvc	r0, r7, #101	; 0x65
  14:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  18:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  1c:	5f657469 	svcpl	0x00657469
  20:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  24:	00646e61 	rsbeq	r6, r4, r1, ror #28
  28:	616c6564 	cmnvs	ip, r4, ror #10
  2c:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  30:	006f726b 	rsbeq	r7, pc, fp, ror #4
  34:	70617267 	rsbvc	r7, r1, r7, ror #4
  38:	5f636968 	svcpl	0x00636968
  3c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  40:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  44:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  48:	006c6578 	rsbeq	r6, ip, r8, ror r5
  4c:	70617267 	rsbvc	r7, r1, r7, ror #4
  50:	5f636968 	svcpl	0x00636968
  54:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  58:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  5c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  60:	64007261 	strvs	r7, [r0], #-609	; 0xfffffd9f
  64:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  68:	3035325f 	eorscc	r3, r5, pc, asr r2
  6c:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
  70:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  74:	3030355f 	eorscc	r3, r0, pc, asr r5
  78:	6700736e 	strvs	r7, [r0, -lr, ror #6]
  7c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  80:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  84:	5f746961 	svcpl	0x00746961
  88:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  8c:	72670079 	rsbvc	r0, r7, #121	; 0x79
  90:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  94:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  98:	5f657469 	svcpl	0x00657469
  9c:	61746164 	cmnvs	r4, r4, ror #2
  a0:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
  a4:	70615f74 	rsbvc	r5, r1, r4, ror pc
  a8:	616d0070 	smcvs	53248	; 0xd000
  ac:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
  b0:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
  b4:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
  b8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  bc:	2064656e 	rsbcs	r6, r4, lr, ror #10
  c0:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  c4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  c8:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  cc:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  d0:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  d4:	30373130 	eorscc	r3, r7, r0, lsr r1
  d8:	20353132 	eorscs	r3, r5, r2, lsr r1
  dc:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  e0:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  e4:	415b2029 	cmpmi	fp, r9, lsr #32
  e8:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff39e <__aeabi_idiv0+0xdfffeb6e>
  ec:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  f0:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  f4:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  f8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  fc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 100:	6f697369 	svcvs	0x00697369
 104:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
 108:	32313535 	eorscc	r3, r1, #222298112	; 0xd400000
 10c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 110:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 114:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 118:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 11c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 120:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 124:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 128:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 12c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 130:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 134:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 138:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 13c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 140:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 144:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 148:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 14c:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 150:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 154:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 158:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 15c:	61726700 	cmnvs	r2, r0, lsl #14
 160:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 164:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 168:	73006574 	movwvc	r6, #1396	; 0x574
 16c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 170:	6f635f74 	svcvs	0x00635f74
 174:	6f72746e 	svcvs	0x0072746e
 178:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 17c:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 180:	67007865 	strvs	r7, [r0, -r5, ror #16]
 184:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 188:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 18c:	00646165 	rsbeq	r6, r4, r5, ror #2
 190:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 194:	00707574 	rsbseq	r7, r0, r4, ror r5
 198:	70617267 	rsbvc	r7, r1, r7, ror #4
 19c:	5f636968 	svcpl	0x00636968
 1a0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1a4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1a8:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 1ac:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 1b0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 1b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 1b8:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 1bc:	5f726165 	svcpl	0x00726165
 1c0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 1c4:	75006e65 	strvc	r6, [r0, #-3685]	; 0xfffff19b
 1c8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1cc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1d0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1d4:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff799 <__aeabi_idiv0+0xdfffef69>
 1d8:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1dc:	63696e2f 	cmnvs	r9, #752	; 0x2f0
 1e0:	442f616c 	strtmi	r6, [pc], #-364	; 1e8 <startup-0x1ffffe18>
 1e4:	31305441 	teqcc	r0, r1, asr #8
 1e8:	614c2f37 	cmpvs	ip, r7, lsr pc
 1ec:	4d2f3162 	stfmis	f3, [pc, #-392]!	; 6c <startup-0x1fffff94>
 1f0:	616c706f 	cmnvs	ip, pc, rrx
 1f4:	61726f62 	cmnvs	r2, r2, ror #30
 1f8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 1fc:	672f7265 	strvs	r7, [pc, -r5, ror #4]!
 200:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 204:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 208:	616c7073 	smcvs	50947	; 0xc703
 20c:	74732f79 	ldrbtvc	r2, [r3], #-3961	; 0xfffff087
 210:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 214:	00632e70 	rsbeq	r2, r3, r0, ror lr
 218:	70617267 	rsbvc	r7, r1, r7, ror #4
 21c:	5f636968 	svcpl	0x00636968
 220:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 224:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 228:	Address 0x00000228 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000003c 	andeq	r0, r0, ip, lsr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000004c 	andcs	r0, r0, ip, asr #32
  48:	0000009c 	muleq	r0, ip, r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	180e4101 	stmdane	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	00000018 	andeq	r0, r0, r8, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	200000e8 	andcs	r0, r0, r8, ror #1
  68:	00000044 	andeq	r0, r0, r4, asr #32
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	2000012c 	andcs	r0, r0, ip, lsr #2
  84:	00000012 	andeq	r0, r0, r2, lsl r0
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	100e4101 	andne	r4, lr, r1, lsl #2
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	2000013e 	andcs	r0, r0, lr, lsr r1
  a4:	0000003e 	andeq	r0, r0, lr, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	2000017c 	andcs	r0, r0, ip, ror r1
  c4:	00000012 	andeq	r0, r0, r2, lsl r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	2000018e 	andcs	r0, r0, lr, lsl #3
  e0:	0000005a 	andeq	r0, r0, sl, asr r0
  e4:	40080e41 	andmi	r0, r8, r1, asr #28
  e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  ec:	180e4101 	stmdane	lr, {r0, r8, lr}
  f0:	00070d41 	andeq	r0, r7, r1, asr #26
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	200001e8 	andcs	r0, r0, r8, ror #3
 100:	00000058 	andeq	r0, r0, r8, asr r0
 104:	40080e41 	andmi	r0, r8, r1, asr #28
 108:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 10c:	180e4101 	stmdane	lr, {r0, r8, lr}
 110:	00070d41 	andeq	r0, r7, r1, asr #26
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	20000240 	andcs	r0, r0, r0, asr #4
 120:	0000005a 	andeq	r0, r0, sl, asr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	100e4101 	andne	r4, lr, r1, lsl #2
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	00000018 	andeq	r0, r0, r8, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	2000029a 	mulcs	r0, sl, r2
 140:	0000005c 	andeq	r0, r0, ip, asr r0
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 150:	0000001c 	andeq	r0, r0, ip, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	200002f6 	strdcs	r0, [r0], -r6
 15c:	0000006e 	andeq	r0, r0, lr, rrx
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	100e4101 	andne	r4, lr, r1, lsl #2
 16c:	00070d41 	andeq	r0, r7, r1, asr #26
 170:	0000001c 	andeq	r0, r0, ip, lsl r0
 174:	00000000 	andeq	r0, r0, r0
 178:	20000364 	andcs	r0, r0, r4, ror #6
 17c:	00000094 	muleq	r0, r4, r0
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	180e4101 	stmdane	lr, {r0, r8, lr}
 18c:	00070d41 	andeq	r0, r7, r1, asr #26
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	00000000 	andeq	r0, r0, r0
 198:	200003f8 	strdcs	r0, [r0], -r8
 19c:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a0:	40080e41 	andmi	r0, r8, r1, asr #28
 1a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ac:	00070d41 	andeq	r0, r7, r1, asr #26
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	20000422 	andcs	r0, r0, r2, lsr #8
 1bc:	0000006e 	andeq	r0, r0, lr, rrx
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	100e4101 	andne	r4, lr, r1, lsl #2
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	20000490 	mulcs	r0, r0, r4
 1dc:	00000040 	andeq	r0, r0, r0, asr #32
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	100e4101 	andne	r4, lr, r1, lsl #2
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	200004d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1fc:	00000046 	andeq	r0, r0, r6, asr #32
 200:	40080e41 	andmi	r0, r8, r1, asr #28
 204:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 208:	100e4101 	andne	r4, lr, r1, lsl #2
 20c:	00070d41 	andeq	r0, r7, r1, asr #26
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000516 	andcs	r0, r0, r6, lsl r5
 21c:	00000066 	andeq	r0, r0, r6, rrx
 220:	40080e41 	andmi	r0, r8, r1, asr #28
 224:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 228:	100e4101 	andne	r4, lr, r1, lsl #2
 22c:	00070d41 	andeq	r0, r7, r1, asr #26
 230:	00000020 	andeq	r0, r0, r0, lsr #32
 234:	00000000 	andeq	r0, r0, r0
 238:	2000057c 	andcs	r0, r0, ip, ror r5
 23c:	000001a0 	andeq	r0, r0, r0, lsr #3
 240:	400c0e41 	andmi	r0, ip, r1, asr #28
 244:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 248:	018e4002 	orreq	r4, lr, r2
 24c:	41300e41 	teqmi	r0, r1, asr #28
 250:	0000070d 	andeq	r0, r0, sp, lsl #14
 254:	0000000c 	andeq	r0, r0, ip
 258:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 25c:	7c010001 	stcvc	0, cr0, [r1], {1}
 260:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 264:	0000000c 	andeq	r0, r0, ip
 268:	00000254 	andeq	r0, r0, r4, asr r2
 26c:	2000071d 	andcs	r0, r0, sp, lsl r7
 270:	0000010a 	andeq	r0, r0, sl, lsl #2
